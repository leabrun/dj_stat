{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useEffect, useCallback } from 'react';\nimport { useDJConsole } from './DJConsoleContext';\nconst useSound = (soundUrl, soundId) => {\n  _s();\n  const audioRef = useRef(null);\n  const isPlayingRef = useRef(false);\n  const playPromiseRef = useRef(null);\n\n  // Get context values\n  const {\n    volume,\n    registerSound,\n    unregisterSound\n  } = useDJConsole();\n  useEffect(() => {\n    // Create audio element if it doesn't exist\n    if (!audioRef.current) {\n      audioRef.current = new Audio(soundUrl);\n      audioRef.current.loop = true;\n      audioRef.current.preload = 'auto';\n      audioRef.current.volume = volume;\n    }\n\n    // Cleanup on unmount\n    return () => {\n      stop();\n      audioRef.current = null;\n    };\n  }, [soundUrl]);\n\n  // Update volume when it changes in context\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.volume = volume;\n    }\n  }, [volume]);\n  const stop = useCallback(() => {\n    if (audioRef.current) {\n      if (playPromiseRef.current) {\n        playPromiseRef.current.then(() => {\n          audioRef.current.pause();\n          audioRef.current.currentTime = 0;\n          isPlayingRef.current = false;\n          // Unregister sound when stopped\n          unregisterSound(soundId);\n        }).catch(() => {\n          isPlayingRef.current = false;\n          unregisterSound(soundId);\n        });\n      } else {\n        audioRef.current.pause();\n        audioRef.current.currentTime = 0;\n        isPlayingRef.current = false;\n        // Unregister sound when stopped\n        unregisterSound(soundId);\n      }\n    }\n  }, [soundId, unregisterSound]);\n  const play = useCallback(() => {\n    if (!isPlayingRef.current && audioRef.current) {\n      // Ensure the latest volume is set\n      audioRef.current.volume = volume;\n\n      // Store the play promise\n      const playPromise = audioRef.current.play();\n      if (playPromise !== undefined) {\n        playPromiseRef.current = playPromise;\n        playPromise.then(() => {\n          isPlayingRef.current = true;\n          // Register sound as active\n          registerSound(soundId);\n          if (playPromiseRef.current === playPromise) {\n            playPromiseRef.current = null;\n          }\n        }).catch(err => {\n          console.error(\"Audio play error:\", err);\n          isPlayingRef.current = false;\n          if (playPromiseRef.current === playPromise) {\n            playPromiseRef.current = null;\n          }\n        });\n      } else {\n        isPlayingRef.current = true;\n        // Register sound as active\n        registerSound(soundId);\n      }\n    }\n  }, [volume, soundId, registerSound]);\n  return {\n    play,\n    stop,\n    isPlaying: isPlayingRef.current\n  };\n};\n_s(useSound, \"J5gj2JhUTHUDJX3g7KfVhCUtP2U=\", false, function () {\n  return [useDJConsole];\n});\nexport default useSound;","map":{"version":3,"names":["useRef","useEffect","useCallback","useDJConsole","useSound","soundUrl","soundId","_s","audioRef","isPlayingRef","playPromiseRef","volume","registerSound","unregisterSound","current","Audio","loop","preload","stop","then","pause","currentTime","catch","play","playPromise","undefined","err","console","error","isPlaying"],"sources":["/home/leabrun/python_/KWORK/dj/front/src/useSound.jsx"],"sourcesContent":["import { useRef, useEffect, useCallback } from 'react';\nimport { useDJConsole } from './DJConsoleContext';\n\nconst useSound = (soundUrl, soundId) => {\n  const audioRef = useRef(null);\n  const isPlayingRef = useRef(false);\n  const playPromiseRef = useRef(null);\n  \n  // Get context values\n  const { volume, registerSound, unregisterSound } = useDJConsole();\n\n  useEffect(() => {\n    // Create audio element if it doesn't exist\n    if (!audioRef.current) {\n      audioRef.current = new Audio(soundUrl);\n      audioRef.current.loop = true;\n      audioRef.current.preload = 'auto';\n      audioRef.current.volume = volume;\n    }\n\n    // Cleanup on unmount\n    return () => {\n      stop();\n      audioRef.current = null;\n    };\n  }, [soundUrl]);\n  \n  // Update volume when it changes in context\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.volume = volume;\n    }\n  }, [volume]);\n\n  const stop = useCallback(() => {\n    if (audioRef.current) {\n      if (playPromiseRef.current) {\n        playPromiseRef.current\n          .then(() => {\n            audioRef.current.pause();\n            audioRef.current.currentTime = 0;\n            isPlayingRef.current = false;\n            // Unregister sound when stopped\n            unregisterSound(soundId);\n          })\n          .catch(() => {\n            isPlayingRef.current = false;\n            unregisterSound(soundId);\n          });\n      } else {\n        audioRef.current.pause();\n        audioRef.current.currentTime = 0;\n        isPlayingRef.current = false;\n        // Unregister sound when stopped\n        unregisterSound(soundId);\n      }\n    }\n  }, [soundId, unregisterSound]);\n\n  const play = useCallback(() => {\n    if (!isPlayingRef.current && audioRef.current) {\n      // Ensure the latest volume is set\n      audioRef.current.volume = volume;\n      \n      // Store the play promise\n      const playPromise = audioRef.current.play();\n      if (playPromise !== undefined) {\n        playPromiseRef.current = playPromise;\n        \n        playPromise\n          .then(() => {\n            isPlayingRef.current = true;\n            // Register sound as active\n            registerSound(soundId);\n            \n            if (playPromiseRef.current === playPromise) {\n              playPromiseRef.current = null;\n            }\n          })\n          .catch(err => {\n            console.error(\"Audio play error:\", err);\n            isPlayingRef.current = false;\n            if (playPromiseRef.current === playPromise) {\n              playPromiseRef.current = null;\n            }\n          });\n      } else {\n        isPlayingRef.current = true;\n        // Register sound as active\n        registerSound(soundId);\n      }\n    }\n  }, [volume, soundId, registerSound]);\n\n  return { \n    play, \n    stop, \n    isPlaying: isPlayingRef.current \n  };\n};\n\nexport default useSound;"],"mappings":";AAAA,SAASA,MAAM,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACtD,SAASC,YAAY,QAAQ,oBAAoB;AAEjD,MAAMC,QAAQ,GAAGA,CAACC,QAAQ,EAAEC,OAAO,KAAK;EAAAC,EAAA;EACtC,MAAMC,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMS,YAAY,GAAGT,MAAM,CAAC,KAAK,CAAC;EAClC,MAAMU,cAAc,GAAGV,MAAM,CAAC,IAAI,CAAC;;EAEnC;EACA,MAAM;IAAEW,MAAM;IAAEC,aAAa;IAAEC;EAAgB,CAAC,GAAGV,YAAY,CAAC,CAAC;EAEjEF,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACO,QAAQ,CAACM,OAAO,EAAE;MACrBN,QAAQ,CAACM,OAAO,GAAG,IAAIC,KAAK,CAACV,QAAQ,CAAC;MACtCG,QAAQ,CAACM,OAAO,CAACE,IAAI,GAAG,IAAI;MAC5BR,QAAQ,CAACM,OAAO,CAACG,OAAO,GAAG,MAAM;MACjCT,QAAQ,CAACM,OAAO,CAACH,MAAM,GAAGA,MAAM;IAClC;;IAEA;IACA,OAAO,MAAM;MACXO,IAAI,CAAC,CAAC;MACNV,QAAQ,CAACM,OAAO,GAAG,IAAI;IACzB,CAAC;EACH,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;;EAEd;EACAJ,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,CAACM,OAAO,EAAE;MACpBN,QAAQ,CAACM,OAAO,CAACH,MAAM,GAAGA,MAAM;IAClC;EACF,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,MAAMO,IAAI,GAAGhB,WAAW,CAAC,MAAM;IAC7B,IAAIM,QAAQ,CAACM,OAAO,EAAE;MACpB,IAAIJ,cAAc,CAACI,OAAO,EAAE;QAC1BJ,cAAc,CAACI,OAAO,CACnBK,IAAI,CAAC,MAAM;UACVX,QAAQ,CAACM,OAAO,CAACM,KAAK,CAAC,CAAC;UACxBZ,QAAQ,CAACM,OAAO,CAACO,WAAW,GAAG,CAAC;UAChCZ,YAAY,CAACK,OAAO,GAAG,KAAK;UAC5B;UACAD,eAAe,CAACP,OAAO,CAAC;QAC1B,CAAC,CAAC,CACDgB,KAAK,CAAC,MAAM;UACXb,YAAY,CAACK,OAAO,GAAG,KAAK;UAC5BD,eAAe,CAACP,OAAO,CAAC;QAC1B,CAAC,CAAC;MACN,CAAC,MAAM;QACLE,QAAQ,CAACM,OAAO,CAACM,KAAK,CAAC,CAAC;QACxBZ,QAAQ,CAACM,OAAO,CAACO,WAAW,GAAG,CAAC;QAChCZ,YAAY,CAACK,OAAO,GAAG,KAAK;QAC5B;QACAD,eAAe,CAACP,OAAO,CAAC;MAC1B;IACF;EACF,CAAC,EAAE,CAACA,OAAO,EAAEO,eAAe,CAAC,CAAC;EAE9B,MAAMU,IAAI,GAAGrB,WAAW,CAAC,MAAM;IAC7B,IAAI,CAACO,YAAY,CAACK,OAAO,IAAIN,QAAQ,CAACM,OAAO,EAAE;MAC7C;MACAN,QAAQ,CAACM,OAAO,CAACH,MAAM,GAAGA,MAAM;;MAEhC;MACA,MAAMa,WAAW,GAAGhB,QAAQ,CAACM,OAAO,CAACS,IAAI,CAAC,CAAC;MAC3C,IAAIC,WAAW,KAAKC,SAAS,EAAE;QAC7Bf,cAAc,CAACI,OAAO,GAAGU,WAAW;QAEpCA,WAAW,CACRL,IAAI,CAAC,MAAM;UACVV,YAAY,CAACK,OAAO,GAAG,IAAI;UAC3B;UACAF,aAAa,CAACN,OAAO,CAAC;UAEtB,IAAII,cAAc,CAACI,OAAO,KAAKU,WAAW,EAAE;YAC1Cd,cAAc,CAACI,OAAO,GAAG,IAAI;UAC/B;QACF,CAAC,CAAC,CACDQ,KAAK,CAACI,GAAG,IAAI;UACZC,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEF,GAAG,CAAC;UACvCjB,YAAY,CAACK,OAAO,GAAG,KAAK;UAC5B,IAAIJ,cAAc,CAACI,OAAO,KAAKU,WAAW,EAAE;YAC1Cd,cAAc,CAACI,OAAO,GAAG,IAAI;UAC/B;QACF,CAAC,CAAC;MACN,CAAC,MAAM;QACLL,YAAY,CAACK,OAAO,GAAG,IAAI;QAC3B;QACAF,aAAa,CAACN,OAAO,CAAC;MACxB;IACF;EACF,CAAC,EAAE,CAACK,MAAM,EAAEL,OAAO,EAAEM,aAAa,CAAC,CAAC;EAEpC,OAAO;IACLW,IAAI;IACJL,IAAI;IACJW,SAAS,EAAEpB,YAAY,CAACK;EAC1B,CAAC;AACH,CAAC;AAACP,EAAA,CAhGIH,QAAQ;EAAA,QAMuCD,YAAY;AAAA;AA4FjE,eAAeC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}