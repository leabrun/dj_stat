{"ast":null,"code":"var Wt = Object.defineProperty;\nvar Ut = (e, t, s) => t in e ? Wt(e, t, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: s\n}) : e[t] = s;\nvar c = (e, t, s) => Ut(e, typeof t != \"symbol\" ? t + \"\" : t, s);\nfunction ot(e, t) {\n  let s;\n  const n = () => {\n    s !== void 0 && t && t(s), s = void 0;\n  };\n  return [() => s === void 0 ? s = e(n) : s, n];\n}\nfunction at(e) {\n  const t = V(),\n    {\n      count: s\n    } = t;\n  t.unsubscribe(e), s && !t.count && ie();\n}\nfunction Ht(e) {\n  return V().subscribe(e), () => at(e);\n}\nclass Ot {\n  constructor(t, s = {}) {\n    this.scope = t, this.options = s;\n  }\n  /**\n   * Prints message into a console in case, logger is currently enabled.\n   * @param level - log level.\n   * @param args - arguments.\n   */\n  print(t, ...s) {\n    const n = /* @__PURE__ */new Date(),\n      r = Intl.DateTimeFormat(\"en-GB\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        fractionalSecondDigits: 3,\n        timeZone: \"UTC\"\n      }).format(n),\n      {\n        textColor: i,\n        bgColor: o\n      } = this.options,\n      a = \"font-weight: bold;padding: 0 5px;border-radius:5px\";\n    console[t](`%c${r}%c / %c${this.scope}`, `${a};background-color: lightblue;color:black`, \"\", `${a};${i ? `color:${i};` : \"\"}${o ? `background-color:${o}` : \"\"}`, ...s);\n  }\n  /**\n   * Prints error message into a console.\n   * @param args\n   */\n  error(...t) {\n    this.print(\"error\", ...t);\n  }\n  /**\n   * Prints log message into a console.\n   * @param args\n   */\n  log(...t) {\n    this.print(\"log\", ...t);\n  }\n}\nconst F = new Ot(\"SDK\", {\n  bgColor: \"forestgreen\",\n  textColor: \"white\"\n});\nlet O = !1;\nconst st = ({\n  name: e,\n  payload: t\n}) => {\n  F.log(\"Event received:\", t ? {\n    name: e,\n    payload: t\n  } : {\n    name: e\n  });\n};\nfunction Ze(e) {\n  O !== e && (O = e, e ? Ht(st) : at(st));\n}\nfunction Gt(...e) {\n  O && F.log(...e);\n}\nclass T {\n  constructor() {\n    c(this, \"listeners\", /* @__PURE__ */new Map());\n    c(this, \"listenersCount\", 0);\n    c(this, \"subscribeListeners\", []);\n  }\n  /**\n   * Removes all event listeners.\n   */\n  clear() {\n    this.listeners.clear(), this.subscribeListeners = [];\n  }\n  /**\n   * Returns count of bound listeners.\n   */\n  get count() {\n    return this.listenersCount + this.subscribeListeners.length;\n  }\n  emit(t, ...s) {\n    this.subscribeListeners.forEach(r => r({\n      event: t,\n      args: s\n    })), (this.listeners.get(t) || []).forEach(([r, i]) => {\n      r(...s), i && this.off(t, r);\n    });\n  }\n  /**\n   * Adds new event listener.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @param once - should listener be called only once.\n   * @returns Function to remove bound event listener.\n   */\n  on(t, s, n) {\n    let r = this.listeners.get(t);\n    return r || this.listeners.set(t, r = []), r.push([s, n]), this.listenersCount += 1, () => this.off(t, s);\n  }\n  /**\n   * Removes event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param event - event name.\n   * @param listener - event listener.\n   */\n  off(t, s) {\n    const n = this.listeners.get(t) || [];\n    for (let r = 0; r < n.length; r += 1) if (s === n[r][0]) {\n      n.splice(r, 1), this.listenersCount -= 1;\n      return;\n    }\n  }\n  /**\n   * Adds a new event listener for all events.\n   * @param listener - event listener.\n   * @returns Function to remove event listener.\n   */\n  subscribe(t) {\n    return this.subscribeListeners.push(t), () => this.unsubscribe(t);\n  }\n  /**\n   * Removes global event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param listener - event listener.\n   */\n  unsubscribe(t) {\n    for (let s = 0; s < this.subscribeListeners.length; s += 1) if (this.subscribeListeners[s] === t) {\n      this.subscribeListeners.splice(s, 1);\n      return;\n    }\n  }\n}\nfunction G(e, t, s) {\n  return window.addEventListener(e, t, s), () => window.removeEventListener(e, t, s);\n}\nfunction J(...e) {\n  let t = !1;\n  const s = e.flat(1);\n  return [n => !t && s.push(n), () => {\n    t || (t = !0, s.forEach(n => n()));\n  }, t];\n}\nclass D extends Error {\n  constructor(t, s, n) {\n    super(s, {\n      cause: n\n    }), this.type = t, Object.setPrototypeOf(this, D.prototype);\n  }\n}\nfunction f(e, t, s) {\n  return new D(e, t, s);\n}\nconst jt = \"ERR_METHOD_UNSUPPORTED\",\n  zt = \"ERR_METHOD_PARAMETER_UNSUPPORTED\",\n  Ft = \"ERR_UNKNOWN_ENV\",\n  Jt = \"ERR_INVOKE_CUSTOM_METHOD_RESPONSE\",\n  Qt = \"ERR_TIMED_OUT\",\n  Yt = \"ERR_UNEXPECTED_TYPE\",\n  ct = \"ERR_PARSE\",\n  Zt = \"ERR_NAVIGATION_LIST_EMPTY\",\n  Kt = \"ERR_NAVIGATION_CURSOR_INVALID\",\n  Ke = \"ERR_NAVIGATION_ITEM_INVALID\",\n  Xe = \"ERR_SSR_INIT\",\n  Xt = \"ERR_INVALID_PATH_BASE\";\nfunction E() {\n  return f(Yt, \"Value has unexpected type\");\n}\nclass M {\n  constructor(t, s, n) {\n    this.parser = t, this.isOptional = s, this.type = n;\n  }\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  parse(t) {\n    if (!(this.isOptional && t === void 0)) try {\n      return this.parser(t);\n    } catch (s) {\n      throw f(ct, `Unable to parse value${this.type ? ` as ${this.type}` : \"\"}`, s);\n    }\n  }\n  optional() {\n    return this.isOptional = !0, this;\n  }\n}\nfunction x(e, t) {\n  return () => new M(e, !1, t);\n}\nconst w = x(e => {\n  if (typeof e == \"boolean\") return e;\n  const t = String(e);\n  if (t === \"1\" || t === \"true\") return !0;\n  if (t === \"0\" || t === \"false\") return !1;\n  throw E();\n}, \"boolean\");\nfunction ht(e, t) {\n  const s = {};\n  for (const n in e) {\n    const r = e[n];\n    if (!r) continue;\n    let i, o;\n    if (typeof r == \"function\" || \"parse\" in r) i = n, o = typeof r == \"function\" ? r : r.parse.bind(r);else {\n      const {\n        type: a\n      } = r;\n      i = r.from || n, o = typeof a == \"function\" ? a : a.parse.bind(a);\n    }\n    try {\n      const a = o(t(i));\n      a !== void 0 && (s[n] = a);\n    } catch (a) {\n      throw f(ct, `Unable to parse field \"${n}\"`, a);\n    }\n  }\n  return s;\n}\nfunction pt(e) {\n  let t = e;\n  if (typeof t == \"string\" && (t = JSON.parse(t)), typeof t != \"object\" || t === null || Array.isArray(t)) throw E();\n  return t;\n}\nfunction g(e, t) {\n  return new M(s => {\n    const n = pt(s);\n    return ht(e, r => n[r]);\n  }, !1, t);\n}\nconst y = x(e => {\n    if (typeof e == \"number\") return e;\n    if (typeof e == \"string\") {\n      const t = Number(e);\n      if (!Number.isNaN(t)) return t;\n    }\n    throw E();\n  }, \"number\"),\n  p = x(e => {\n    if (typeof e == \"string\" || typeof e == \"number\") return e.toString();\n    throw E();\n  }, \"string\");\nfunction ut(e) {\n  return g({\n    eventType: p(),\n    eventData: t => t\n  }).parse(e);\n}\nfunction te() {\n  [\"TelegramGameProxy_receiveEvent\", \"TelegramGameProxy\", \"Telegram\"].forEach(e => {\n    delete window[e];\n  });\n}\nfunction j(e, t) {\n  window.dispatchEvent(new MessageEvent(\"message\", {\n    data: JSON.stringify({\n      eventType: e,\n      eventData: t\n    }),\n    // We specify window.parent to imitate the case, the parent iframe sent us this event.\n    source: window.parent\n  }));\n}\nfunction ee() {\n  [[\"TelegramGameProxy_receiveEvent\"],\n  // Windows Phone.\n  [\"TelegramGameProxy\", \"receiveEvent\"],\n  // Desktop.\n  [\"Telegram\", \"WebView\", \"receiveEvent\"]\n  // Android and iOS.\n  ].forEach(e => {\n    let t = window;\n    e.forEach((s, n, r) => {\n      if (n === r.length - 1) {\n        t[s] = j;\n        return;\n      }\n      s in t || (t[s] = {}), t = t[s];\n    });\n  });\n}\nconst se = {\n  clipboard_text_received: g({\n    req_id: p(),\n    data: e => e === null ? e : p().optional().parse(e)\n  }),\n  custom_method_invoked: g({\n    req_id: p(),\n    result: e => e,\n    error: p().optional()\n  }),\n  popup_closed: {\n    parse(e) {\n      return g({\n        button_id: t => t == null ? void 0 : p().parse(t)\n      }).parse(e ?? {});\n    }\n  },\n  viewport_changed: g({\n    height: y(),\n    width: e => e == null ? window.innerWidth : y().parse(e),\n    is_state_stable: w(),\n    is_expanded: w()\n  })\n};\nfunction ne() {\n  const e = new T(),\n    t = new T();\n  t.subscribe(n => {\n    e.emit(\"event\", {\n      name: n.event,\n      payload: n.args[0]\n    });\n  }), ee();\n  const [, s] = J(\n  // Don't forget to remove created handlers.\n  te,\n  // Add \"resize\" event listener to make sure, we always have fresh viewport information.\n  // Desktop version of Telegram is sometimes not sending the viewport_changed\n  // event. For example, when the MainButton is shown. That's why we should\n  // add our own listener to make sure, viewport information is always fresh.\n  // Issue: https://github.com/Telegram-Mini-Apps/tma.js/issues/10\n  G(\"resize\", () => {\n    t.emit(\"viewport_changed\", {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      is_state_stable: !0,\n      is_expanded: !0\n    });\n  }),\n  // Add listener, which handles events sent from the Telegram web application and also events\n  // generated by the local emitEvent function.\n  G(\"message\", n => {\n    if (n.source !== window.parent) return;\n    let r;\n    try {\n      r = ut(n.data);\n    } catch {\n      return;\n    }\n    const {\n        eventType: i,\n        eventData: o\n      } = r,\n      a = se[i];\n    try {\n      const h = a ? a.parse(o) : o;\n      t.emit(...(h ? [i, h] : [i]));\n    } catch (h) {\n      F.error(`An error occurred processing the \"${i}\" event from the Telegram application.\nPlease, file an issue here:\nhttps://github.com/Telegram-Mini-Apps/tma.js/issues/new/choose`, r, h);\n    }\n  }),\n  // Clear emitters.\n  () => e.clear(), () => t.clear());\n  return [{\n    on: t.on.bind(t),\n    off: t.off.bind(t),\n    subscribe(n) {\n      return e.on(\"event\", n);\n    },\n    unsubscribe(n) {\n      e.off(\"event\", n);\n    },\n    get count() {\n      return t.count + e.count;\n    }\n  }, s];\n}\nconst [re, ie] = ot(e => {\n  const [t, s] = ne(),\n    n = t.off.bind(t);\n  return t.off = (r, i) => {\n    const {\n      count: o\n    } = t;\n    n(r, i), o && !t.count && e();\n  }, [t, s];\n}, ([, e]) => e());\nfunction V() {\n  return re()[0];\n}\nfunction L(e, t) {\n  V().off(e, t);\n}\nfunction b(e, t, s) {\n  return V().on(e, t, s);\n}\nfunction q(e) {\n  return typeof e == \"object\" && e !== null && !Array.isArray(e);\n}\nfunction oe(e, t) {\n  const s = e.split(\".\"),\n    n = t.split(\".\"),\n    r = Math.max(s.length, n.length);\n  for (let i = 0; i < r; i += 1) {\n    const o = parseInt(s[i] || \"0\", 10),\n      a = parseInt(n[i] || \"0\", 10);\n    if (o !== a) return o > a ? 1 : -1;\n  }\n  return 0;\n}\nfunction _(e, t) {\n  return oe(e, t) <= 0;\n}\nfunction v(e, t, s) {\n  if (typeof s == \"string\") {\n    if (e === \"web_app_open_link\") {\n      if (t === \"try_instant_view\") return _(\"6.4\", s);\n      if (t === \"try_browser\") return _(\"7.6\", s);\n    }\n    if (e === \"web_app_set_header_color\" && t === \"color\") return _(\"6.9\", s);\n    if (e === \"web_app_close\" && t === \"return_back\") return _(\"7.6\", s);\n  }\n  switch (e) {\n    case \"web_app_open_tg_link\":\n    case \"web_app_open_invoice\":\n    case \"web_app_setup_back_button\":\n    case \"web_app_set_background_color\":\n    case \"web_app_set_header_color\":\n    case \"web_app_trigger_haptic_feedback\":\n      return _(\"6.1\", t);\n    case \"web_app_open_popup\":\n      return _(\"6.2\", t);\n    case \"web_app_close_scan_qr_popup\":\n    case \"web_app_open_scan_qr_popup\":\n    case \"web_app_read_text_from_clipboard\":\n      return _(\"6.4\", t);\n    case \"web_app_switch_inline_query\":\n      return _(\"6.7\", t);\n    case \"web_app_invoke_custom_method\":\n    case \"web_app_request_write_access\":\n    case \"web_app_request_phone\":\n      return _(\"6.9\", t);\n    case \"web_app_setup_settings_button\":\n      return _(\"6.10\", t);\n    case \"web_app_biometry_get_info\":\n    case \"web_app_biometry_open_settings\":\n    case \"web_app_biometry_request_access\":\n    case \"web_app_biometry_request_auth\":\n    case \"web_app_biometry_update_token\":\n      return _(\"7.2\", t);\n    default:\n      return [\"iframe_ready\", \"iframe_will_reload\", \"web_app_close\", \"web_app_data_send\", \"web_app_expand\", \"web_app_open_link\", \"web_app_ready\", \"web_app_request_theme\", \"web_app_request_viewport\", \"web_app_setup_main_button\", \"web_app_setup_closing_behavior\"].includes(e);\n  }\n}\nfunction lt(e) {\n  return \"external\" in e && q(e.external) && \"notify\" in e.external && typeof e.external.notify == \"function\";\n}\nfunction dt(e) {\n  return \"TelegramWebviewProxy\" in e && q(e.TelegramWebviewProxy) && \"postEvent\" in e.TelegramWebviewProxy && typeof e.TelegramWebviewProxy.postEvent == \"function\";\n}\nfunction _t() {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return !0;\n  }\n}\nconst ae = \"https://web.telegram.org\";\nlet ft = ae;\nfunction ts(e) {\n  ft = e;\n}\nfunction ce() {\n  return ft;\n}\nfunction R(e, t, s) {\n  let n = {},\n    r;\n  if (!t && !s ? n = {} : t && s ? (n = s, r = t) : t && (\"targetOrigin\" in t ? n = t : r = t), Gt(\"Posting event:\", r ? {\n    event: e,\n    data: r\n  } : {\n    event: e\n  }), _t()) return window.parent.postMessage(JSON.stringify({\n    eventType: e,\n    eventData: r\n  }), n.targetOrigin || ce());\n  if (lt(window)) {\n    window.external.notify(JSON.stringify({\n      eventType: e,\n      eventData: r\n    }));\n    return;\n  }\n  if (dt(window)) {\n    window.TelegramWebviewProxy.postEvent(e, JSON.stringify(r));\n    return;\n  }\n  throw f(Ft, \"Unable to determine current environment and possible way to send event. You are probably trying to use Mini Apps method outside the Telegram application environment.\");\n}\nfunction he(e) {\n  return (t, s) => {\n    if (!v(t, e)) throw f(jt, `Method \"${t}\" is unsupported in Mini Apps version ${e}`);\n    if (q(s) && t === \"web_app_set_header_color\" && \"color\" in s && !v(t, \"color\", e)) throw f(zt, `Parameter \"color\" of \"${t}\" method is unsupported in Mini Apps version ${e}`);\n    return R(t, s);\n  };\n}\nfunction gt(e) {\n  return ({\n    req_id: t\n  }) => t === e;\n}\nfunction bt(e) {\n  return f(Qt, `Timeout reached: ${e}ms`);\n}\nfunction wt(e, t) {\n  return Promise.race([typeof e == \"function\" ? e() : e, new Promise((s, n) => {\n    setTimeout(() => {\n      n(bt(t));\n    }, t);\n  })]);\n}\nasync function d(e) {\n  let t;\n  const s = new Promise(a => t = a),\n    {\n      event: n,\n      capture: r,\n      timeout: i\n    } = e,\n    [, o] = J(\n    // We need to iterate over all tracked events, and create their event listeners.\n    (Array.isArray(n) ? n : [n]).map(a => b(a, h => {\n      (!r || (Array.isArray(n) ? r({\n        event: a,\n        payload: h\n      }) : r(h))) && t(h);\n    })));\n  try {\n    return (e.postEvent || R)(e.method, e.params), await (i ? wt(s, i) : s);\n  } finally {\n    o();\n  }\n}\nasync function S(e, t, s, n = {}) {\n  const {\n    result: r,\n    error: i\n  } = await d({\n    ...n,\n    method: \"web_app_invoke_custom_method\",\n    event: \"custom_method_invoked\",\n    params: {\n      method: e,\n      params: t,\n      req_id: s\n    },\n    capture: gt(s)\n  });\n  if (i) throw f(Jt, i);\n  return r;\n}\nfunction z(...e) {\n  return e.map(t => {\n    if (typeof t == \"string\") return t;\n    if (q(t)) return z(Object.entries(t).map(s => s[1] && s[0]));\n    if (Array.isArray(t)) return z(...t);\n  }).filter(Boolean).join(\" \");\n}\nfunction es(...e) {\n  return e.reduce((t, s) => (q(s) && Object.entries(s).forEach(([n, r]) => {\n    const i = z(t[n], r);\n    i.length && (t[n] = i);\n  }), t), {});\n}\nfunction Q(e) {\n  return /^#[\\da-f]{6}$/i.test(e);\n}\nfunction pe(e) {\n  return /^#[\\da-f]{3}$/i.test(e);\n}\nfunction mt(e) {\n  const t = e.replace(/\\s/g, \"\").toLowerCase();\n  if (Q(t)) return t;\n  if (pe(t)) {\n    let n = \"#\";\n    for (let r = 0; r < 3; r += 1) n += t[1 + r].repeat(2);\n    return n;\n  }\n  const s = t.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/) || t.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n  if (!s) throw new Error(`Value \"${e}\" does not satisfy any of known RGB formats.`);\n  return s.slice(1).reduce((n, r) => {\n    const i = parseInt(r, 10).toString(16);\n    return n + (i.length === 1 ? \"0\" : \"\") + i;\n  }, \"#\");\n}\nfunction yt(e) {\n  const t = mt(e);\n  return Math.sqrt([0.299, 0.587, 0.114].reduce((s, n, r) => {\n    const i = parseInt(t.slice(1 + r * 2, 1 + (r + 1) * 2), 16);\n    return s + i * i * n;\n  }, 0)) < 120;\n}\nclass ue {\n  constructor(t) {\n    c(this, \"ee\", new T());\n    /**\n     * Adds new event listener.\n     */\n    c(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    c(this, \"off\", this.ee.off.bind(this.ee));\n    this.state = t;\n  }\n  /**\n   * Clones current state and returns its copy.\n   */\n  clone() {\n    return {\n      ...this.state\n    };\n  }\n  set(t, s) {\n    Object.entries(typeof t == \"string\" ? {\n      [t]: s\n    } : t).reduce((r, [i, o]) => this.state[i] === o || o === void 0 ? r : (this.state[i] = o, this.ee.emit(`change:${i}`, o), !0), !1) && this.ee.emit(\"change\", this.state);\n  }\n  /**\n   * Returns value by specified key.\n   * @param key - state key.\n   */\n  get(t) {\n    return this.state[t];\n  }\n}\nclass Y {\n  constructor(t) {\n    c(this, \"state\");\n    /**\n     * Gets the state value.\n     */\n    c(this, \"get\");\n    /**\n     * Sets the state value.\n     */\n    c(this, \"set\");\n    /**\n     * Clones the current state.\n     */\n    c(this, \"clone\");\n    this.state = new ue(t), this.set = this.state.set.bind(this.state), this.get = this.state.get.bind(this.state), this.clone = this.state.clone.bind(this.state);\n  }\n}\nfunction vt(e, t) {\n  return s => v(t[s], e);\n}\nclass Z extends Y {\n  constructor(s, n, r) {\n    super(s);\n    /**\n     * @returns True, if specified method is supported by the current component.\n     */\n    c(this, \"supports\");\n    this.supports = vt(n, r);\n  }\n}\nclass le extends Z {\n  constructor(s, n, r) {\n    super({\n      isVisible: s\n    }, n, {\n      show: \"web_app_setup_back_button\",\n      hide: \"web_app_setup_back_button\"\n    });\n    /**\n     * Adds a new event listener.\n     * @param event - event to listen.\n     * @param listener - listener to add.\n     */\n    c(this, \"on\", (s, n) => s === \"click\" ? b(\"back_button_pressed\", n) : this.state.on(s, n));\n    /**\n     * Removes the event listener.\n     * @param event - event to listen.\n     * @param listener - listener to remove.\n     */\n    c(this, \"off\", (s, n) => s === \"click\" ? L(\"back_button_pressed\", n) : this.state.off(s, n));\n    this.postEvent = r;\n  }\n  set isVisible(s) {\n    this.set(\"isVisible\", s), this.postEvent(\"web_app_setup_back_button\", {\n      is_visible: s\n    });\n  }\n  /**\n   * True if BackButton is currently visible.\n   */\n  get isVisible() {\n    return this.get(\"isVisible\");\n  }\n  /**\n   * Hides the BackButton.\n   */\n  hide() {\n    this.isVisible = !1;\n  }\n  /**\n   * Shows the BackButton.\n   */\n  show() {\n    this.isVisible = !0;\n  }\n}\nconst Et = x(e => e instanceof Date ? e : new Date(y().parse(e) * 1e3), \"Date\");\nfunction K(e, t) {\n  return new M(s => {\n    if (typeof s != \"string\" && !(s instanceof URLSearchParams)) throw E();\n    const n = typeof s == \"string\" ? new URLSearchParams(s) : s;\n    return ht(e, r => {\n      const i = n.get(r);\n      return i === null ? void 0 : i;\n    });\n  }, !1, t);\n}\nconst de = g({\n    id: y(),\n    type: p(),\n    title: p(),\n    photoUrl: {\n      type: p().optional(),\n      from: \"photo_url\"\n    },\n    username: p().optional()\n  }, \"Chat\").optional(),\n  nt = g({\n    addedToAttachmentMenu: {\n      type: w().optional(),\n      from: \"added_to_attachment_menu\"\n    },\n    allowsWriteToPm: {\n      type: w().optional(),\n      from: \"allows_write_to_pm\"\n    },\n    firstName: {\n      type: p(),\n      from: \"first_name\"\n    },\n    id: y(),\n    isBot: {\n      type: w().optional(),\n      from: \"is_bot\"\n    },\n    isPremium: {\n      type: w().optional(),\n      from: \"is_premium\"\n    },\n    languageCode: {\n      type: p().optional(),\n      from: \"language_code\"\n    },\n    lastName: {\n      type: p().optional(),\n      from: \"last_name\"\n    },\n    photoUrl: {\n      type: p().optional(),\n      from: \"photo_url\"\n    },\n    username: p().optional()\n  }, \"User\").optional();\nfunction xt() {\n  return K({\n    authDate: {\n      type: Et(),\n      from: \"auth_date\"\n    },\n    canSendAfter: {\n      type: y().optional(),\n      from: \"can_send_after\"\n    },\n    chat: de,\n    chatInstance: {\n      type: p().optional(),\n      from: \"chat_instance\"\n    },\n    chatType: {\n      type: p().optional(),\n      from: \"chat_type\"\n    },\n    hash: p(),\n    queryId: {\n      type: p().optional(),\n      from: \"query_id\"\n    },\n    receiver: nt,\n    startParam: {\n      type: p().optional(),\n      from: \"start_param\"\n    },\n    user: nt\n  }, \"InitData\");\n}\nconst _e = x(e => mt(p().parse(e)), \"rgb\");\nfunction fe(e) {\n  return e.replace(/_[a-z]/g, t => t[1].toUpperCase());\n}\nfunction ge(e) {\n  return e.replace(/[A-Z]/g, t => `_${t.toLowerCase()}`);\n}\nconst Pt = x(e => {\n  const t = _e().optional();\n  return Object.entries(pt(e)).reduce((s, [n, r]) => (s[fe(n)] = t.parse(r), s), {});\n}, \"ThemeParams\");\nfunction X(e) {\n  return K({\n    botInline: {\n      type: w().optional(),\n      from: \"tgWebAppBotInline\"\n    },\n    initData: {\n      type: xt().optional(),\n      from: \"tgWebAppData\"\n    },\n    initDataRaw: {\n      type: p().optional(),\n      from: \"tgWebAppData\"\n    },\n    platform: {\n      type: p(),\n      from: \"tgWebAppPlatform\"\n    },\n    showSettings: {\n      type: w().optional(),\n      from: \"tgWebAppShowSettings\"\n    },\n    startParam: {\n      type: p().optional(),\n      from: \"tgWebAppStartParam\"\n    },\n    themeParams: {\n      type: Pt(),\n      from: \"tgWebAppThemeParams\"\n    },\n    version: {\n      type: p(),\n      from: \"tgWebAppVersion\"\n    }\n  }).parse(e);\n}\nfunction St(e) {\n  return X(e.replace(/^[^?#]*[?#]/, \"\").replace(/[?#]/g, \"&\"));\n}\nfunction be() {\n  return St(window.location.href);\n}\nfunction Ct() {\n  return performance.getEntriesByType(\"navigation\")[0];\n}\nfunction we() {\n  const e = Ct();\n  if (!e) throw new Error(\"Unable to get first navigation entry.\");\n  return St(e.name);\n}\nfunction Tt(e) {\n  return `tma.js/${e.replace(/[A-Z]/g, t => `-${t.toLowerCase()}`)}`;\n}\nfunction Rt(e, t) {\n  sessionStorage.setItem(Tt(e), JSON.stringify(t));\n}\nfunction At(e) {\n  const t = sessionStorage.getItem(Tt(e));\n  try {\n    return t ? JSON.parse(t) : void 0;\n  } catch {}\n}\nfunction me() {\n  return X(At(\"launchParams\") || \"\");\n}\nfunction It(e) {\n  return JSON.stringify(Object.fromEntries(Object.entries(e).map(([t, s]) => [ge(t), s])));\n}\nfunction ye(e) {\n  const {\n      initDataRaw: t,\n      themeParams: s,\n      platform: n,\n      version: r,\n      showSettings: i,\n      startParam: o,\n      botInline: a\n    } = e,\n    h = new URLSearchParams();\n  return h.set(\"tgWebAppPlatform\", n), h.set(\"tgWebAppThemeParams\", It(s)), h.set(\"tgWebAppVersion\", r), t && h.set(\"tgWebAppData\", t), o && h.set(\"tgWebAppStartParam\", o), typeof i == \"boolean\" && h.set(\"tgWebAppShowSettings\", i ? \"1\" : \"0\"), typeof a == \"boolean\" && h.set(\"tgWebAppBotInline\", a ? \"1\" : \"0\"), h.toString();\n}\nfunction qt(e) {\n  Rt(\"launchParams\", ye(e));\n}\nfunction ve() {\n  for (const e of [\n  // Try to retrieve launch parameters from the current location. This method can return\n  // nothing in case, location was changed and then page was reloaded.\n  be,\n  // Then, try using the lower level API - window.performance.\n  we,\n  // Finally, try to extract launch parameters from the session storage.\n  me]) try {\n    const t = e();\n    return qt(t), t;\n  } catch {}\n  throw new Error(\"Unable to retrieve launch parameters from any known source.\");\n}\nfunction kt() {\n  const e = Ct();\n  return !!(e && e.type === \"reload\");\n}\nfunction Ee() {\n  let e = 0;\n  return () => (e += 1).toString();\n}\nconst [xe] = ot(Ee);\nfunction l(e, t) {\n  return () => {\n    const s = ve(),\n      n = {\n        ...s,\n        postEvent: he(s.version),\n        createRequestId: xe()\n      };\n    if (typeof e == \"function\") return e(n);\n    const [r, i, o] = J(),\n      a = t({\n        ...n,\n        // State should only be passed only in case, current page was reloaded. If we don't add\n        // this check, state restoration will work improperly in the web version of Telegram,\n        // when we are always working in the same \"session\" (tab).\n        state: kt() ? At(e) : void 0,\n        addCleanup: r\n      }),\n      h = u => (o || r(u.on(\"change\", Bt => {\n        Rt(e, Bt);\n      })), u);\n    return [a instanceof Promise ? a.then(h) : h(a), i];\n  };\n}\nconst ss = l(\"backButton\", ({\n  postEvent: e,\n  version: t,\n  state: s = {\n    isVisible: !1\n  }\n}) => new le(s.isVisible, t, e));\nclass k extends Z {\n  constructor() {\n    super(...arguments);\n    /**\n     * Adds a new event listener.\n     */\n    c(this, \"on\", this.state.on.bind(this.state));\n    /**\n     * Removes the event listener.\n     */\n    c(this, \"off\", this.state.off.bind(this.state));\n  }\n}\nfunction Nt(e) {\n  const t = e.available ? e : {\n    available: !1,\n    device_id: \"\",\n    token_saved: !1,\n    access_requested: !1,\n    access_granted: !1,\n    type: \"\"\n  };\n  return {\n    available: !0,\n    type: t.type,\n    deviceId: t.device_id,\n    tokenSaved: t.token_saved,\n    accessRequested: t.access_requested,\n    accessGranted: t.access_granted\n  };\n}\nclass Pe extends k {\n  constructor({\n    postEvent: s,\n    version: n,\n    ...r\n  }) {\n    super(r, n, {\n      auth: \"web_app_biometry_request_auth\",\n      openSettings: \"web_app_biometry_open_settings\",\n      requestAccess: \"web_app_biometry_request_access\",\n      updateToken: \"web_app_biometry_update_token\"\n    });\n    c(this, \"postEvent\");\n    c(this, \"authPromise\");\n    c(this, \"accessPromise\");\n    this.postEvent = s;\n  }\n  /**\n   * Shows whether biometry is available.\n   */\n  get available() {\n    return this.get(\"available\");\n  }\n  /**\n   * Shows whether permission to use biometrics has been granted.\n   */\n  get accessGranted() {\n    return this.get(\"accessGranted\");\n  }\n  /**\n   * Shows whether if permission to use biometrics has been requested.\n   */\n  get accessRequested() {\n    return this.get(\"accessRequested\");\n  }\n  /**\n   * Authenticates the user using biometrics.\n   * @param options - method options.\n   * @since 7.2\n   * @returns Token from the local secure storage, if authentication was successful.\n   */\n  async authenticate({\n    reason: s,\n    ...n\n  }) {\n    return this.authPromise || (this.authPromise = d({\n      ...n,\n      method: \"web_app_biometry_request_auth\",\n      event: \"biometry_auth_requested\",\n      postEvent: this.postEvent,\n      params: {\n        // TODO: Check if reason is empty works fine.\n        reason: (s || \"\").trim()\n      }\n    }).then(({\n      token: r\n    }) => r).finally(() => this.authPromise = void 0)), this.authPromise;\n  }\n  /**\n   * A unique device identifier that can be used to match the token to the device.\n   */\n  get deviceId() {\n    return this.get(\"deviceId\");\n  }\n  /**\n   * Opens the biometric access settings for bots. Useful when you need to request biometrics\n   * access to users who haven't granted it yet.\n   *\n   * _Note that this method can be called only in response to user interaction with the Mini App\n   * interface (e.g. a click inside the Mini App or on the main button)_.\n   * @since 7.2\n   */\n  openSettings() {\n    this.postEvent(\"web_app_biometry_open_settings\");\n  }\n  /**\n   * Requests permission to use biometrics.\n   * @since 7.2\n   * @returns Promise with true, if access was granted.\n   */\n  requestAccess({\n    reason: s,\n    ...n\n  } = {}) {\n    return this.accessPromise || (this.accessPromise = d({\n      ...n,\n      postEvent: this.postEvent,\n      method: \"web_app_biometry_request_access\",\n      event: \"biometry_info_received\",\n      params: {\n        reason: s || \"\"\n      }\n    }).then(r => {\n      const i = Nt(r);\n      return this.set(i), i.accessGranted;\n    }).finally(() => this.accessPromise = void 0)), this.accessPromise;\n  }\n  /**\n   * The type of biometrics currently available on the device.\n   */\n  get biometryType() {\n    return this.get(\"biometryType\");\n  }\n  /**\n   * Shows whether token was saved previously in the local secure storage.\n   */\n  get tokenSaved() {\n    return this.get(\"tokenSaved\");\n  }\n  /**\n   * Updates the biometric token in a secure storage on the device.\n   * @returns Promise with `true`, if token was updated.\n   */\n  async updateToken({\n    token: s,\n    ...n\n  } = {}) {\n    return [\"removed\", \"updated\"].includes((await d({\n      ...n,\n      postEvent: this.postEvent,\n      method: \"web_app_biometry_update_token\",\n      event: \"biometry_token_updated\",\n      params: {\n        token: s || \"\"\n      }\n    })).status);\n  }\n}\nasync function Se(e) {\n  return Nt(await d({\n    ...(e || {}),\n    method: \"web_app_biometry_get_info\",\n    event: \"biometry_info_received\"\n  }));\n}\nconst ns = l(\"biometryManager\", async ({\n  postEvent: e,\n  version: t,\n  state: s\n}) => new Pe({\n  ...(s || v(\"web_app_biometry_get_info\", t) ? s || (await Se({\n    timeout: 1e3\n  })) : {\n    available: !1,\n    accessGranted: !1,\n    accessRequested: !1,\n    tokenSaved: !1,\n    deviceId: \"\"\n  }),\n  version: t,\n  postEvent: e\n}));\nclass tt extends Y {\n  constructor() {\n    super(...arguments);\n    /**\n     * Adds a new event listener.\n     */\n    c(this, \"on\", this.state.on.bind(this.state));\n    /**\n     * Removes the event listener.\n     */\n    c(this, \"off\", this.state.off.bind(this.state));\n  }\n}\nclass Ce extends tt {\n  constructor(t, s) {\n    super({\n      isConfirmationNeeded: t\n    }), this.postEvent = s;\n  }\n  set isConfirmationNeeded(t) {\n    this.set(\"isConfirmationNeeded\", t), this.postEvent(\"web_app_setup_closing_behavior\", {\n      need_confirmation: t\n    });\n  }\n  /**\n   * True, if the confirmation dialog should be shown while the user is trying to close\n   * the Mini App.\n   */\n  get isConfirmationNeeded() {\n    return this.get(\"isConfirmationNeeded\");\n  }\n  /**\n   * Disables the confirmation dialog when closing the Mini App.\n   */\n  disableConfirmation() {\n    this.isConfirmationNeeded = !1;\n  }\n  /**\n   * Enables the confirmation dialog when closing the Mini App.\n   */\n  enableConfirmation() {\n    this.isConfirmationNeeded = !0;\n  }\n}\nconst rs = l(\"closingBehavior\", ({\n  postEvent: e,\n  state: t = {\n    isConfirmationNeeded: !1\n  }\n}) => new Ce(t.isConfirmationNeeded, e));\nclass et {\n  constructor(t, s) {\n    /**\n     * @returns True, if specified method is supported by the current component.\n     */\n    c(this, \"supports\");\n    this.supports = vt(t, s);\n  }\n}\nfunction Te(e) {\n  if (Array.isArray(e)) return e;\n  if (typeof e == \"string\") try {\n    const t = JSON.parse(e);\n    if (Array.isArray(t)) return t;\n  } catch {}\n  throw E();\n}\nclass Re extends M {\n  constructor(s, n, r) {\n    super(Te, n, r);\n    c(this, \"itemParser\");\n    this.itemParser = typeof s == \"function\" ? s : s.parse.bind(s);\n  }\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  parse(s) {\n    const n = super.parse(s);\n    return n === void 0 ? n : n.map(this.itemParser);\n  }\n  of(s) {\n    return this.itemParser = typeof s == \"function\" ? s : s.parse.bind(s), this;\n  }\n}\nfunction Ae(e) {\n  return new Re(t => t, !1, e);\n}\nfunction rt(e, t) {\n  return Object.fromEntries(e.map(s => [s, t]));\n}\nclass Ie extends et {\n  constructor(t, s, n) {\n    super(t, {\n      delete: \"web_app_invoke_custom_method\",\n      get: \"web_app_invoke_custom_method\",\n      getKeys: \"web_app_invoke_custom_method\",\n      set: \"web_app_invoke_custom_method\"\n    }), this.createRequestId = s, this.postEvent = n;\n  }\n  /**\n   * Deletes specified key or keys from the cloud storage.\n   * @param keyOrKeys - key or keys to delete.\n   * @param options - request execution options.\n   */\n  async delete(t, s = {}) {\n    const n = Array.isArray(t) ? t : [t];\n    n.length && (await S(\"deleteStorageValues\", {\n      keys: n\n    }, this.createRequestId(), {\n      ...s,\n      postEvent: this.postEvent\n    }));\n  }\n  /**\n   * Returns list of all keys presented in the cloud storage.\n   * @param options - request execution options.\n   */\n  async getKeys(t = {}) {\n    return Ae().of(p()).parse(await S(\"getStorageKeys\", {}, this.createRequestId(), {\n      ...t,\n      postEvent: this.postEvent\n    }));\n  }\n  async get(t, s = {}) {\n    const n = Array.isArray(t) ? t : [t];\n    if (!n.length) return rt(n, \"\");\n    const r = await S(\"getStorageValues\", {\n        keys: n\n      }, this.createRequestId(), {\n        ...s,\n        postEvent: this.postEvent\n      }),\n      i = g(rt(n, p()), \"CloudStorageData\").parse(r);\n    return Array.isArray(t) ? i : i[t];\n  }\n  /**\n   * Saves specified value by key.\n   * @param key - storage key.\n   * @param value - storage value.\n   * @param options - request execution options.\n   */\n  async set(t, s, n = {}) {\n    await S(\"saveStorageValue\", {\n      key: t,\n      value: s\n    }, this.createRequestId(), {\n      ...n,\n      postEvent: this.postEvent\n    });\n  }\n}\nconst is = l(({\n  createRequestId: e,\n  postEvent: t,\n  version: s\n}) => new Ie(s, e, t));\nclass qe extends et {\n  constructor(t, s) {\n    super(t, {\n      impactOccurred: \"web_app_trigger_haptic_feedback\",\n      notificationOccurred: \"web_app_trigger_haptic_feedback\",\n      selectionChanged: \"web_app_trigger_haptic_feedback\"\n    }), this.postEvent = s;\n  }\n  /**\n   * A method tells that an impact occurred. The Telegram app may play the\n   * appropriate haptics based on style value passed.\n   * @param style - impact style.\n   */\n  impactOccurred(t) {\n    this.postEvent(\"web_app_trigger_haptic_feedback\", {\n      type: \"impact\",\n      impact_style: t\n    });\n  }\n  /**\n   * A method tells that a task or action has succeeded, failed, or produced\n   * a warning. The Telegram app may play the appropriate haptics based on\n   * type value passed.\n   * @param type - notification type.\n   */\n  notificationOccurred(t) {\n    this.postEvent(\"web_app_trigger_haptic_feedback\", {\n      type: \"notification\",\n      notification_type: t\n    });\n  }\n  /**\n   * A method tells that the user has changed a selection. The Telegram app\n   * may play the appropriate haptics.\n   *\n   * Do not use this feedback when the user makes or confirms a selection;\n   * use it only when the selection changes.\n   */\n  selectionChanged() {\n    this.postEvent(\"web_app_trigger_haptic_feedback\", {\n      type: \"selection_change\"\n    });\n  }\n}\nconst os = l(({\n  version: e,\n  postEvent: t\n}) => new qe(e, t));\nclass ke {\n  constructor(t) {\n    this.initData = t;\n  }\n  /**\n   * @see InitDataParsed.authDate\n   */\n  get authDate() {\n    return this.initData.authDate;\n  }\n  /**\n   * @see InitDataParsed.canSendAfter\n   */\n  get canSendAfter() {\n    return this.initData.canSendAfter;\n  }\n  /**\n   * Date after which it is allowed to call\n   * the [answerWebAppQuery](https://core.telegram.org/bots/api#answerwebappquery) method.\n   */\n  get canSendAfterDate() {\n    const {\n      canSendAfter: t\n    } = this;\n    return t ? new Date(this.authDate.getTime() + t * 1e3) : void 0;\n  }\n  /**\n   * @see InitDataParsed.chat\n   */\n  get chat() {\n    return this.initData.chat;\n  }\n  /**\n   * @see InitDataParsed.chatType\n   */\n  get chatType() {\n    return this.initData.chatType;\n  }\n  /**\n   * @see InitDataParsed.chatInstance\n   */\n  get chatInstance() {\n    return this.initData.chatInstance;\n  }\n  /**\n   * @see InitDataParsed.hash\n   */\n  get hash() {\n    return this.initData.hash;\n  }\n  /**\n   * @see InitDataParsed.queryId\n   */\n  get queryId() {\n    return this.initData.queryId;\n  }\n  /**\n   * @see InitDataParsed.receiver\n   */\n  get receiver() {\n    return this.initData.receiver;\n  }\n  /**\n   * @see InitDataParsed.startParam\n   */\n  get startParam() {\n    return this.initData.startParam;\n  }\n  /**\n   * @see InitDataParsed.user\n   */\n  get user() {\n    return this.initData.user;\n  }\n}\nconst as = l(({\n  initData: e\n}) => e ? new ke(e) : void 0);\nfunction cs(e) {\n  return xt().parse(e);\n}\nclass Ne extends k {\n  constructor(t, s, n) {\n    super({\n      isOpened: t\n    }, s, {\n      open: \"web_app_open_invoice\"\n    }), this.postEvent = n;\n  }\n  set isOpened(t) {\n    this.set(\"isOpened\", t);\n  }\n  /**\n   * True if invoice is currently opened.\n   */\n  get isOpened() {\n    return this.get(\"isOpened\");\n  }\n  async open(t, s) {\n    if (this.isOpened) throw new Error(\"Invoice is already opened\");\n    let n;\n    if (!s) n = t;else {\n      const {\n        hostname: r,\n        pathname: i\n      } = new URL(t, window.location.href);\n      if (r !== \"t.me\") throw new Error(`Incorrect hostname: ${r}`);\n      const o = i.match(/^\\/(\\$|invoice\\/)([A-Za-z0-9\\-_=]+)$/);\n      if (!o) throw new Error('Link pathname has incorrect format. Expected to receive \"/invoice/{slug}\" or \"/${slug}\"');\n      [,, n] = o;\n    }\n    this.isOpened = !0;\n    try {\n      return (await d({\n        method: \"web_app_open_invoice\",\n        event: \"invoice_closed\",\n        params: {\n          slug: n\n        },\n        postEvent: this.postEvent,\n        capture(i) {\n          return n === i.slug;\n        }\n      })).status;\n    } finally {\n      this.isOpened = !1;\n    }\n  }\n}\nconst hs = l(({\n  version: e,\n  postEvent: t\n}) => new Ne(!1, e, t));\nclass De extends Y {\n  constructor({\n    postEvent: s,\n    ...n\n  }) {\n    super(n);\n    c(this, \"postEvent\");\n    /**\n     * Adds a new event listener.\n     * @param event - event to listen.\n     * @param listener - listener to add.\n     */\n    c(this, \"on\", (s, n) => s === \"click\" ? b(\"main_button_pressed\", n) : this.state.on(s, n));\n    /**\n     * Removes the event listener.\n     * @param event - event to listen.\n     * @param listener - listener to remove.\n     */\n    c(this, \"off\", (s, n) => s === \"click\" ? L(\"main_button_pressed\", n) : this.state.off(s, n));\n    this.postEvent = s;\n  }\n  /**\n   * The MainButton background color.\n   */\n  get bgColor() {\n    return this.get(\"bgColor\");\n  }\n  /**\n   * Sends current local state to the Telegram application.\n   */\n  commit() {\n    this.text !== \"\" && this.postEvent(\"web_app_setup_main_button\", {\n      is_visible: this.isVisible,\n      is_active: this.isEnabled,\n      is_progress_visible: this.isLoaderVisible,\n      text: this.text,\n      color: this.bgColor,\n      text_color: this.textColor\n    });\n  }\n  /**\n   * Disables the MainButton.\n   * @see Does not work on Android: https://github.com/Telegram-Mini-Apps/issues/issues/1\n   */\n  disable() {\n    return this.isEnabled = !1, this;\n  }\n  /**\n   * Enables the MainButton.\n   */\n  enable() {\n    return this.isEnabled = !0, this;\n  }\n  /**\n   * Hides the MainButton.\n   */\n  hide() {\n    return this.isVisible = !1, this;\n  }\n  /**\n   * Hides the MainButton loading indicator.\n   */\n  hideLoader() {\n    return this.isLoaderVisible = !1, this;\n  }\n  set isEnabled(s) {\n    this.setParams({\n      isEnabled: s\n    });\n  }\n  /**\n   * True if the MainButton is enabled.\n   */\n  get isEnabled() {\n    return this.get(\"isEnabled\");\n  }\n  set isLoaderVisible(s) {\n    this.setParams({\n      isLoaderVisible: s\n    });\n  }\n  /**\n   * True if the MainButton loader is visible.\n   */\n  get isLoaderVisible() {\n    return this.get(\"isLoaderVisible\");\n  }\n  set isVisible(s) {\n    this.setParams({\n      isVisible: s\n    });\n  }\n  /**\n   * True if the MainButton is visible.\n   */\n  get isVisible() {\n    return this.get(\"isVisible\");\n  }\n  /**\n   * Shows the MainButton.\n   *\n   * Note that opening the Mini App from the attachment menu hides the main button until the\n   * user interacts with the Mini App interface.\n   */\n  show() {\n    return this.isVisible = !0, this;\n  }\n  /**\n   * Shows a loading indicator on the Main Button.\n   */\n  showLoader() {\n    return this.isLoaderVisible = !0, this;\n  }\n  /**\n   * Sets a new MainButton text. Minimal length for the text is 1 symbol, and maximum is 64 symbols.\n   * @param text - a new text.\n   */\n  setText(s) {\n    return this.setParams({\n      text: s\n    });\n  }\n  /**\n   * Sets a new Main Button text color.\n   * @param textColor - new text color.\n   */\n  setTextColor(s) {\n    return this.setParams({\n      textColor: s\n    });\n  }\n  /**\n   * Updates current Main Button color.\n   * @param bgColor - color to set.\n   */\n  setBgColor(s) {\n    return this.setParams({\n      bgColor: s\n    });\n  }\n  /**\n   * Allows setting multiple Main Button parameters.\n   * @param params - Main Button parameters.\n   */\n  setParams(s) {\n    return this.set(s), this.commit(), this;\n  }\n  /**\n   * The MainButton text.\n   */\n  get text() {\n    return this.get(\"text\");\n  }\n  /**\n   * The MainButton text color.\n   */\n  get textColor() {\n    return this.get(\"textColor\");\n  }\n}\nconst ps = l(\"mainButton\", ({\n  postEvent: e,\n  themeParams: t,\n  state: s = {\n    isVisible: !1,\n    isEnabled: !1,\n    text: \"\",\n    isLoaderVisible: !1,\n    textColor: t.buttonTextColor || \"#ffffff\",\n    bgColor: t.buttonColor || \"#000000\"\n  }\n}) => new De({\n  ...s,\n  postEvent: e\n}));\nfunction Me() {\n  return K({\n    contact: g({\n      userId: {\n        type: y(),\n        from: \"user_id\"\n      },\n      phoneNumber: {\n        type: p(),\n        from: \"phone_number\"\n      },\n      firstName: {\n        type: p(),\n        from: \"first_name\"\n      },\n      lastName: {\n        type: p().optional(),\n        from: \"last_name\"\n      }\n    }),\n    authDate: {\n      type: Et(),\n      from: \"auth_date\"\n    },\n    hash: p()\n  }, \"RequestedContact\");\n}\nfunction Dt(e, t) {\n  return s => {\n    const [n, r] = t[s];\n    return v(n, r, e);\n  };\n}\nfunction Ve(e) {\n  return new Promise(t => {\n    setTimeout(t, e);\n  });\n}\nclass Le extends k {\n  constructor({\n    postEvent: s,\n    createRequestId: n,\n    version: r,\n    botInline: i,\n    ...o\n  }) {\n    super(o, r, {\n      requestPhoneAccess: \"web_app_request_phone\",\n      requestWriteAccess: \"web_app_request_write_access\",\n      switchInlineQuery: \"web_app_switch_inline_query\",\n      setHeaderColor: \"web_app_set_header_color\",\n      setBackgroundColor: \"web_app_set_background_color\"\n    });\n    c(this, \"botInline\");\n    c(this, \"postEvent\");\n    c(this, \"createRequestId\");\n    c(this, \"requestPhoneAccessPromise\");\n    c(this, \"requestWriteAccessPromise\");\n    /**\n     * Checks if specified method parameter is supported by current component.\n     */\n    c(this, \"supportsParam\");\n    this.createRequestId = n, this.postEvent = s, this.botInline = i;\n    const a = this.supports.bind(this);\n    this.supports = h => a(h) ? h !== \"switchInlineQuery\" || i : !1, this.supportsParam = Dt(r, {\n      \"setHeaderColor.color\": [\"web_app_set_header_color\", \"color\"]\n    });\n  }\n  /**\n   * Attempts to get requested contact.\n   * @param timeout - request timeout.\n   */\n  async getRequestedContact({\n    timeout: s = 1e4\n  } = {}) {\n    return Me().parse(await S(\"getRequestedContact\", {}, this.createRequestId(), {\n      postEvent: this.postEvent,\n      timeout: s\n    }));\n  }\n  /**\n   * The Mini App background color.\n   * @example \"#ffaabb\"\n   */\n  get bgColor() {\n    return this.get(\"bgColor\");\n  }\n  /**\n   * Closes the Mini App.\n   * @param returnBack - should the application be wrapped into the bottom bar.\n   */\n  close(s) {\n    this.postEvent(\"web_app_close\", {\n      return_back: s\n    });\n  }\n  /**\n   * The Mini App header color.\n   * @example \"#ffaabb\"\n   * @example \"bg_color\"\n   */\n  get headerColor() {\n    return this.get(\"headerColor\");\n  }\n  /**\n   * True if the Mini App is currently launched in bot inline mode.\n   */\n  get isBotInline() {\n    return this.botInline;\n  }\n  /**\n   * True if the current Mini App background color is recognized as dark.\n   */\n  get isDark() {\n    return yt(this.bgColor);\n  }\n  /**\n   * Informs the Telegram app that the Mini App is ready to be displayed.\n   *\n   * It is recommended to call this method as early as possible, as soon as all essential\n   * interface elements loaded. Once this method called, the loading placeholder is hidden\n   * and the Mini App shown.\n   *\n   * If the method not called, the placeholder will be hidden only when the page fully loaded.\n   */\n  ready() {\n    this.postEvent(\"web_app_ready\");\n  }\n  /**\n   * Requests current user contact information. In contrary to requestPhoneAccess, this method\n   * returns promise with contact information that rejects in case, user denied access, or request\n   * failed.\n   * @param options - additional options.\n   */\n  async requestContact({\n    timeout: s = 5e3\n  } = {}) {\n    try {\n      return await this.getRequestedContact();\n    } catch {}\n    if ((await this.requestPhoneAccess()) !== \"sent\") throw new Error(\"Access denied.\");\n    const r = Date.now() + s;\n    let i = 50;\n    return wt(async () => {\n      for (; Date.now() < r;) {\n        try {\n          return await this.getRequestedContact();\n        } catch {}\n        await Ve(i), i += 50;\n      }\n      throw bt(s);\n    }, s);\n  }\n  /**\n   * Requests current user phone access. Method returns promise, which resolves\n   * status of the request. In case, user accepted the request, Mini App bot will receive\n   * the according notification.\n   *\n   * To obtain the retrieved information instead, utilize the `requestContact` method.\n   * @param options - additional options.\n   * @see requestContact\n   */\n  async requestPhoneAccess(s = {}) {\n    return this.requestPhoneAccessPromise || (this.requestPhoneAccessPromise = d({\n      ...s,\n      method: \"web_app_request_phone\",\n      event: \"phone_requested\",\n      postEvent: this.postEvent\n    }).then(({\n      status: n\n    }) => n).finally(() => this.requestPhoneAccessPromise = void 0)), this.requestPhoneAccessPromise;\n  }\n  /**\n   * Requests write message access to current user.\n   * @param options - additional options.\n   */\n  async requestWriteAccess(s = {}) {\n    return this.requestWriteAccessPromise || (this.requestWriteAccessPromise = d({\n      ...s,\n      method: \"web_app_request_write_access\",\n      event: \"write_access_requested\",\n      postEvent: this.postEvent\n    }).then(({\n      status: n\n    }) => n).finally(() => this.requestWriteAccessPromise = void 0)), this.requestWriteAccessPromise;\n  }\n  /**\n   * A method used to send data to the bot. When this method called, a service message sent to\n   * the bot containing the data of the length up to 4096 bytes, and the Mini App closed. See the\n   * field `web_app_data` in the class [Message](https://core.telegram.org/bots/api#message).\n   *\n   * This method is only available for Mini Apps launched via a Keyboard button.\n   * @param data - data to send to bot.\n   * @throws {Error} data has incorrect size.\n   */\n  sendData(s) {\n    const {\n      size: n\n    } = new Blob([s]);\n    if (!n || n > 4096) throw new Error(`Passed data has incorrect size: ${n}`);\n    this.postEvent(\"web_app_data_send\", {\n      data: s\n    });\n  }\n  /**\n   * Updates current Mini App header color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/tma.js/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/tma.js/issues/8\n   * @param color - color key or RGB color.\n   */\n  setHeaderColor(s) {\n    this.postEvent(\"web_app_set_header_color\", Q(s) ? {\n      color: s\n    } : {\n      color_key: s\n    }), this.set(\"headerColor\", s);\n  }\n  /**\n   * Updates current Mini App background color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/tma.js/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/tma.js/issues/8\n   * @param color - RGB color.\n   */\n  setBgColor(s) {\n    this.postEvent(\"web_app_set_background_color\", {\n      color: s\n    }), this.set(\"bgColor\", s);\n  }\n  /**\n   * Inserts the bot's username and the specified inline query in the current chat's input field.\n   * Query may be empty, in which case only the bot's username will be inserted. The client prompts\n   * the user to choose a specific chat, then opens that chat and inserts the bot's username and\n   * the specified inline query in the input field.\n   * @param text - text which should be inserted in the input after the current bot name. Max\n   * length is 256 symbols.\n   * @param chatTypes - List of chat types which could be chosen to send the message. Could be\n   * empty list.\n   */\n  switchInlineQuery(s, n = []) {\n    if (!this.supports(\"switchInlineQuery\") && !this.isBotInline) throw new Error(\"Method is unsupported because Mini App should be launched in inline mode.\");\n    this.postEvent(\"web_app_switch_inline_query\", {\n      query: s,\n      chat_types: n\n    });\n  }\n}\nconst us = l(\"miniApp\", ({\n  themeParams: e,\n  botInline: t = !1,\n  state: s = {\n    bgColor: e.bgColor || \"#ffffff\",\n    headerColor: e.headerBgColor || \"#000000\"\n  },\n  ...n\n}) => new Le({\n  ...n,\n  ...s,\n  botInline: t\n}));\nfunction $e(e) {\n  const t = e.message.trim(),\n    s = (e.title || \"\").trim(),\n    n = e.buttons || [];\n  let r;\n  if (s.length > 64) throw new Error(`Title has incorrect size: ${s.length}`);\n  if (!t.length || t.length > 256) throw new Error(`Message has incorrect size: ${t.length}`);\n  if (n.length > 3) throw new Error(`Buttons have incorrect size: ${n.length}`);\n  return n.length ? r = n.map(i => {\n    const {\n      id: o = \"\"\n    } = i;\n    if (o.length > 64) throw new Error(`Button ID has incorrect size: ${o}`);\n    if (!i.type || i.type === \"default\" || i.type === \"destructive\") {\n      const a = i.text.trim();\n      if (!a.length || a.length > 64) {\n        const h = i.type || \"default\";\n        throw new Error(`Button text with type \"${h}\" has incorrect size: ${i.text.length}`);\n      }\n      return {\n        ...i,\n        text: a,\n        id: o\n      };\n    }\n    return {\n      ...i,\n      id: o\n    };\n  }) : r = [{\n    type: \"close\",\n    id: \"\"\n  }], {\n    title: s,\n    message: t,\n    buttons: r\n  };\n}\nclass Be extends k {\n  constructor(t, s, n) {\n    super({\n      isOpened: t\n    }, s, {\n      open: \"web_app_open_popup\"\n    }), this.postEvent = n;\n  }\n  set isOpened(t) {\n    this.set(\"isOpened\", t);\n  }\n  /**\n   * True if the Popup is opened.\n   */\n  get isOpened() {\n    return this.get(\"isOpened\");\n  }\n  /**\n   * A method that shows a native popup described by the `params` argument.\n   * Promise will be resolved when popup is closed. Resolved value will have\n   * an identifier of pressed button.\n   *\n   * In case, user clicked outside the popup or clicked top right popup close\n   * button, null will be returned.\n   *\n   * @param options - popup parameters.\n   * @throws {Error} Popup is already opened.\n   */\n  async open(t) {\n    if (this.isOpened) throw new Error(\"Popup is already opened.\");\n    this.isOpened = !0;\n    try {\n      const {\n        button_id: s = null\n      } = await d({\n        event: \"popup_closed\",\n        method: \"web_app_open_popup\",\n        postEvent: this.postEvent,\n        params: $e(t)\n      });\n      return s;\n    } finally {\n      this.isOpened = !1;\n    }\n  }\n}\nconst ls = l(({\n  postEvent: e,\n  version: t\n}) => new Be(!1, t, e));\nclass We extends k {\n  constructor(t, s, n) {\n    super({\n      isOpened: t\n    }, s, {\n      close: \"web_app_close_scan_qr_popup\",\n      open: \"web_app_open_scan_qr_popup\"\n    }), this.postEvent = n;\n  }\n  /**\n   * Closes the scanner.\n   */\n  close() {\n    this.postEvent(\"web_app_close_scan_qr_popup\"), this.isOpened = !1;\n  }\n  set isOpened(t) {\n    this.set(\"isOpened\", t);\n  }\n  /**\n   * Returns true if the scanner is currently opened.\n   */\n  get isOpened() {\n    return this.get(\"isOpened\");\n  }\n  async open(t) {\n    if (this.isOpened) throw new Error(\"The scanner is already opened\");\n    const {\n      text: s,\n      capture: n\n    } = (typeof t == \"string\" ? {\n      text: t\n    } : t) || {};\n    this.isOpened = !0;\n    try {\n      const i = ((await d({\n        method: \"web_app_open_scan_qr_popup\",\n        event: [\"qr_text_received\", \"scan_qr_popup_closed\"],\n        postEvent: this.postEvent,\n        params: {\n          text: s\n        },\n        capture(o) {\n          return o.event === \"scan_qr_popup_closed\" || !n || n(o.payload);\n        }\n      })) || {}).data || null;\n      return i && this.close(), i;\n    } finally {\n      this.isOpened = !1;\n    }\n  }\n  // TODO: Streaming mode, allowing to scan several QRs until closed.\n}\nconst ds = l(({\n  version: e,\n  postEvent: t\n}) => new We(!1, e, t));\nclass Ue extends Z {\n  constructor(s, n, r) {\n    super({\n      isVisible: s\n    }, n, {\n      show: \"web_app_setup_settings_button\",\n      hide: \"web_app_setup_settings_button\"\n    });\n    /**\n     * Adds a new event listener.\n     * @param event - event to listen.\n     * @param listener - listener to add.\n     */\n    c(this, \"on\", (s, n) => s === \"click\" ? b(\"settings_button_pressed\", n) : this.state.on(s, n));\n    /**\n     * Removes the event listener.\n     * @param event - event to listen.\n     * @param listener - listener to remove.\n     */\n    c(this, \"off\", (s, n) => s === \"click\" ? L(\"settings_button_pressed\", n) : this.state.off(s, n));\n    this.postEvent = r;\n  }\n  set isVisible(s) {\n    this.set(\"isVisible\", s), this.postEvent(\"web_app_setup_settings_button\", {\n      is_visible: s\n    });\n  }\n  /**\n   * True if the SettingsButton is visible.\n   */\n  get isVisible() {\n    return this.get(\"isVisible\");\n  }\n  /**\n   * Hides the SettingsButton.\n   */\n  hide() {\n    this.isVisible = !1;\n  }\n  /**\n   * Shows the SettingsButton.\n   */\n  show() {\n    this.isVisible = !0;\n  }\n}\nconst _s = l(\"settingsButton\", ({\n  version: e,\n  postEvent: t,\n  state: s = {\n    isVisible: !1\n  }\n}) => new Ue(s.isVisible, e, t));\nfunction Mt(e) {\n  return Pt().parse(e);\n}\nclass He extends tt {\n  /**\n   * @since v6.10\n   */\n  get accentTextColor() {\n    return this.get(\"accentTextColor\");\n  }\n  get bgColor() {\n    return this.get(\"bgColor\");\n  }\n  get buttonColor() {\n    return this.get(\"buttonColor\");\n  }\n  get buttonTextColor() {\n    return this.get(\"buttonTextColor\");\n  }\n  get destructiveTextColor() {\n    return this.get(\"destructiveTextColor\");\n  }\n  /**\n   * Returns the copy of the internal state of the current component instance.\n   */\n  getState() {\n    return this.clone();\n  }\n  /**\n   * @since v6.10\n   */\n  get headerBgColor() {\n    return this.get(\"headerBgColor\");\n  }\n  get hintColor() {\n    return this.get(\"hintColor\");\n  }\n  /**\n   * @returns True in case, current color scheme is recognized as dark. This\n   * value is calculated according to theme bg color.\n   */\n  get isDark() {\n    return !this.bgColor || yt(this.bgColor);\n  }\n  get linkColor() {\n    return this.get(\"linkColor\");\n  }\n  get secondaryBgColor() {\n    return this.get(\"secondaryBgColor\");\n  }\n  /**\n   * @since v6.10\n   */\n  get sectionBgColor() {\n    return this.get(\"sectionBgColor\");\n  }\n  /**\n   * @since v6.10\n   */\n  get sectionHeaderTextColor() {\n    return this.get(\"sectionHeaderTextColor\");\n  }\n  /**\n   * @since v7.6\n   */\n  get sectionSeparatorColor() {\n    return this.get(\"sectionHeaderTextColor\");\n  }\n  /**\n   * Starts listening to the external theme changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen() {\n    return b(\"theme_changed\", t => {\n      this.set(Mt(t.theme_params));\n    });\n  }\n  /**\n   * @since v6.10\n   */\n  get subtitleTextColor() {\n    return this.get(\"subtitleTextColor\");\n  }\n  get textColor() {\n    return this.get(\"textColor\");\n  }\n}\nconst fs = l(\"themeParams\", ({\n  themeParams: e,\n  state: t = e,\n  addCleanup: s\n}) => {\n  const n = new He(t);\n  return s(n.listen()), n;\n});\nfunction gs(e = {}) {\n  return d({\n    ...e,\n    method: \"web_app_request_theme\",\n    event: \"theme_changed\"\n  }).then(Mt);\n}\nfunction A(e, t) {\n  return e.startsWith(t) ? e : `${t}${e}`;\n}\nfunction I(e) {\n  return new URL(typeof e == \"string\" ? e : `${e.pathname || \"\"}${A(e.search || \"\", \"?\")}${A(e.hash || \"\", \"#\")}`, \"http://a\");\n}\nclass Oe extends et {\n  constructor(s, n, r) {\n    super(s, {\n      readTextFromClipboard: \"web_app_read_text_from_clipboard\"\n    });\n    /**\n     * Checks if specified method parameter is supported by current component.\n     */\n    c(this, \"supportsParam\");\n    this.version = s, this.createRequestId = n, this.postEvent = r, this.supportsParam = Dt(s, {\n      \"openLink.tryInstantView\": [\"web_app_open_link\", \"try_instant_view\"]\n    });\n  }\n  openLink(s, n) {\n    const r = I(s).toString();\n    if (!v(\"web_app_open_link\", this.version)) {\n      window.open(r, \"_blank\");\n      return;\n    }\n    const i = typeof n == \"boolean\" ? {\n      tryInstantView: n\n    } : n || {};\n    this.postEvent(\"web_app_open_link\", {\n      url: r,\n      try_browser: i.tryBrowser,\n      try_instant_view: i.tryInstantView\n    });\n  }\n  /**\n   * Opens a Telegram link inside Telegram app. The Mini App will be closed. It expects passing\n   * link in full format, with hostname \"t.me\".\n   * @param url - URL to be opened.\n   * @throws {Error} URL has not allowed hostname.\n   */\n  openTelegramLink(s) {\n    const {\n      hostname: n,\n      pathname: r,\n      search: i\n    } = new URL(s, \"https://t.me\");\n    if (n !== \"t.me\") throw new Error(`URL has not allowed hostname: ${n}. Only \"t.me\" is allowed`);\n    if (!v(\"web_app_open_tg_link\", this.version)) {\n      window.location.href = s;\n      return;\n    }\n    this.postEvent(\"web_app_open_tg_link\", {\n      path_full: r + i\n    });\n  }\n  /**\n   * Reads text from clipboard and returns string or null. null is returned\n   * in cases:\n   * - Value in clipboard is not text\n   * - Access to clipboard is not allowed\n   */\n  async readTextFromClipboard() {\n    const s = this.createRequestId(),\n      {\n        data: n = null\n      } = await d({\n        method: \"web_app_read_text_from_clipboard\",\n        event: \"clipboard_text_received\",\n        postEvent: this.postEvent,\n        params: {\n          req_id: s\n        },\n        capture: gt(s)\n      });\n    return n;\n  }\n  /**\n   * Shares specified URL with the passed to the chats, selected by user. After being called,\n   * it closes the mini application.\n   *\n   * This method uses Telegram's Share Links.\n   * @param url - URL to share.\n   * @param text - text to append after the URL.\n   * @see https://core.telegram.org/api/links#share-links\n   * @see https://core.telegram.org/widgets/share#custom-buttons\n   */\n  shareURL(s, n) {\n    this.openTelegramLink(\"https://t.me/share/url?\" + new URLSearchParams({\n      url: s,\n      text: n || \"\"\n    }).toString().replace(/\\+/g, \"%20\"));\n  }\n}\nconst bs = l(({\n  version: e,\n  postEvent: t,\n  createRequestId: s\n}) => new Oe(e, s, t));\nasync function Vt(e = {}) {\n  const {\n    is_expanded: t,\n    is_state_stable: s,\n    ...n\n  } = await d({\n    ...e,\n    method: \"web_app_request_viewport\",\n    event: \"viewport_changed\"\n  });\n  return {\n    ...n,\n    isExpanded: t,\n    isStateStable: s\n  };\n}\nfunction P(e) {\n  return e < 0 ? 0 : e;\n}\nclass Ge extends tt {\n  constructor({\n    postEvent: s,\n    stableHeight: n,\n    height: r,\n    width: i,\n    isExpanded: o\n  }) {\n    super({\n      height: P(r),\n      isExpanded: o,\n      stableHeight: P(n),\n      width: P(i)\n    });\n    c(this, \"postEvent\");\n    this.postEvent = s;\n  }\n  /**\n   * Requests viewport information from the Telegram application and updates current Viewport\n   * instance.\n   * @param options - options to request fresh data.\n   */\n  async sync(s) {\n    const {\n      isStateStable: n,\n      ...r\n    } = await Vt(s);\n    this.set({\n      ...r,\n      stableHeight: n ? r.height : this.get(\"stableHeight\")\n    });\n  }\n  /**\n   * The current height of the **visible area** of the Mini App.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the bot can do the same by calling `expand` method. As the position of\n   * the Mini App changes, the current height value of the visible area will be updated  in real\n   * time.\n   *\n   * Please note that the refresh rate of this value is not sufficient to smoothly follow the\n   * lower border of the window. It should not be used to pin interface elements to the bottom\n   * of the visible area. It's more appropriate to use the value of the `stableHeight`\n   * field for this purpose.\n   *\n   * @see stableHeight\n   */\n  get height() {\n    return this.get(\"height\");\n  }\n  /**\n   * The height of the visible area of the Mini App in its last stable state.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the application can do the same by calling `expand` method.\n   *\n   * Unlike the value of `height`, the value of `stableHeight` does not change as the position\n   * of the Mini App changes with user gestures or during animations. The value of `stableHeight`\n   * will be updated after all gestures and animations are completed and\n   * the Mini App reaches its final size.\n   *\n   * @see height\n   */\n  get stableHeight() {\n    return this.get(\"stableHeight\");\n  }\n  /**\n   * Starts listening to viewport changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen() {\n    return b(\"viewport_changed\", s => {\n      const {\n          height: n,\n          width: r,\n          is_expanded: i,\n          is_state_stable: o\n        } = s,\n        a = P(n);\n      this.set({\n        height: a,\n        isExpanded: i,\n        width: P(r),\n        ...(o ? {\n          stableHeight: a\n        } : {})\n      });\n    });\n  }\n  /**\n   * True if the Mini App is expanded to the maximum available height. Otherwise, if\n   * the Mini App occupies part of the screen and can be expanded to the full height using\n   * `expand` method.\n   * @see expand\n   */\n  get isExpanded() {\n    return this.get(\"isExpanded\");\n  }\n  /**\n   * Current visible area width.\n   */\n  get width() {\n    return this.get(\"width\");\n  }\n  /**\n   * A method that expands the Mini App to the maximum available height. To find out if the Mini\n   * App is expanded to the maximum height, refer to the value of the `isExpanded`.\n   * @see isExpanded\n   */\n  expand() {\n    this.postEvent(\"web_app_expand\"), this.set(\"isExpanded\", !0);\n  }\n  /**\n   * True if the current viewport height is stable and is not going to change in the next moment.\n   */\n  get isStable() {\n    return this.stableHeight === this.height;\n  }\n}\nconst ws = l(\"viewport\", async ({\n  state: e,\n  platform: t,\n  postEvent: s,\n  addCleanup: n\n}) => {\n  let r = !1,\n    i = 0,\n    o = 0,\n    a = 0;\n  if (e) r = e.isExpanded, i = e.height, o = e.width, a = e.stableHeight;else if ([\"macos\", \"tdesktop\", \"unigram\", \"webk\", \"weba\", \"web\"].includes(t)) r = !0, i = window.innerHeight, o = window.innerWidth, a = window.innerHeight;else {\n    const u = await Vt({\n      timeout: 1e3,\n      postEvent: s\n    });\n    r = u.isExpanded, i = u.height, o = u.width, a = u.isStateStable ? i : 0;\n  }\n  const h = new Ge({\n    postEvent: s,\n    height: i,\n    width: o,\n    stableHeight: a,\n    isExpanded: r\n  });\n  return n(h.listen()), h;\n});\nfunction m(e, t) {\n  document.documentElement.style.setProperty(e, t);\n}\nfunction ms(e, t, s) {\n  s || (s = a => `--tg-${a}-color`);\n  const n = s(\"header\"),\n    r = s(\"bg\"),\n    i = () => {\n      const {\n        headerColor: a\n      } = e;\n      if (Q(a)) m(n, a);else {\n        const {\n          bgColor: h,\n          secondaryBgColor: u\n        } = t;\n        a === \"bg_color\" && h ? m(n, h) : a === \"secondary_bg_color\" && u && m(n, u);\n      }\n      m(r, e.bgColor);\n    },\n    o = [t.on(\"change\", i), e.on(\"change\", i)];\n  return i(), () => o.forEach(a => a());\n}\nfunction ys(e, t) {\n  t || (t = n => `--tg-theme-${n.replace(/[A-Z]/g, r => `-${r.toLowerCase()}`)}`);\n  const s = () => {\n    Object.entries(e.getState()).forEach(([n, r]) => {\n      r && m(t(n), r);\n    });\n  };\n  return s(), e.on(\"change\", s);\n}\nfunction vs(e, t) {\n  t || (t = u => `--tg-viewport-${u}`);\n  const [s, n, r] = [\"height\", \"width\", \"stable-height\"].map(u => t(u)),\n    i = () => m(s, `${e.height}px`),\n    o = () => m(n, `${e.width}px`),\n    a = () => m(r, `${e.stableHeight}px`),\n    h = [e.on(\"change:height\", i), e.on(\"change:width\", o), e.on(\"change:stableHeight\", a)];\n  return i(), o(), a(), () => h.forEach(u => u());\n}\nfunction Es(e = !0) {\n  const t = [b(\"reload_iframe\", () => {\n      R(\"iframe_will_reload\"), window.location.reload();\n    })],\n    s = () => t.forEach(n => n());\n  if (e) {\n    const n = document.createElement(\"style\");\n    n.id = \"telegram-custom-styles\", document.head.appendChild(n), t.push(b(\"set_custom_style\", r => {\n      n.innerHTML = r;\n    }), () => document.head.removeChild(n));\n  }\n  return R(\"iframe_ready\", {\n    reload_supported: !0\n  }), s;\n}\nfunction xs() {\n  return typeof window > \"u\";\n}\nasync function Ps() {\n  if (dt(window)) return !0;\n  try {\n    return await d({\n      method: \"web_app_request_theme\",\n      event: \"theme_changed\",\n      timeout: 100\n    }), !0;\n  } catch {\n    return !1;\n  }\n}\nfunction Ss(e) {\n  const t = typeof e == \"string\" ? X(e) : e;\n  qt(t);\n  function s(r) {\n    if (typeof r == \"string\") try {\n      const {\n        eventType: i\n      } = ut(r);\n      i === \"web_app_request_theme\" && j(\"theme_changed\", {\n        theme_params: JSON.parse(It(t.themeParams))\n      }), i === \"web_app_request_viewport\" && j(\"viewport_changed\", {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        is_state_stable: !0,\n        is_expanded: !0\n      });\n    } catch {}\n  }\n  if (_t()) {\n    const r = window.parent.postMessage.bind(window.parent);\n    window.parent.postMessage = i => {\n      s(i), r(i);\n    };\n    return;\n  }\n  if (lt(window)) {\n    const r = window.external.notify.bind(window.external);\n    window.external.notify = i => {\n      s(i), r(i);\n    };\n    return;\n  }\n  const n = window.TelegramWebviewProxy;\n  window.TelegramWebviewProxy = {\n    ...(n || {}),\n    postEvent(...r) {\n      s(JSON.stringify({\n        eventType: r[0],\n        eventData: r[1]\n      })), n && n.postEvent(...r);\n    }\n  };\n}\nfunction je(e) {\n  return e instanceof D;\n}\nfunction Cs(e, t) {\n  return je(e) && e.type === t;\n}\nfunction $(e, t) {\n  let s, n, r;\n  return typeof e == \"string\" ? s = e : (s = e.pathname === void 0 ? t : e.pathname, n = e.params, r = e.id), Object.freeze({\n    id: r || (Math.random() * 2 ** 14 | 0).toString(16),\n    pathname: s,\n    params: n\n  });\n}\nclass ze {\n  constructor(t, s, n = R) {\n    /**\n     * Navigation history.\n     */\n    c(this, \"history\");\n    c(this, \"ee\", new T());\n    /**\n     * True, if current navigator is currently attached.\n     */\n    c(this, \"attached\", !1);\n    /**\n     * Goes to the previous history item.\n     */\n    c(this, \"back\", () => this.go(-1));\n    /**\n     * Adds new event listener.\n     */\n    c(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    c(this, \"off\", this.ee.off.bind(this.ee));\n    if (this._index = s, this.postEvent = n, t.length === 0) throw f(Zt, \"History should not be empty.\");\n    if (s < 0 || s >= t.length) throw f(Kt, \"Index should not be zero and higher or equal than history size.\");\n    this.history = t.map(r => $(r, \"\"));\n  }\n  /**\n   * Allows this navigator to control the `BackButton` visibility state. It also tracks the\n   * `BackButton` clicks and calls the `back` method.\n   */\n  attach() {\n    this.attached || (this.attached = !0, this.sync(), b(\"back_button_pressed\", this.back));\n  }\n  /**\n   * Currently active history item.\n   */\n  get current() {\n    return this.history[this.index];\n  }\n  /**\n   * Prevents current navigator from controlling the BackButton visibility state.\n   */\n  detach() {\n    this.attached = !1, L(\"back_button_pressed\", this.back);\n  }\n  /**\n   * Goes to the next history item.\n   */\n  forward() {\n    this.go(1);\n  }\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(t, s) {\n    const n = this.index + t,\n      r = Math.min(Math.max(0, n), this.history.length - 1);\n    (n === r || s) && this.replaceAndMove(r, this.history[r]);\n  }\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(t, s) {\n    this.go(t - this.index, s);\n  }\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev() {\n    return this.index > 0;\n  }\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext() {\n    return this.index !== this.history.length - 1;\n  }\n  /**\n   * Currently active history item index.\n   */\n  get index() {\n    return this._index;\n  }\n  /**\n   * Adds a new history item removing all after the current one.\n   * @param item - item to add.\n   */\n  push(t) {\n    this.hasNext && this.history.splice(this.index + 1), this.replaceAndMove(this.index + 1, $(t, this.current.pathname));\n  }\n  /**\n   * Replaces the current history item.\n   * @param item - item to replace the current item with.\n   */\n  replace(t) {\n    this.replaceAndMove(this.index, $(t, this.current.pathname));\n  }\n  /**\n   * Sets history item by the specified index.\n   * @param index - history item index to replace.\n   * @param historyItem - history item to set.\n   */\n  replaceAndMove(t, s) {\n    const n = t - this.index;\n    if (!n && this.current === s) return;\n    const r = this.current;\n    if (this.index !== t) {\n      const i = this._index;\n      this._index = t, this.attached && i > 0 != t > 0 && this.sync();\n    }\n    this.history[t] = s, this.ee.emit(\"change\", {\n      navigator: this,\n      from: r,\n      to: this.current,\n      delta: n\n    });\n  }\n  /**\n   * Actualizes the `BackButton` visibility state.\n   */\n  sync() {\n    this.postEvent(\"web_app_setup_back_button\", {\n      is_visible: !!this.index\n    });\n  }\n}\nfunction B({\n  params: e,\n  ...t\n}) {\n  return {\n    ...(e || {\n      hash: \"\",\n      search: \"\"\n    }),\n    ...t\n  };\n}\nfunction N(e) {\n  const t = typeof e == \"string\" ? e.startsWith(\"/\") : !!(e.pathname && e.pathname.startsWith(\"/\")),\n    s = I(e);\n  return `${t ? s.pathname : s.pathname.slice(1)}${s.search}${s.hash}`;\n}\nfunction W(e, t, s) {\n  let n, r;\n  typeof e == \"string\" ? n = e : (n = N(e), s = e.state, r = e.id);\n  const {\n    pathname: i,\n    search: o,\n    hash: a\n  } = new URL(n, `http://a${A(t, \"/\")}`);\n  return {\n    id: r,\n    pathname: i,\n    params: {\n      hash: a,\n      search: o,\n      state: s\n    }\n  };\n}\nasync function C(e) {\n  return e === 0 ? !0 : Promise.race([new Promise(t => {\n    const s = G(\"popstate\", () => {\n      s(), t(!0);\n    });\n    window.history.go(e);\n  }),\n  // Usually, it takes about 1ms to emit this event, but we use some buffer.\n  new Promise(t => {\n    setTimeout(t, 50, !1);\n  })]);\n}\nasync function Fe() {\n  if (window.history.length <= 1 || (window.history.pushState(null, \"\"), await C(1 - window.history.length))) return;\n  let t = await C(-1);\n  for (; t;) t = await C(-1);\n}\nfunction Lt(e) {\n  return I(e).pathname;\n}\nconst it = 0,\n  U = 1,\n  H = 2;\nclass $t {\n  constructor(t, s, {\n    postEvent: n,\n    hashMode: r = \"classic\",\n    base: i\n  } = {}) {\n    c(this, \"navigator\");\n    c(this, \"ee\", new T());\n    c(this, \"hashMode\");\n    c(this, \"base\");\n    /**\n     * Shows whether the navigator is currently attached to the browser history.\n     */\n    c(this, \"attached\", !1);\n    /**\n     * Handles the window \"popstate\" event.\n     * @param state - event state.\n     */\n    c(this, \"onPopState\", ({\n      state: t\n    }) => {\n      if (t === null) return this.push(this.parsePath(window.location.href));\n      t === it ? window.history.forward() : t === U && this.back(), t === H && this.forward();\n    });\n    /**\n     * Underlying navigator change event listener.\n     */\n    c(this, \"onNavigatorChange\", async ({\n      to: t,\n      from: s,\n      delta: n\n    }) => {\n      this.attached && (await this.syncHistory()), this.ee.emit(\"change\", {\n        delta: n,\n        from: B(s),\n        to: B(t),\n        navigator: this\n      });\n    });\n    /**\n     * Adds new event listener.\n     */\n    c(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    c(this, \"off\", this.ee.off.bind(this.ee));\n    this.navigator = new ze(t.map(o => W(o, \"/\")), s, n), this.navigator.on(\"change\", o => {\n      this.onNavigatorChange(o);\n    }), this.hashMode = r, this.base = Lt(i || \"\");\n  }\n  /**\n   * Attaches current navigator to the browser history allowing navigator to manipulate it.\n   */\n  async attach() {\n    this.attached || (this.attached = !0, this.navigator.attach(), window.addEventListener(\"popstate\", this.onPopState), await this.syncHistory());\n  }\n  /**\n   * Goes back in history by 1.\n   */\n  back() {\n    this.navigator.back();\n  }\n  /**\n   * Detaches current navigator from the browser history.\n   */\n  detach() {\n    this.attached = !1, this.navigator.detach(), window.removeEventListener(\"popstate\", this.onPopState);\n  }\n  /**\n   * Goes forward in history.\n   */\n  forward() {\n    return this.navigator.forward();\n  }\n  /**\n   * Current history cursor.\n   */\n  get index() {\n    return this.navigator.index;\n  }\n  /**\n   * Current history item identifier.\n   */\n  get id() {\n    return this.navigator.current.id;\n  }\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(t, s) {\n    return this.navigator.go(t, s);\n  }\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(t, s) {\n    this.navigator.goTo(t, s);\n  }\n  /**\n   * Current history item hash.\n   * @see URL.hash\n   * @example\n   * \"\", \"#my-hash\"\n   */\n  get hash() {\n    return (this.navigator.current.params || {}).hash || \"\";\n  }\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev() {\n    return this.navigator.hasPrev;\n  }\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext() {\n    return this.navigator.hasNext;\n  }\n  /**\n   * Navigation history.\n   */\n  get history() {\n    return this.navigator.history.map(B);\n  }\n  /**\n   * Path, including pathname, search and hash.\n   * @example Pathname only.\n   * \"/pathname\"\n   * @example Pathname + search.\n   * \"/pathname?search\"\n   * @example Pathname + hash.\n   * \"/pathname#hash\"\n   * @example Pathname + search + hash.\n   * \"/pathname?search#hash\"\n   */\n  get path() {\n    return N(this);\n  }\n  /**\n   * Current pathname. Always starts with the slash.\n   * @see URL.pathname\n   * @example\n   * \"/\", \"/abc\"\n   */\n  get pathname() {\n    return this.navigator.current.pathname;\n  }\n  /**\n   * Depending on the current navigation type, parses incoming path and returns it presented as\n   * an object. In other words, this method parses the passed path and returns object, describing\n   * how the navigator \"sees\" it.\n   *\n   * @example Hash mode is omitted.\n   * parsePath('/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   * parsePath('http://example.com/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   *\n   * @example Hash mode is enabled.\n   * parsePath('/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   * parsePath('http://example.com/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   */\n  parsePath(t) {\n    let s = I(t);\n    return this.hashMode && (s = I(s.hash.slice(1))), {\n      pathname: s.pathname,\n      search: s.search,\n      hash: s.hash\n    };\n  }\n  push(t, s) {\n    const n = W(t, this.path),\n      {\n        state: r = s\n      } = n.params;\n    this.navigator.push({\n      ...n,\n      params: {\n        ...n.params,\n        state: r\n      }\n    });\n  }\n  replace(t, s) {\n    const n = W(t, this.path),\n      {\n        state: r = s\n      } = n.params;\n    this.navigator.replace({\n      ...n,\n      params: {\n        ...n.params,\n        state: r\n      }\n    });\n  }\n  /**\n   * Combines the navigator `base` property with the passed path data applying the navigator\n   * navigation mode.\n   * @param value - path presented as string or URLLike.\n   */\n  renderPath(t) {\n    const s = (this.base.length === 1 ? \"\" : this.base) + A(N(t), \"/\");\n    return this.hashMode ? A(s.slice(1), this.hashMode === \"classic\" ? \"#\" : \"#/\") : s;\n  }\n  /**\n   * Synchronizes current navigator state with browser history.\n   */\n  async syncHistory() {\n    window.removeEventListener(\"popstate\", this.onPopState);\n    const {\n        state: t\n      } = this,\n      s = this.renderPath(this);\n    await Fe(), this.hasPrev && this.hasNext ? (window.history.replaceState(U, \"\"), window.history.pushState(t, \"\", s), window.history.pushState(H, \"\"), await C(-1)) : this.hasPrev ? (window.history.replaceState(U, \"\"), window.history.pushState(t, \"\", s)) : this.hasNext ? (window.history.replaceState(t, s), window.history.pushState(H, \"\"), await C(-1)) : (window.history.replaceState(it, \"\"), window.history.pushState(t, \"\", s)), window.addEventListener(\"popstate\", this.onPopState);\n  }\n  /**\n   * Current query parameters.\n   * @see URL.search\n   * @example\n   * \"\", \"?\", \"?a=1\"\n   */\n  get search() {\n    return (this.navigator.current.params || {}).search || \"\";\n  }\n  /**\n   * Current history item state.\n   */\n  get state() {\n    return (this.navigator.current.params || {}).state;\n  }\n}\nfunction Je(e) {\n  e || (e = {});\n  const {\n    href: t,\n    hash: s\n  } = window.location;\n  let n = N(e.hashMode === null ? t : s.includes(\"?\") ? s.slice(1) : `?${s.slice(1)}`);\n  const r = e.base ? Lt(e.base) : void 0;\n  if (r) {\n    if (!n.startsWith(r)) throw f(Xt, `Path \"${n}\" expected to be starting with \"${r}\"`);\n    n = n.slice(r.length);\n  }\n  return new $t([n], 0, e);\n}\nfunction Ts(e) {\n  const t = e.match(/#(.+)/);\n  return t ? t[1] : null;\n}\nfunction Qe(e, t) {\n  if (kt()) {\n    const s = sessionStorage.getItem(e);\n    if (s) try {\n      const {\n        index: n,\n        history: r\n      } = JSON.parse(s);\n      return new $t(r, n, t);\n    } catch (n) {\n      console.error(\"Unable to restore hash navigator state.\", n);\n    }\n  }\n  return Je(t);\n}\nfunction Rs(e, t) {\n  const s = Qe(e, t),\n    n = () => sessionStorage.setItem(e, JSON.stringify({\n      index: s.index,\n      history: s.history\n    }));\n  return s.on(\"change\", n), n(), s;\n}\nexport { le as BackButton, ze as BasicNavigator, Pe as BiometryManager, $t as BrowserNavigator, Ce as ClosingBehavior, Ie as CloudStorage, Xt as ERR_INVALID_PATH_BASE, Jt as ERR_INVOKE_CUSTOM_METHOD_RESPONSE, zt as ERR_METHOD_PARAMETER_UNSUPPORTED, jt as ERR_METHOD_UNSUPPORTED, Zt as ERR_NAVIGATION_HISTORY_EMPTY, Kt as ERR_NAVIGATION_INDEX_INVALID, Ke as ERR_NAVIGATION_ITEM_INVALID, ct as ERR_PARSE, Xe as ERR_SSR_INIT, Qt as ERR_TIMED_OUT, Yt as ERR_UNEXPECTED_TYPE, Ft as ERR_UNKNOWN_ENV, T as EventEmitter, qe as HapticFeedback, ke as InitData, Ne as Invoice, De as MainButton, Le as MiniApp, Be as Popup, We as QRScanner, D as SDKError, Ue as SettingsButton, He as ThemeParams, Oe as Utils, Ge as Viewport, Ae as array, ms as bindMiniAppCSSVars, ys as bindThemeParamsCSSVars, vs as bindViewportCSSVars, w as boolean, gt as captureSameReq, z as classNames, oe as compareVersions, Je as createBrowserNavigatorFromLocation, he as createPostEvent, I as createSafeURL, Et as date, Ts as getHash, Lt as getPathname, ss as initBackButton, ns as initBiometryManager, rs as initClosingBehavior, is as initCloudStorage, os as initHapticFeedback, as as initInitData, hs as initInvoice, ps as initMainButton, us as initMiniApp, Rs as initNavigator, ls as initPopup, ds as initQRScanner, _s as initSettingsButton, fs as initThemeParams, bs as initUtils, ws as initViewport, Es as initWeb, S as invokeCustomMethod, yt as isColorDark, _t as isIframe, kt as isPageReload, Q as isRGB, pe as isRGBShort, je as isSDKError, Cs as isSDKErrorOfType, xs as isSSR, Ps as isTMA, g as json, es as mergeClassNames, Ss as mockTelegramEnv, y as number, L as off, b as on, cs as parseInitData, X as parseLaunchParams, Mt as parseThemeParams, R as postEvent, d as request, Se as requestBiometryInfo, gs as requestThemeParams, Vt as requestViewport, ve as retrieveLaunchParams, _e as rgb, K as searchParams, ye as serializeLaunchParams, It as serializeThemeParams, m as setCSSVar, Ze as setDebug, ts as setTargetOrigin, p as string, Ht as subscribe, v as supports, ce as targetOrigin, mt as toRGB, at as unsubscribe, N as urlToPath, wt as withTimeout };","map":{"version":3,"names":["ot","e","t","s","n","reset","at","V","count","unsubscribe","ie","Ht","subscribe","Ot","constructor","scope","options","print","Date","r","Intl","DateTimeFormat","hour","minute","second","fractionalSecondDigits","timeZone","format","textColor","i","bgColor","o","a","console","error","log","F","O","st","onEvent","name","payload","Ze","Gt","T","c","Map","clear","listeners","subscribeListeners","listenersCount","length","emit","forEach","event","args","get","off","on","set","push","splice","G","window","addEventListener","removeEventListener","J","flat","D","Error","cause","type","Object","setPrototypeOf","prototype","f","jt","zt","Ft","Jt","Qt","Yt","ct","Zt","Kt","Ke","Xe","Xt","E","M","parser","isOptional","parse","optional","x","w","String","ht","bind","from","pt","JSON","Array","isArray","g","y","Number","isNaN","p","toString","ut","eventType","eventData","te","j","dispatchEvent","MessageEvent","data","stringify","source","parent","ee","se","clipboard_text_received","req_id","custom_method_invoked","result","popup_closed","button_id","viewport_changed","height","width","innerWidth","is_state_stable","is_expanded","ne","innerHeight","h","re","L","b","q","oe","split","Math","max","parseInt","_","v","includes","lt","external","notify","dt","TelegramWebviewProxy","postEvent","_t","self","top","ae","ft","ts","ce","R","postMessage","targetOrigin","he","gt","bt","wt","Promise","race","setTimeout","d","capture","timeout","map","method","params","S","z","entries","filter","Boolean","join","es","reduce","Q","test","pe","mt","replace","toLowerCase","repeat","match","slice","yt","sqrt","ue","state","clone","Y","vt","Z","supports","le","isVisible","show","hide","is_visible","Et","K","URLSearchParams","de","id","title","photoUrl","username","nt","addedToAttachmentMenu","allowsWriteToPm","firstName","isBot","isPremium","languageCode","lastName","xt","authDate","canSendAfter","chat","chatInstance","chatType","hash","queryId","receiver","startParam","user","_e","fe","toUpperCase","ge","Pt","X","botInline","initData","initDataRaw","platform","showSettings","themeParams","version","St","be","location","href","Ct","performance","getEntriesByType","we","Tt","Rt","sessionStorage","setItem","At","getItem","me","It","fromEntries","ye","qt","ve","kt","Ee","xe","l","createRequestId","addCleanup","u","Bt","then","ss","k","arguments","Nt","available","device_id","token_saved","access_requested","access_granted","deviceId","tokenSaved","accessRequested","accessGranted","Pe","auth","openSettings","requestAccess","updateToken","authenticate","reason","authPromise","trim","token","finally","accessPromise","biometryType","status","Se","ns","tt","Ce","isConfirmationNeeded","need_confirmation","disableConfirmation","enableConfirmation","rs","et","Te","Re","itemParser","of","Ae","rt","Ie","delete","getKeys","keys","key","value","is","qe","impactOccurred","notificationOccurred","selectionChanged","impact_style","notification_type","os","ke","canSendAfterDate","getTime","as","cs","Ne","isOpened","open","hostname","pathname","URL","slug","hs","De","commit","text","is_active","isEnabled","is_progress_visible","isLoaderVisible","color","text_color","disable","enable","hideLoader","setParams","showLoader","setText","setTextColor","setBgColor","ps","buttonTextColor","buttonColor","Me","contact","userId","phoneNumber","Dt","Ve","Le","requestPhoneAccess","requestWriteAccess","switchInlineQuery","setHeaderColor","setBackgroundColor","supportsParam","getRequestedContact","close","return_back","headerColor","isBotInline","isDark","ready","requestContact","now","requestPhoneAccessPromise","requestWriteAccessPromise","sendData","size","Blob","color_key","query","chat_types","us","headerBgColor","$e","message","buttons","Be","ls","We","ds","Ue","_s","Mt","He","accentTextColor","destructiveTextColor","getState","hintColor","linkColor","secondaryBgColor","sectionBgColor","sectionHeaderTextColor","sectionSeparatorColor","listen","theme_params","subtitleTextColor","fs","gs","A","startsWith","I","search","Oe","readTextFromClipboard","openLink","tryInstantView","url","try_browser","tryBrowser","try_instant_view","openTelegramLink","path_full","shareURL","bs","Vt","isExpanded","isStateStable","P","Ge","stableHeight","sync","expand","isStable","ws","m","document","documentElement","style","setProperty","ms","actualize","ys","vs","setHeight","setWidth","setStableHeight","Es","reload","cleanup","createElement","head","appendChild","innerHTML","removeChild","reload_supported","xs","Ps","Ss","je","Cs","$","freeze","random","ze","go","_index","history","attach","attached","back","current","index","detach","forward","min","replaceAndMove","goTo","hasPrev","hasNext","navigator","to","delta","B","N","W","C","Fe","pushState","Lt","it","U","H","$t","hashMode","base","parsePath","syncHistory","onNavigatorChange","onPopState","path","renderPath","replaceState","Je","Ts","Qe","Rs","saveState"],"sources":["/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/misc/createSingleton.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/events/listening/unsubscribe.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/events/listening/subscribe.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/logger/Logger.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/debug/debug.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/events/event-emitter/EventEmitter.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/events/onWindow.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/misc/createCleanup.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/errors/SDKError.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/errors/createError.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/errors/errors.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/createTypeError.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/ValueParser/ValueParser.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/createValueParserGenerator.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/parsers/boolean.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/parseBySchema.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/toRecord.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/parsers/json.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/parsers/number.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/parsers/string.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/parseMessage.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/events/event-handlers/cleanupEventHandlers.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/events/event-handlers/emitMiniAppsEvent.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/events/event-handlers/defineEventHandlers.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/events/event-emitter/createMiniAppsEventEmitter.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/events/event-emitter/singleton.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/events/listening/off.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/events/listening/on.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/misc/isRecord.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/version/compareVersions.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/supports/supports.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/env/hasExternalNotify.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/env/hasWebviewProxy.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/env/isIframe.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/target-origin.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/methods/postEvent.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/methods/createPostEvent.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/captureSameReq.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/timeout/createTimeoutError.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/timeout/withTimeout.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/request.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/bridge/invokeCustomMethod.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/classnames/classNames.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/classnames/mergeClassNames.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/colors/isRGB.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/colors/isRGBShort.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/colors/toRGB.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/colors/isColorDark.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/classes/State/State.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/classes/WithStateUtils.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/supports/createSupportsFn.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/classes/WithSupportsAndStateUtils.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/BackButton/BackButton.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/parsers/date.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/parsers/searchParams.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/InitData/parsers/chat.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/InitData/parsers/user.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/InitData/parsers/initData.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/parsers/rgb.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/ThemeParams/keys.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/ThemeParams/parsing/themeParams.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/launch-params/parseLaunchParams.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/launch-params/retrieveFromUrl.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/launch-params/retrieveFromLocation.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/getFirstNavigationEntry.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/launch-params/retrieveFromPerformance.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/storage/storage.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/launch-params/retrieveFromStorage.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/ThemeParams/parsing/serializeThemeParams.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/launch-params/serializeLaunchParams.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/launch-params/saveToStorage.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/launch-params/retrieveLaunchParams.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/isPageReload.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/request-id/createRequestIdGenerator.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/misc/createComponentInitFn/createComponentInitFn.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/BackButton/initBackButton.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/classes/WithSupportsAndTrackableState.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/BiometryManager/formatEvent.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/BiometryManager/BiometryManager.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/BiometryManager/requestBiometryInfo.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/BiometryManager/initBiometryManager.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/classes/WithTrackableState.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/ClosingBehavior/ClosingBehavior.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/ClosingBehavior/initClosingBehavior.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/classes/WithSupports.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/ArrayParser/ArrayParser.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/parsing/parsers/array.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/CloudStorage/CloudStorage.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/CloudStorage/initCloudStorage.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/HapticFeedback/HapticFeedback.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/HapticFeedback/initHapticFeedback.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/InitData/InitData.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/InitData/initInitData.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/InitData/parseInitData.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/Invoice/Invoice.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/Invoice/initInvoice.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/MainButton/MainButton.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/MainButton/initMainButton.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/MiniApp/parsing/contact.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/supports/createSupportsParamFn.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/timeout/sleep.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/MiniApp/MiniApp.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/MiniApp/initMiniApp.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/Popup/preparePopupParams.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/Popup/Popup.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/Popup/initPopup.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/QRScanner/QRScanner.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/QRScanner/initQRScanner.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/SettingsButton/SettingsButton.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/SettingsButton/initSettingsButton.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/ThemeParams/parsing/parseThemeParams.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/ThemeParams/ThemeParams.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/ThemeParams/initThemeParams.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/ThemeParams/requestThemeParams.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/ensurePrefix.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/createSafeURL.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/Utils/Utils.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/Utils/initUtils.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/Viewport/requestViewport.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/Viewport/Viewport.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/components/Viewport/initViewport.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/css-vars/setCSSVar.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/css-vars/bindMiniAppCSSVars.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/css-vars/bindThemeParamsCSSVars.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/css-vars/bindViewportCSSVars.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/env/initWeb.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/env/isSSR.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/env/isTMA.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/env/mockTelegramEnv.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/errors/isSDKError.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/errors/isSDKErrorOfType.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/BasicNavigator/prepareItem.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/BasicNavigator/BasicNavigator.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/BrowserNavigator/basicItemToBrowser.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/urlToPath.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/BrowserNavigator/prepareItem.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/go.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/drop.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/getPathname.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/BrowserNavigator/BrowserNavigator.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/BrowserNavigator/createBrowserNavigatorFromLocation.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/getHash.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@tma.js/sdk/src/navigation/initNavigator.ts"],"sourcesContent":["/**\n * Creates resettable singleton. We mostly need it for test purposes.\n * @param create - function which creates singleton entity.\n * @param onReset - function which will be called in case, singleton was reset.\n */\nexport function createSingleton<T>(\n  create: (reset: () => void) => T,\n  onReset?: (entity: T) => void,\n): [\n  /**\n   * Returns singleton entity.\n   */\n  get: () => T,\n  /**\n   * Resets last stored entity.\n   */\n  reset: () => void,\n] {\n  let cached: T | undefined;\n  const reset = () => {\n    cached !== undefined && onReset && onReset(cached);\n    cached = undefined;\n  };\n\n  return [() => (cached === undefined ? cached = create(reset) : cached), reset];\n}\n","import { miniAppsEventEmitter, resetMiniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsSubscribeListener } from '../types.js';\n\n/**\n * Removes global event listener.\n * @param listener - event listener.\n */\nexport function unsubscribe(listener: MiniAppsSubscribeListener): void {\n  const ee = miniAppsEventEmitter();\n  const { count } = ee;\n  ee.unsubscribe(listener);\n\n  // If event emitter now has no listeners, we can make a cleanup.\n  if (count && !ee.count) {\n    resetMiniAppsEventEmitter();\n  }\n}\n","import type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport { unsubscribe } from '../listening/unsubscribe.js';\nimport type { MiniAppsSubscribeListener } from '../types.js';\n\n/**\n * Subscribes to all events sent from the native Telegram application.\n * @param listener - event listener to bind.\n * @returns Function to remove bound event listener.\n */\nexport function subscribe(listener: MiniAppsSubscribeListener): RemoveEventListenerFn {\n  miniAppsEventEmitter().subscribe(listener);\n  return () => unsubscribe(listener);\n}\n","/**\n * Message log level.\n */\nexport type LogLevel = 'log' | 'error';\n\nexport interface LoggerOptions {\n  bgColor?: string;\n  textColor?: string;\n}\n\nexport class Logger implements Pick<Console, 'log' | 'error'> {\n  constructor(\n    private readonly scope: string,\n    private readonly options: LoggerOptions = {},\n  ) {\n  }\n\n  /**\n   * Prints message into a console in case, logger is currently enabled.\n   * @param level - log level.\n   * @param args - arguments.\n   */\n  private print(level: LogLevel, ...args: any[]): void {\n    const now = new Date();\n    const date = Intl\n      .DateTimeFormat('en-GB', {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        fractionalSecondDigits: 3,\n        timeZone: 'UTC',\n      })\n      .format(now);\n\n    const { textColor, bgColor } = this.options;\n    const commonCss = 'font-weight: bold;padding: 0 5px;border-radius:5px';\n\n    console[level](\n      `%c${date}%c / %c${this.scope}`,\n      `${commonCss};background-color: lightblue;color:black`,\n      '',\n      `${commonCss};${textColor ? `color:${textColor};` : ''}${bgColor ? `background-color:${bgColor}` : ''}`,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      ...args,\n    );\n  }\n\n  /**\n   * Prints error message into a console.\n   * @param args\n   */\n  error(...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    this.print('error', ...args);\n  }\n\n  /**\n   * Prints log message into a console.\n   * @param args\n   */\n  log(...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    this.print('log', ...args);\n  }\n}\n","import { subscribe } from '@/bridge/events/listening/subscribe.js';\nimport { unsubscribe } from '@/bridge/events/listening/unsubscribe.js';\nimport { Logger } from '@/logger/Logger.js';\nimport type { MiniAppsSubscribeListener } from '@/bridge/events/types.js';\n\nexport const logger = new Logger('SDK', {\n  bgColor: 'forestgreen',\n  textColor: 'white',\n});\n\nlet debugEnabled = false;\n\nconst onEvent: MiniAppsSubscribeListener = ({ name, payload }) => {\n  logger.log('Event received:', payload ? { name, payload } : { name });\n};\n\n/**\n * Sets new debug mode. Enabling debug mode leads to printing additional messages in the console,\n * related to the processes inside the package.\n * @param enable - should debug be enabled.\n */\nexport function setDebug(enable: boolean): void {\n  if (debugEnabled !== enable) {\n    debugEnabled = enable;\n    enable ? subscribe(onEvent) : unsubscribe(onEvent);\n  }\n}\n\n/**\n * Logs info message into the console.\n * @param args - additional arguments.\n */\nexport function log(...args: any[]): void {\n  if (debugEnabled) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    logger.log(...args);\n  }\n}\n","import type { RemoveEventListenerFn } from '../types.js';\nimport type {\n  EmptyEventName,\n  EventListener,\n  EventName,\n  EventParams,\n  NonEmptyEventName,\n  SubscribeListener,\n} from './types.js';\n\nexport class EventEmitter<Schema> {\n  private readonly listeners: Map<\n    string,\n    [listener: EventListener<any>, once?: boolean][]\n  > = new Map();\n\n  private listenersCount = 0;\n\n  private subscribeListeners: SubscribeListener<Schema>[] = [];\n\n  /**\n   * Removes all event listeners.\n   */\n  clear() {\n    this.listeners.clear();\n    this.subscribeListeners = [];\n  }\n\n  /**\n   * Returns count of bound listeners.\n   */\n  get count(): number {\n    return this.listenersCount + this.subscribeListeners.length;\n  }\n\n  /**\n   * Emits known event which has no parameters.\n   * @param event - event name.\n   */\n  emit<E extends EmptyEventName<Schema>>(event: E): void;\n\n  /**\n   * Emits known event which has parameters.\n   * @param event - event name.\n   * @param args - list of event listener arguments.\n   */\n  emit<E extends NonEmptyEventName<Schema>>(event: E, ...args: EventParams<Schema[E]>): void;\n\n  emit(event: EventName<Schema>, ...args: any[]): void {\n    this.subscribeListeners.forEach((l) => l({\n      event,\n      args: args as EventParams<Schema[EventName<Schema>]>,\n    }));\n\n    const listeners = this.listeners.get(event) || [];\n\n    listeners.forEach(([listener, once]) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      listener(...args);\n      if (once) {\n        this.off(event, listener);\n      }\n    });\n  }\n\n  /**\n   * Adds new event listener.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @param once - should listener be called only once.\n   * @returns Function to remove bound event listener.\n   */\n  on<E extends EventName<Schema>>(\n    event: E,\n    listener: EventListener<Schema[E]>,\n    once?: boolean,\n  ): RemoveEventListenerFn {\n    let listeners = this.listeners.get(event);\n    if (!listeners) {\n      this.listeners.set(event, listeners = []);\n    }\n\n    listeners.push([listener, once]);\n    this.listenersCount += 1;\n\n    return () => this.off(event, listener);\n  }\n\n  /**\n   * Removes event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param event - event name.\n   * @param listener - event listener.\n   */\n  off<E extends EventName<Schema>>(event: E, listener: EventListener<Schema[E]>): void {\n    const listeners = this.listeners.get(event) || [];\n    for (let i = 0; i < listeners.length; i += 1) {\n      if (listener === listeners[i][0]) {\n        listeners.splice(i, 1);\n        this.listenersCount -= 1;\n        return;\n      }\n    }\n  }\n\n  /**\n   * Adds a new event listener for all events.\n   * @param listener - event listener.\n   * @returns Function to remove event listener.\n   */\n  subscribe(listener: SubscribeListener<Schema>): RemoveEventListenerFn {\n    this.subscribeListeners.push(listener);\n    return () => this.unsubscribe(listener);\n  }\n\n  /**\n   * Removes global event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param listener - event listener.\n   */\n  unsubscribe(listener: SubscribeListener<Schema>): void {\n    for (let i = 0; i < this.subscribeListeners.length; i += 1) {\n      if (this.subscribeListeners[i] === listener) {\n        this.subscribeListeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n}\n","import type { RemoveEventListenerFn } from './types.js';\n\n/**\n * Adds new event listener using window.addEventListener.\n * @param type - event name.\n * @param listener - event listener.\n * @param options - listening options.\n * @returns Function to remove event listener.\n */\nexport function onWindow<K extends keyof WindowEventMap>(\n  type: K,\n  listener: (this: Window, ev: WindowEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions,\n): RemoveEventListenerFn {\n  window.addEventListener(type, listener, options);\n  return () => window.removeEventListener(type, listener, options);\n}\n","import { CleanupFn } from '@/types/index.js';\n\n/**\n * Returns a tuple, containing function to add cleanup, call cleanup, and flag showing whether\n * cleanup was called. Cleanup will not be performed in case, it was done before.\n */\nexport function createCleanup(...fns: (CleanupFn | CleanupFn[])[]): [\n  add: (fn: CleanupFn) => void,\n  cleanup: () => void,\n  cleanedUp: boolean,\n] {\n  let cleanedUp = false;\n  const cache = fns.flat(1);\n\n  return [\n    (fn) => !cleanedUp && cache.push(fn),\n    () => {\n      if (!cleanedUp) {\n        cleanedUp = true;\n        cache.forEach(clean => clean());\n      }\n    },\n    cleanedUp,\n  ];\n}","import type { ErrorType } from './errors.js';\n\n/**\n * Error used across the SDK.\n */\nexport class SDKError extends Error {\n  constructor(public readonly type: ErrorType, message?: string, cause?: unknown) {\n    super(message, { cause });\n    Object.setPrototypeOf(this, SDKError.prototype);\n  }\n}\n","import { SDKError } from './SDKError.js';\nimport type { ErrorType } from './errors.js';\n\n/**\n * Creates new error using specified type and message.\n * @param type - error code.\n * @param message - error message.\n * @param cause - original error.\n */\nexport function createError(type: ErrorType, message: string, cause?: unknown): SDKError {\n  return new SDKError(type, message, cause);\n}\n","/**\n * Specified Mini Apps method is unsupported.\n */\nexport const ERR_METHOD_UNSUPPORTED = 'ERR_METHOD_UNSUPPORTED';\n\n/**\n * Specified Mini Apps method parameter is unsupported.\n */\nexport const ERR_METHOD_PARAMETER_UNSUPPORTED = 'ERR_METHOD_PARAMETER_UNSUPPORTED';\n\n/**\n * Current environment is not Telegram application.\n */\nexport const ERR_UNKNOWN_ENV = 'ERR_UNKNOWN_ENV';\n\n/**\n * Telegram application returned and error while invoking custom method.\n */\nexport const ERR_INVOKE_CUSTOM_METHOD_RESPONSE = 'ERR_INVOKE_CUSTOM_METHOD_RESPONSE';\n\n/**\n * Timeout reached.\n */\nexport const ERR_TIMED_OUT = 'ERR_TIMED_OUT';\n\n/**\n * Value has unexpected type.\n */\nexport const ERR_UNEXPECTED_TYPE = 'ERR_UNEXPECTED_TYPE';\n\n/**\n * Something went wrong during value parsing.\n */\nexport const ERR_PARSE = 'ERR_PARSE';\n\n/**\n * Navigation entries list is empty.\n */\nexport const ERR_NAVIGATION_HISTORY_EMPTY = 'ERR_NAVIGATION_LIST_EMPTY';\n\n/**\n * Navigation entries cursor is invalid.\n */\nexport const ERR_NAVIGATION_INDEX_INVALID = 'ERR_NAVIGATION_CURSOR_INVALID';\n\n/**\n * Navigation entries item is invalid.\n */\nexport const ERR_NAVIGATION_ITEM_INVALID = 'ERR_NAVIGATION_ITEM_INVALID';\n\n/**\n * SSR component initialization failed.\n */\nexport const ERR_SSR_INIT = 'ERR_SSR_INIT';\n\n/**\n * Path starts from the invalid base.\n */\nexport const ERR_INVALID_PATH_BASE = 'ERR_INVALID_PATH_BASE';\n\nexport type ErrorType =\n  | typeof ERR_METHOD_UNSUPPORTED\n  | typeof ERR_METHOD_PARAMETER_UNSUPPORTED\n  | typeof ERR_UNKNOWN_ENV\n  | typeof ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n  | typeof ERR_TIMED_OUT\n  | typeof ERR_PARSE\n  | typeof ERR_UNEXPECTED_TYPE\n  | typeof ERR_NAVIGATION_HISTORY_EMPTY\n  | typeof ERR_NAVIGATION_INDEX_INVALID\n  | typeof ERR_NAVIGATION_ITEM_INVALID\n  | typeof ERR_SSR_INIT\n  | typeof ERR_INVALID_PATH_BASE;\n","import { createError } from '@/errors/createError.js';\nimport { ERR_UNEXPECTED_TYPE } from '@/errors/errors.js';\nimport type { SDKError } from '@/errors/SDKError.js';\n\n/**\n * Creates instance of TypeError stating, that value has unexpected type.\n */\nexport function createTypeError(): SDKError {\n  return createError(ERR_UNEXPECTED_TYPE, 'Value has unexpected type');\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_PARSE } from '@/errors/errors.js';\n\nimport type { Parser } from '../types.js';\nimport type { ValueParserOptionalResult, ValueParserParseResult } from './types.js';\n\nexport class ValueParser<ResultType, IsOptional extends boolean> {\n  constructor(\n    protected parser: Parser<ResultType>,\n    protected isOptional: IsOptional,\n    protected type?: string,\n  ) {\n  }\n\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  parse(value: unknown): ValueParserParseResult<ResultType, IsOptional> {\n    // In case, parsing result is specified as optional, and passed value is considered as empty,\n    // we can return undefined. Otherwise, pass to parser.\n    if (this.isOptional && value === undefined) {\n      return undefined as ValueParserParseResult<ResultType, IsOptional>;\n    }\n\n    try {\n      return this.parser(value) as ValueParserParseResult<ResultType, IsOptional>;\n    } catch (cause) {\n      throw createError(\n        ERR_PARSE,\n        `Unable to parse value${this.type ? ` as ${this.type}` : ''}`,\n        cause,\n      );\n    }\n  }\n\n  optional(): ValueParserOptionalResult<this, ResultType> {\n    this.isOptional = true as IsOptional;\n    return this as ValueParserOptionalResult<this, ResultType>;\n  }\n}\n","import { ValueParser } from './ValueParser/ValueParser.js';\nimport type { Parser } from './types.js';\n\nexport type ValueParserGenerator<T> = () => ValueParser<T, false>;\n\n/**\n * Creates function which generates new scalar value parser based on the specified one.\n * @param parser - parser to use as basic.\n * @param type - type name.\n */\nexport function createValueParserGenerator<T>(\n  parser: Parser<T>,\n  type?: string,\n): ValueParserGenerator<T> {\n  return () => new ValueParser(parser, false, type);\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as boolean.\n */\nexport const boolean: ValueParserGenerator<boolean> = createValueParserGenerator((value) => {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  const asString = String(value);\n\n  if (asString === '1' || asString === 'true') {\n    return true;\n  }\n\n  if (asString === '0' || asString === 'false') {\n    return false;\n  }\n\n  throw createTypeError();\n}, 'boolean');\n","import { createError } from '@/errors/createError.js';\nimport { ERR_PARSE } from '@/errors/errors.js';\n\nimport type { Parser, Schema } from './types.js';\n\n/**\n * Parses external value by specified schema. Functions iterates over each schema field\n * and uses getField function to get its value from the external source.\n * @param schema - object schema.\n * @param getField - function which gets external value by its field name.\n */\nexport function parseBySchema<T>(\n  schema: Schema<T>,\n  getField: (field: string) => unknown,\n): T {\n  const result = {} as T;\n\n  for (const field in schema) {\n    const definition = schema[field];\n    if (!definition) {\n      continue;\n    }\n\n    let from: string;\n    let parser: Parser<any>;\n\n    // In case, definition has \"type\" property, then SchemaFieldDetailed was passed.\n    if (typeof definition === 'function' || 'parse' in definition) {\n      // Otherwise we are working with either parser function or instance.\n      from = field;\n      parser = typeof definition === 'function' ? definition : definition.parse.bind(definition);\n    } else {\n      const { type: definitionType } = definition;\n\n      from = definition.from || field;\n      parser = typeof definitionType === 'function'\n        ? definitionType\n        : definitionType.parse.bind(definitionType);\n    }\n\n    try {\n      const parsedValue = parser(getField(from));\n      if (parsedValue !== undefined) {\n        (result as any)[field] = parsedValue;\n      }\n    } catch (error) {\n      throw createError(ERR_PARSE, `Unable to parse field \"${field}\"`, error);\n    }\n  }\n\n  return result;\n}\n","import { createTypeError } from './createTypeError.js';\n\n/**\n * Converts value to record.\n * @param value - value to convert.\n * @throws {Error} Value passed as a string does not represent JSON object.\n * @throws {Error} Value is not convertable.\n */\nexport function toRecord(value: unknown): Record<string, unknown> {\n  let formattedValue: any = value;\n\n  // Convert value to JSON in case, it is string. We expect value to be JSON string.\n  if (typeof formattedValue === 'string') {\n    formattedValue = JSON.parse(formattedValue);\n  }\n\n  // We expect json to be usual object.\n  if (\n    typeof formattedValue !== 'object'\n    || formattedValue === null\n    || Array.isArray(formattedValue)\n  ) {\n    throw createTypeError();\n  }\n\n  return formattedValue as Record<string, unknown>;\n}\n","import { parseBySchema } from '../parseBySchema.js';\nimport { toRecord } from '../toRecord.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { Schema } from '../types.js';\n\n/**\n * Creates new Json parser according to passed schema.\n * @param schema - object schema.\n * @param type - parser type name.\n */\nexport function json<T>(schema: Schema<T>, type?: string): ValueParser<T, false> {\n  return new ValueParser((value) => {\n    const record = toRecord(value);\n    return parseBySchema(schema, (field) => record[field]);\n  }, false, type);\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as number.\n */\nexport const number: ValueParserGenerator<number> = createValueParserGenerator((value) => {\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    const num = Number(value);\n\n    if (!Number.isNaN(num)) {\n      return num;\n    }\n  }\n\n  throw createTypeError();\n}, 'number');\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as string.\n */\nexport const string: ValueParserGenerator<string> = createValueParserGenerator((value) => {\n  if (typeof value === 'string' || typeof value === 'number') {\n    return value.toString();\n  }\n  throw createTypeError();\n}, 'string');\n","import { json } from '@/parsing/parsers/json.js';\nimport { string } from '@/parsing/parsers/string.js';\n\n/**\n * Message format used in communication between client and Telegram applications.\n */\nexport interface MiniAppsMessage {\n  /**\n   * Event name.\n   */\n  eventType: string;\n  /**\n   * Event parameters.\n   */\n  eventData?: unknown;\n}\n\n/**\n * Parses value as a message between client and Telegram applications.\n * @param value - value to parse.\n */\nexport function parseMessage(value: unknown): MiniAppsMessage {\n  return json({\n    eventType: string(),\n    eventData: (v) => v,\n  }).parse(value);\n}\n","/**\n * Removes global event handlers, used by the package.\n */\nexport function cleanupEventHandlers(): void {\n  ['TelegramGameProxy_receiveEvent', 'TelegramGameProxy', 'Telegram'].forEach((prop) => {\n    delete window[prop as keyof Window];\n  });\n}\n","/**\n * Emits event sent from Telegram native application like it was sent in\n * default web environment between 2 iframes. It dispatches new MessageEvent\n * and expects it to be handled via `window.addEventListener('message', ...)`\n * as developer would do it to handle messages sent from the parent iframe.\n * @param eventType - event name.\n * @param eventData - event payload.\n */\nexport function emitMiniAppsEvent(eventType: string, eventData: unknown): void {\n  window.dispatchEvent(new MessageEvent('message', {\n    data: JSON.stringify({ eventType, eventData }),\n    // We specify window.parent to imitate the case, the parent iframe sent us this event.\n    source: window.parent,\n  }));\n}\n","import { emitMiniAppsEvent } from './emitMiniAppsEvent.js';\n\n/**\n * Defines special handlers by known paths, which are recognized by\n * Telegram as ports to receive events. This function also sets special\n * function in global window object to prevent duplicate declaration.\n */\nexport function defineEventHandlers() {\n  // Iterate over each path, where \"receiveEvent\" function should be\n  // defined. This function is called by external environment in case,\n  // it wants to emit some event.\n  [\n    ['TelegramGameProxy_receiveEvent'], // Windows Phone.\n    ['TelegramGameProxy', 'receiveEvent'], // Desktop.\n    ['Telegram', 'WebView', 'receiveEvent'], // Android and iOS.\n  ].forEach((path) => {\n    // Path starts from the \"window\" object.\n    let pointer = window as any;\n\n    path.forEach((item, idx, arr) => {\n      // We are on the last iteration, where function property name is passed.\n      if (idx === arr.length - 1) {\n        pointer[item] = emitMiniAppsEvent;\n        return;\n      }\n\n      if (!(item in pointer)) {\n        pointer[item] = {};\n      }\n      pointer = pointer[item];\n    });\n  });\n}\n","import { logger } from '@/debug/debug.js';\nimport { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport { onWindow } from '@/events/onWindow.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\nimport { boolean } from '@/parsing/parsers/boolean.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport { type MiniAppsMessage, parseMessage } from '../../parseMessage.js';\nimport { cleanupEventHandlers } from '../event-handlers/cleanupEventHandlers.js';\nimport { defineEventHandlers } from '../event-handlers/defineEventHandlers.js';\nimport type {\n  MiniAppsEventName,\n  MiniAppsEventPayload,\n  MiniAppsEventEmitter,\n  MiniAppsEvents,\n} from '../types.js';\n\n/**\n * Parsers for problematic Mini Apps events.\n */\nconst parsers: {\n  [E in MiniAppsEventName]?: {\n    parse(value: unknown): MiniAppsEventPayload<E>;\n  }\n} = {\n  clipboard_text_received: json({\n    req_id: string(),\n    data: (value) => (value === null ? value : string().optional().parse(value)),\n  }),\n  custom_method_invoked: json({\n    req_id: string(),\n    result: (value) => value,\n    error: string().optional(),\n  }),\n  popup_closed: {\n    parse(value) {\n      return json({\n        button_id: (value) => (\n          value === null || value === undefined\n            ? undefined\n            : string().parse(value)\n        ),\n      }).parse(value ?? {});\n    },\n  },\n  viewport_changed: json({\n    height: number(),\n    width: (value) => (\n      value === null || value === undefined\n        ? window.innerWidth\n        : number().parse(value)\n    ),\n    is_state_stable: boolean(),\n    is_expanded: boolean(),\n  }),\n};\n\n/**\n * Creates new event emitter, which handles events from the Telegram application.\n */\nexport function createMiniAppsEventEmitter(): [\n  /**\n   * Created event emitter.\n   */\n  emitter: MiniAppsEventEmitter,\n  /**\n   * Function to dispose created emitter.\n   */\n  dispose: () => void,\n] {\n  // We use this event emitter for better developer experience, using the subscribe method.\n  const subEmitter = new EventEmitter<{ event: any[] }>();\n\n  // Event emitter processing all the incoming events.\n  const mainEmitter = new EventEmitter<MiniAppsEvents>();\n\n  mainEmitter.subscribe(event => {\n    subEmitter.emit('event', { name: event.event, payload: event.args[0] });\n  });\n\n  // Define event handles, which will proxy native method calls to their web version.\n  defineEventHandlers();\n\n  // List of cleanup functions, which should be called on dispose.\n  const [, cleanup] = createCleanup(\n    // Don't forget to remove created handlers.\n    cleanupEventHandlers,\n    // Add \"resize\" event listener to make sure, we always have fresh viewport information.\n    // Desktop version of Telegram is sometimes not sending the viewport_changed\n    // event. For example, when the MainButton is shown. That's why we should\n    // add our own listener to make sure, viewport information is always fresh.\n    // Issue: https://github.com/Telegram-Mini-Apps/tma.js/issues/10\n    onWindow('resize', () => {\n      mainEmitter.emit('viewport_changed', {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        is_state_stable: true,\n        is_expanded: true,\n      });\n    }),\n    // Add listener, which handles events sent from the Telegram web application and also events\n    // generated by the local emitEvent function.\n    onWindow('message', (event) => {\n      // Ignore non-parent window messages.\n      if (event.source !== window.parent) {\n        return;\n      }\n\n      // Parse incoming event data.\n      let message: MiniAppsMessage;\n      try {\n        message = parseMessage(event.data);\n      } catch {\n        // We ignore incorrect messages as they could be generated by any other code.\n        return;\n      }\n\n      const { eventType, eventData } = message;\n      const parser = parsers[eventType as keyof typeof parsers];\n\n      try {\n        const data = parser ? parser.parse(eventData) : eventData;\n        mainEmitter.emit(...(data ? [eventType, data] : [eventType]) as [any, any]);\n      } catch (cause) {\n        logger.error(\n          `An error occurred processing the \"${eventType}\" event from the Telegram application.\\nPlease, file an issue here:\\nhttps://github.com/Telegram-Mini-Apps/tma.js/issues/new/choose`,\n          message,\n          cause,\n        );\n      }\n    }),\n    // Clear emitters.\n    () => subEmitter.clear(),\n    () => mainEmitter.clear(),\n  );\n\n  return [{\n    on: mainEmitter.on.bind(mainEmitter),\n    off: mainEmitter.off.bind(mainEmitter),\n    subscribe(listener) {\n      return subEmitter.on('event', listener);\n    },\n    unsubscribe(listener) {\n      subEmitter.off('event', listener);\n    },\n    get count() {\n      return mainEmitter.count + subEmitter.count;\n    },\n  }, cleanup];\n}\n","import { createSingleton } from '@/misc/createSingleton.js';\n\nimport { createMiniAppsEventEmitter } from './createMiniAppsEventEmitter.js';\nimport type { MiniAppsEventEmitter } from '../types.js';\n\nconst [get, resetMiniAppsEventEmitter] = createSingleton(\n  (reset) => {\n    const [emitter, cleanup] = createMiniAppsEventEmitter();\n\n    // Rewire \"off\" method and make it reset singleton if no event listeners left.\n    const off = emitter.off.bind(emitter);\n    emitter.off = (event, listener) => {\n      const { count } = emitter;\n      off(event, listener);\n\n      // If event emitter now has no listeners, we can perform a reset.\n      if (count && !emitter.count) {\n        reset();\n      }\n    };\n\n    return [emitter, cleanup] as const;\n  },\n  ([, cleanup]) => cleanup(),\n);\n\n/**\n * Returns Mini Apps event emitter singleton.\n */\nexport function miniAppsEventEmitter(): MiniAppsEventEmitter {\n  return get()[0];\n}\n\nexport { resetMiniAppsEventEmitter };\n","import { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsEventListener, MiniAppsEventName } from '../types.js';\n\n/**\n * Removes listener from specified event.\n * @param event - event to listen.\n * @param listener - event listener to remove.\n */\nexport function off<E extends MiniAppsEventName>(\n  event: E,\n  listener: MiniAppsEventListener<E>,\n): void {\n  miniAppsEventEmitter().off(event, listener);\n}\n","import type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsEventListener, MiniAppsEventName } from '../types.js';\n\n/**\n * Adds new listener to the specified event. Returns handler\n * which allows to stop listening to event.\n * @param event - event name.\n * @param listener - event listener.\n * @param once - should listener be called only once.\n * @returns Function to remove bound event listener.\n */\nexport function on<E extends MiniAppsEventName>(\n  event: E,\n  listener: MiniAppsEventListener<E>,\n  once?: boolean,\n): RemoveEventListenerFn {\n  return miniAppsEventEmitter().on(event, listener, once);\n}\n","/**\n * States that passed value is Record and not Array.\n * @param value - value to check.\n */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n","import type { Version } from './types.js';\n\n/**\n * Returns 1 in case, version \"a\" is greater than \"b\".\n * Returns 0 in case, version \"a\" equal to \"b\".\n * Returns -1 in case, version \"a\" is lower than \"b\".\n * @param a - first version.\n * @param b - second version.\n */\nexport function compareVersions(a: Version, b: Version): number {\n  // Split both of the version by dot.\n  const aParts = a.split('.');\n  const bParts = b.split('.');\n\n  // Compute maximum length.\n  const len = Math.max(aParts.length, bParts.length);\n\n  // Iterate over each part of version and compare them. In case, part is\n  // missing, assume its value is equal to 0.\n  for (let i = 0; i < len; i += 1) {\n    const aVal = parseInt(aParts[i] || '0', 10);\n    const bVal = parseInt(bParts[i] || '0', 10);\n\n    if (aVal === bVal) {\n      continue;\n    }\n    return aVal > bVal ? 1 : -1;\n  }\n  return 0;\n}\n","import { compareVersions } from '@/version/compareVersions.js';\nimport type {\n  MiniAppsMethodName,\n  MiniAppsMethodVersionedParams,\n  MiniAppsMethodWithVersionedParams,\n} from '@/bridge/methods/types/methods.js';\nimport type { Version } from '@/version/types.js';\n\n/**\n * Returns true if \"a\" version is less than or equal to \"b\" version.\n * @param a\n * @param b\n */\nfunction versionLessOrEqual(a: Version, b: Version): boolean {\n  return compareVersions(a, b) <= 0;\n}\n\n/**\n * Returns true in case, passed parameter in specified method is supported.\n * @param method - method name\n * @param param - method parameter\n * @param inVersion - platform version.\n */\nexport function supports<M extends MiniAppsMethodWithVersionedParams>(\n  method: M,\n  param: MiniAppsMethodVersionedParams<M>,\n  inVersion: Version,\n): boolean;\n\n/**\n * Returns true in case, specified method is supported in passed version.\n * @param method - method name.\n * @param inVersion - platform version.\n */\nexport function supports(method: MiniAppsMethodName, inVersion: Version): boolean;\n\nexport function supports(\n  method: MiniAppsMethodName,\n  paramOrVersion: Version | string,\n  inVersion?: string,\n): boolean {\n  // Method name, parameter, target version.\n  if (typeof inVersion === 'string') {\n    if (method === 'web_app_open_link') {\n      if (paramOrVersion === 'try_instant_view') {\n        return versionLessOrEqual('6.4', inVersion);\n      }\n      if (paramOrVersion === 'try_browser') {\n        return versionLessOrEqual('7.6', inVersion);\n      }\n    }\n\n    if (method === 'web_app_set_header_color') {\n      if (paramOrVersion === 'color') {\n        return versionLessOrEqual('6.9', inVersion);\n      }\n    }\n\n    if (method === 'web_app_close' && paramOrVersion === 'return_back') {\n      return versionLessOrEqual('7.6', inVersion);\n    }\n  }\n\n  switch (method) {\n    case 'web_app_open_tg_link':\n    case 'web_app_open_invoice':\n    case 'web_app_setup_back_button':\n    case 'web_app_set_background_color':\n    case 'web_app_set_header_color':\n    case 'web_app_trigger_haptic_feedback':\n      return versionLessOrEqual('6.1', paramOrVersion);\n    case 'web_app_open_popup':\n      return versionLessOrEqual('6.2', paramOrVersion);\n    case 'web_app_close_scan_qr_popup':\n    case 'web_app_open_scan_qr_popup':\n    case 'web_app_read_text_from_clipboard':\n      return versionLessOrEqual('6.4', paramOrVersion);\n    case 'web_app_switch_inline_query':\n      return versionLessOrEqual('6.7', paramOrVersion);\n    case 'web_app_invoke_custom_method':\n    case 'web_app_request_write_access':\n    case 'web_app_request_phone':\n      return versionLessOrEqual('6.9', paramOrVersion);\n    case 'web_app_setup_settings_button':\n      return versionLessOrEqual('6.10', paramOrVersion);\n    case 'web_app_biometry_get_info':\n    case 'web_app_biometry_open_settings':\n    case 'web_app_biometry_request_access':\n    case 'web_app_biometry_request_auth':\n    case 'web_app_biometry_update_token':\n      return versionLessOrEqual('7.2', paramOrVersion);\n    default:\n      return [\n        'iframe_ready',\n        'iframe_will_reload',\n        'web_app_close',\n        'web_app_data_send',\n        'web_app_expand',\n        'web_app_open_link',\n        'web_app_ready',\n        'web_app_request_theme',\n        'web_app_request_viewport',\n        'web_app_setup_main_button',\n        'web_app_setup_closing_behavior',\n      ].includes(method);\n  }\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Returns true in case, passed value contains path `external.notify` property and `notify` is a\n * function.\n * @param value - value to check.\n */\nexport function hasExternalNotify<T extends object>(value: T): value is (\n  T & {\n  external: {\n    notify: (...args: any) => any;\n  };\n}) {\n  return 'external' in value\n    && isRecord(value.external)\n    && 'notify' in value.external\n    && typeof value.external.notify === 'function';\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Returns true in case, passed value contains path `TelegramWebviewProxy.postEvent` property and\n * `postEvent` is a function.\n * @param value - value to check.\n */\nexport function hasWebviewProxy<T extends {}>(value: T): value is (\n  T & {\n  TelegramWebviewProxy: {\n    postEvent: (...args: unknown[]) => unknown;\n  }\n}) {\n  return 'TelegramWebviewProxy' in value\n    && isRecord(value.TelegramWebviewProxy)\n    && 'postEvent' in value.TelegramWebviewProxy\n    && typeof value.TelegramWebviewProxy.postEvent === 'function';\n}\n","/**\n * @see https://stackoverflow.com/a/326076\n * @returns True, if current environment is iframe.\n */\nexport function isIframe(): boolean {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return true;\n  }\n}\n","const INITIAL_TARGET_ORIGIN = 'https://web.telegram.org'\n\nlet currentTargetOrigin = INITIAL_TARGET_ORIGIN;\n\n/**\n * Sets a new global targetOrigin, used by the `postEvent` method.\n * The default value is \"https://web.telegram.org\".\n * You don't need to use this method until you know what you are doing.\n *\n * This method could be used for test purposes.\n * @param value - new target origin.\n * @see postEvent\n */\nexport function setTargetOrigin(value: string): void {\n  currentTargetOrigin = value;\n}\n\n/**\n * Sets the initial target origin.\n */\nexport function resetTargetOrigin(): void {\n  setTargetOrigin(INITIAL_TARGET_ORIGIN);\n}\n\n/**\n * Returns current global target origin.\n */\nexport function targetOrigin(): string {\n  return currentTargetOrigin;\n}\n","import { log } from '@/debug/debug.js';\nimport { hasExternalNotify } from '@/env/hasExternalNotify.js';\nimport { hasWebviewProxy } from '@/env/hasWebviewProxy.js';\nimport { isIframe } from '@/env/isIframe.js';\nimport { createError } from '@/errors/createError.js';\nimport { ERR_UNKNOWN_ENV } from '@/errors/errors.js';\n\nimport { targetOrigin as targetOriginFn } from '../target-origin.js';\nimport type {\n  MiniAppsMethodName,\n  MiniAppsMethodParams,\n  MiniAppsMethodWithOptionalParams,\n  MiniAppsMethodWithoutParams,\n  MiniAppsMethodWithRequiredParams,\n} from './types/methods.js';\n\ninterface PostEventOptions {\n  /**\n   * Origin used while posting a message.\n   *\n   * This option is only used if the current environment is browser (Web version of Telegram)\n   * and could be used for test purposes.\n   * @default 'https://web.telegram.org'\n   */\n  targetOrigin?: string;\n}\n\nexport type PostEvent = typeof postEvent;\n\n/**\n * Calls Mini Apps method with optional parameters.\n * @param method - method name.\n * @param params - method parameters.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent<Method extends MiniAppsMethodWithOptionalParams>(\n  method: Method,\n  params?: MiniAppsMethodParams<Method>,\n  options?: PostEventOptions,\n): void;\n\n/**\n * Calls Mini Apps method without parameters.\n * @param method - method name.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent(\n  method: MiniAppsMethodWithoutParams | MiniAppsMethodWithOptionalParams,\n  options?: PostEventOptions,\n): void;\n\n/**\n * Calls Mini Apps method with parameters.\n * @param method - method name.\n * @param params - method parameters.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent<Method extends MiniAppsMethodWithRequiredParams>(\n  method: Method,\n  params: MiniAppsMethodParams<Method>,\n  options?: PostEventOptions,\n): void;\n\nexport function postEvent(\n  eventType: MiniAppsMethodName,\n  paramsOrOptions?: MiniAppsMethodParams<MiniAppsMethodName> | PostEventOptions,\n  options?: PostEventOptions,\n): void {\n  let postOptions: PostEventOptions = {};\n  let eventData: any;\n\n  if (!paramsOrOptions && !options) {\n    // Parameters and options were not passed.\n    postOptions = {};\n  } else if (paramsOrOptions && options) {\n    // Both parameters and options passed.\n    postOptions = options;\n    eventData = paramsOrOptions;\n  } else if (paramsOrOptions) {\n    // Only parameters were passed.\n    if ('targetOrigin' in paramsOrOptions) {\n      postOptions = paramsOrOptions;\n    } else {\n      eventData = paramsOrOptions;\n    }\n  }\n\n  log('Posting event:', eventData\n    ? { event: eventType, data: eventData }\n    : { event: eventType });\n\n  // Telegram Web.\n  if (isIframe()) {\n    return window.parent.postMessage(\n      JSON.stringify({ eventType, eventData }),\n      postOptions.targetOrigin || targetOriginFn(),\n    );\n  }\n\n  // Telegram for Windows Phone or Android.\n  if (hasExternalNotify(window)) {\n    window.external.notify(JSON.stringify({ eventType, eventData }));\n    return;\n  }\n\n  // Telegram for iOS and macOS.\n  if (hasWebviewProxy(window)) {\n    window.TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));\n    return;\n  }\n\n  // Otherwise current environment is unknown, and we are not able to send event.\n  throw createError(\n    ERR_UNKNOWN_ENV,\n    'Unable to determine current environment and possible way to send event. You are probably trying to use Mini Apps method outside the Telegram application environment.',\n  );\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_METHOD_PARAMETER_UNSUPPORTED, ERR_METHOD_UNSUPPORTED } from '@/errors/errors.js';\nimport { isRecord } from '@/misc/isRecord.js';\nimport { supports } from '@/supports/supports.js';\nimport type { Version } from '@/version/types.js';\n\nimport { type PostEvent, postEvent } from './postEvent.js';\n\n/**\n * Creates a function which checks if specified method and parameters are supported.\n *\n * If method or parameters are unsupported, an error will be thrown.\n * @param version - Telegram Mini Apps version.\n * @throws {SDKError} ERR_METHOD_UNSUPPORTED\n * @throws {SDKError} ERR_METHOD_PARAMETER_UNSUPPORTED\n * @see ERR_METHOD_UNSUPPORTED\n * @see ERR_METHOD_PARAMETER_UNSUPPORTED\n */\nexport function createPostEvent(version: Version): PostEvent {\n  return (method: any, params: any) => {\n    // Firstly, check if a method is supported.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    if (!supports(method, version)) {\n      throw createError(ERR_METHOD_UNSUPPORTED, `Method \"${method}\" is unsupported in Mini Apps version ${version}`);\n    }\n\n    // Method could use parameters, which are supported only in specific\n    // versions of Mini Apps.\n    // We are validating only those parameters, which are not backward compatible.\n    if (\n      isRecord(params)\n      && method === 'web_app_set_header_color'\n      && 'color' in params\n      && !supports(method, 'color', version)\n    ) {\n      throw createError(\n        ERR_METHOD_PARAMETER_UNSUPPORTED,\n        `Parameter \"color\" of \"${method}\" method is unsupported in Mini Apps version ${version}`,\n      );\n    }\n\n    return postEvent(method, params);\n  };\n}\n","type CaptureSameReqFn = (payload: { req_id: string }) => boolean;\n\n/**\n * Returns a function which can be used in `request` function `capture` property to capture\n * the event with the same request identifier.\n * @param reqId - request identifier.\n */\nexport function captureSameReq(reqId: string): CaptureSameReqFn {\n  return ({ req_id }) => req_id === reqId;\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_TIMED_OUT } from '@/errors/errors.js';\nimport type { SDKError } from '@/errors/SDKError.js';\n\n/**\n * Creates new timeout error.\n * @param timeout - timeout in ms.\n */\nexport function createTimeoutError(timeout: number): SDKError {\n  return createError(ERR_TIMED_OUT, `Timeout reached: ${timeout}ms`);\n}\n","import { createTimeoutError } from '@/timeout/createTimeoutError.js';\n\n/**\n * Runs passed function or promise with specified deadline presented via timeout argument.\n * @param funcOrPromise - function to execute or pending promise.\n * @param timeout - completion timeout.\n */\nexport function withTimeout<T>(\n  funcOrPromise: Promise<T> | (() => Promise<T>),\n  timeout: number,\n): Promise<T> {\n  return Promise.race([\n    typeof funcOrPromise === 'function' ? funcOrPromise() : funcOrPromise,\n    new Promise<never>((_, rej) => {\n      setTimeout(() => {\n        rej(createTimeoutError(timeout));\n      }, timeout);\n    }),\n  ]);\n}\n","import { withTimeout } from '@/timeout/withTimeout.js';\nimport type { ExecuteWithOptions, If, IsNever } from '@/types/index.js';\n\nimport { on } from './events/listening/on.js';\nimport { postEvent as defaultPostEvent } from './methods/postEvent.js';\nimport type { MiniAppsEventName, MiniAppsEventPayload } from './events/types.js';\nimport type { MiniAppsMethodName, MiniAppsMethodParams } from './methods/types/index.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\n\n/**\n * Returns all possible payloads for the specified events array.\n */\nexport type RequestEventsPayloads<E extends MiniAppsEventName[]> =\n  E extends (infer U extends MiniAppsEventName)[]\n    ? MiniAppsEventPayload<U>\n    : never;\n\nexport type RequestCaptureEventsFn<E extends MiniAppsEventName[]> =\n  E extends (infer U extends MiniAppsEventName)[]\n    ? (payload: {\n      [K in U]: If<\n        IsNever<MiniAppsEventPayload<K>>,\n        { event: K },\n        { event: K; payload: MiniAppsEventPayload<K> }\n      >\n    }[U]) => boolean\n    : never;\n\nexport type RequestCaptureEventFn<E extends MiniAppsEventName> = If<\n  IsNever<MiniAppsEventPayload<E>>,\n  () => boolean,\n  (payload: MiniAppsEventPayload<E>) => boolean\n>;\n\n/**\n * `request` method options.\n * @see request\n */\nexport type RequestOptions<M extends MiniAppsMethodName, E, C> = {\n    /**\n     * Mini Apps method name.\n     */\n    method: M;\n    /**\n     * Tracked Mini Apps events.\n     */\n    event: E;\n    /**\n     * Should return true if this event should be captured.\n     * A request will be captured if this property is omitted.\n     */\n    capture?: C;\n  }\n  & ExecuteWithOptions\n  & If<IsNever<MiniAppsMethodParams<M>>, {}, {\n  /**\n   * List of method parameters.\n   */\n  params: MiniAppsMethodParams<M>\n}>;\n\ntype AnyRequestResult =\n  | MiniAppsEventPayload<MiniAppsEventName>\n  | RequestEventsPayloads<MiniAppsEventName[]>;\n\n/**\n * Calls specified Mini Apps method and captures specified event.\n * @param options - method options.\n * @returns Promise which will be resolved with data of the captured event.\n */\nexport async function request<M extends MiniAppsMethodName, E extends MiniAppsEventName>(\n  options: RequestOptions<M, E, RequestCaptureEventFn<E>>,\n): Promise<MiniAppsEventPayload<E>>;\n\n/**\n * Calls specified Mini Apps method and captures one of the specified events.\n * @param options - method options.\n * @returns Promise which will be resolved with data of the first captured event.\n */\nexport async function request<M extends MiniAppsMethodName, E extends MiniAppsEventName[]>(\n  options: RequestOptions<M, E, RequestCaptureEventsFn<E>>,\n): Promise<RequestEventsPayloads<E>>;\n\nexport async function request<M extends MiniAppsMethodName>(\n  options:\n    | RequestOptions<M, MiniAppsEventName, RequestCaptureEventFn<MiniAppsEventName>>\n    | RequestOptions<M, MiniAppsEventName[], RequestCaptureEventsFn<MiniAppsEventName[]>>,\n): Promise<AnyRequestResult> {\n  let resolve: (payload: AnyRequestResult) => void;\n  const promise = new Promise<AnyRequestResult>(res => resolve = res);\n\n  const { event, capture, timeout } = options;\n  const [, cleanup] = createCleanup(\n    // We need to iterate over all tracked events, and create their event listeners.\n    (Array.isArray(event) ? event : [event]).map((ev) => {\n      // Each event listener waits for the event to occur.\n      // Then, if the capture function was passed, we should check if the event should be captured.\n      // If the function is omitted, we instantly capture the event.\n      return on(ev, (payload) => {\n        if (!capture || (\n          Array.isArray(event)\n            ? (capture as RequestCaptureEventsFn<MiniAppsEventName[]>)({\n              event: ev,\n              payload: payload as any,\n            })\n            : (capture as RequestCaptureEventFn<MiniAppsEventName>)(payload)\n        )) {\n          resolve(payload);\n        }\n      });\n    }),\n  );\n\n  try {\n    (options.postEvent || defaultPostEvent)(options.method as any, (options as any).params);\n    return await (timeout ? withTimeout(promise, timeout) : promise);\n  } finally {\n    // After promise execution was completed, don't forget to remove all the listeners.\n    cleanup();\n  }\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_INVOKE_CUSTOM_METHOD_RESPONSE } from '@/errors/errors.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { captureSameReq } from './captureSameReq.js';\nimport { request } from './request.js';\nimport type { CustomMethodName, CustomMethodParams } from './methods/types/custom-methods.js';\n\n/**\n * Invokes known custom method. Returns method execution result.\n * @param method - method name.\n * @param params - method parameters.\n * @param requestId - request identifier.\n * @param options - additional options.\n * @throws {SDKError} ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n * @see ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n */\nexport async function invokeCustomMethod<M extends CustomMethodName>(\n  method: M,\n  params: CustomMethodParams<M>,\n  requestId: string,\n  options?: ExecuteWithOptions,\n): Promise<unknown>;\n\n/**\n * Invokes unknown custom method. Returns method execution result.\n * @param method - method name.\n * @param params - method parameters.\n * @param requestId - request identifier.\n * @param options - additional options.\n * @throws {SDKError} ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n * @see ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n */\nexport function invokeCustomMethod(\n  method: string,\n  params: object,\n  requestId: string,\n  options?: ExecuteWithOptions,\n): Promise<unknown>;\n\nexport async function invokeCustomMethod(\n  method: string,\n  params: object,\n  requestId: string,\n  options: ExecuteWithOptions = {},\n): Promise<unknown> {\n  const {\n    result,\n    error,\n  } = await request({\n    ...options,\n    method: 'web_app_invoke_custom_method',\n    event: 'custom_method_invoked',\n    params: {\n      method,\n      params,\n      req_id: requestId,\n    },\n    capture: captureSameReq(requestId),\n  });\n\n  if (error) {\n    throw createError(ERR_INVOKE_CUSTOM_METHOD_RESPONSE, error);\n  }\n\n  return result;\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Function which joins passed values with space following these rules:\n * 1. If value is non-empty string, it will be added to output.\n * 2. If value is object, only those keys will be added, which values are truthy.\n * 3. If value is array, classNames will be called with this value spread.\n * 4. All other values are ignored.\n *\n * You can find this function to similar one from the package {@link https://www.npmjs.com/package/classnames|classnames}.\n * @param values - values array.\n * @returns Final class name.\n */\nexport function classNames(...values: any[]): string {\n  return values\n    .map((value) => {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      if (isRecord(value)) {\n        return classNames(Object.entries(value).map((entry) => entry[1] && entry[0]));\n      }\n\n      if (Array.isArray(value)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return classNames(...value);\n      }\n    })\n    .filter(Boolean)\n    .join(' ');\n}\n","import { isRecord } from '@/misc/isRecord.js';\nimport type { UnionOptionalKeys, UnionRequiredKeys } from '@/types/unions.js';\n\nimport { classNames } from './classNames.js';\n\nexport type MergeClassNames<Tuple extends any[]> =\n  // Removes all types from union which will be ignored by the mergeClassNames function.\n  Exclude<Tuple[number], number | string | null | undefined | any[] | boolean> extends infer Union\n    ? {\n    [K in UnionRequiredKeys<Union>]: string;\n  } & {\n    [K in UnionOptionalKeys<Union>]?: string;\n  }\n    : never;\n\n/**\n * Merges 2 sets of parameters. Function expects passing an array of objects with values, which\n * could be passed to `classNames` function. As the result, it returns an object with keys\n * from all objects with merged values.\n * @see classNames\n */\nexport function mergeClassNames<T extends any[]>(...partials: T): MergeClassNames<T> {\n  return partials.reduce<MergeClassNames<T>>((acc, partial) => {\n    if (!isRecord(partial)) {\n      return acc;\n    }\n\n    Object.entries(partial).forEach(([key, value]) => {\n      const className = classNames((acc as any)[key], value);\n\n      if (className.length) {\n        (acc as any)[key] = className;\n      }\n    });\n\n    return acc;\n  }, {} as MergeClassNames<T>);\n}\n","import type { RGB } from './types.js';\n\n/**\n * Returns true in case, passed value has #RRGGBB format.\n * @param value - value to check.\n */\nexport function isRGB(value: string): value is RGB {\n  return /^#[\\da-f]{6}$/i.test(value);\n}\n","import type { RGBShort } from './types.js';\n\n/**\n * Returns true in case, passed value has #RGB format.\n * @param value - value to check.\n */\nexport function isRGBShort(value: string): value is RGBShort {\n  return /^#[\\da-f]{3}$/i.test(value);\n}\n","import { isRGB } from './isRGB.js';\nimport { isRGBShort } from './isRGBShort.js';\nimport type { RGB } from './types.js';\n\n/**\n * Converts passed value to #RRGGBB format. Accepts following color formats:\n * - `#RGB`\n * - `#RRGGBB`\n * - `rgb(1,2,3)`\n * - `rgba(1,2,3,4)`\n * @param value - value to convert.\n * @throws {Error} Passed value does not satisfy any of known RGB formats.\n */\nexport function toRGB(value: string): RGB {\n  // Remove all spaces.\n  const clean = value.replace(/\\s/g, '').toLowerCase();\n\n  // Value already has required format.\n  if (isRGB(clean)) {\n    return clean;\n  }\n\n  // Convert from #RGB.\n  if (isRGBShort(clean)) {\n    let color: RGB = '#';\n    for (let i = 0; i < 3; i += 1) {\n      color += clean[1 + i].repeat(2);\n    }\n    return color;\n  }\n\n  // Example valid values: rgb(0,3,10) rgba(32,114,8,0)\n  const match = clean.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/)\n    || clean.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n\n  // In case, this didn't work as well, we can't extract RGB color from passed\n  // text.\n  if (!match) {\n    throw new Error(`Value \"${value}\" does not satisfy any of known RGB formats.`);\n  }\n\n  // Otherwise, take R, G and B components, convert to hex and create #RRGGBB\n  // string.\n  return match.slice(1).reduce((acc, component) => {\n    const formatted = parseInt(component, 10).toString(16);\n    return acc + (formatted.length === 1 ? '0' : '') + formatted;\n  }, '#') as RGB;\n}\n","import { toRGB } from './toRGB.js';\n\n/**\n * Returns true in case, the color is recognized as dark.\n * @param color - color in any format acceptable by toRGB function.\n * @see toRGB\n */\nexport function isColorDark(color: string): boolean {\n  // Convert color to RGB.\n  const rgb = toRGB(color);\n\n  // Real formula: hsp = Math.sqrt(0.299 * r * r + 0.587 * g * g + 0.114 * b * b)\n  // See: https://stackoverflow.com/a/596243\n  return Math.sqrt(\n    [0.299, 0.587, 0.114].reduce<number>((acc, modifier, idx) => {\n      // Extract part of #RRGGBB pattern and convert it to DEC.\n      const dec = parseInt(rgb.slice(1 + idx * 2, 1 + (idx + 1) * 2), 16);\n      return acc + dec * dec * modifier;\n    }, 0),\n  ) < 120;\n}\n","import { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport type { StateEvents } from '@/classes/State/types.js';\nimport type { StringKeys } from '@/types/utils.js';\n\ntype Emitter<State extends object> = EventEmitter<StateEvents<State>>;\n\nexport class State<State extends object> {\n  private readonly ee: Emitter<State> = new EventEmitter();\n\n  constructor(\n    /**\n     * Initial state.\n     */\n    private readonly state: State,\n  ) {\n  }\n\n  /**\n   * Clones current state and returns its copy.\n   */\n  clone(): State {\n    return { ...this.state };\n  }\n\n  /**\n   * Sets value by key.\n   * @param key - state key.\n   * @param value - value to set.\n   */\n  set<K extends StringKeys<State>>(key: K, value: State[K]): void;\n  /**\n   * Sets several values simultaneously.\n   * @param state - partial state.\n   */\n  set(state: Partial<State>): void;\n  set(keyOrState: StringKeys<State> | Partial<State>, keyValue?: State[keyof State]): void {\n    const didChange = Object\n      .entries(typeof keyOrState === 'string' ? { [keyOrState]: keyValue } : keyOrState)\n      .reduce((acc, [key, value]) => {\n        // If value is the same or missing at all, we skip it.\n        if (this.state[key as keyof State] === value || value === undefined) {\n          return acc;\n        }\n\n        // Otherwise set new value and emit change event.\n        this.state[key as keyof State] = value;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        (this.ee as any).emit(`change:${key}`, value);\n\n        return true;\n      }, false);\n\n    if (didChange) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      (this.ee as any).emit('change', this.state);\n    }\n  }\n\n  /**\n   * Returns value by specified key.\n   * @param key - state key.\n   */\n  get<K extends StringKeys<State>>(key: K): State[K] {\n    return this.state[key];\n  }\n\n  /**\n   * Adds new event listener.\n   */\n  on: Emitter<State>['on'] = this.ee.on.bind(this.ee);\n\n  /**\n   * Removes event listener.\n   */\n  off: Emitter<State>['off'] = this.ee.off.bind(this.ee);\n}\n","import { State } from '@/classes/State/State.js';\n\nexport class WithStateUtils<Shape extends object> {\n  protected state: State<Shape>;\n\n  constructor(shape: Shape) {\n    this.state = new State(shape);\n    this.set = this.state.set.bind(this.state);\n    this.get = this.state.get.bind(this.state);\n    this.clone = this.state.clone.bind(this.state);\n  }\n\n  /**\n   * Gets the state value.\n   */\n  protected get: State<Shape>['get'];\n\n  /**\n   * Sets the state value.\n   */\n  protected set: State<Shape>['set'];\n\n  /**\n   * Clones the current state.\n   */\n  protected clone: State<Shape>['clone'];\n}\n","import { supports } from '@/supports/supports.js';\nimport type { MiniAppsMethodName } from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport type SupportsSchema<Method extends string> = Record<Method, MiniAppsMethodName>;\n\n/**\n * Returns function, which accepts predefined method name and checks if it is supported\n * via passed schema and version.\n * @param schema - object which contains methods names and TWA method as a dependency.\n * @param version - platform version.\n */\nexport function createSupportsFn<Method extends string>(\n  version: Version,\n  schema: SupportsSchema<Method>,\n): SupportsFn<Method> {\n  return (method) => supports(schema[method], version);\n}\n","import { WithStateUtils } from '@/classes/WithStateUtils.js';\nimport { createSupportsFn } from '@/supports/createSupportsFn.js';\nimport type { MiniAppsMethodName } from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport class WithSupportsAndStateUtils<StateShape extends object, SupportsMethod extends string>\nextends WithStateUtils<StateShape> {\n  constructor(\n    /**\n     * Initial state.\n     */\n    stateShape: StateShape,\n    /**\n     * Mini Apps version.\n     */\n    version: Version,\n    /**\n     * Supports method schema.\n     */\n    supportsSchema: Record<SupportsMethod, MiniAppsMethodName>,\n  ) {\n    super(stateShape);\n    this.supports = createSupportsFn(version, supportsSchema);\n  }\n\n  /**\n   * @returns True, if specified method is supported by the current component.\n   */\n  supports: SupportsFn<SupportsMethod>;\n}\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { WithSupportsAndStateUtils } from '@/classes/WithSupportsAndStateUtils.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { BackButtonEvents, BackButtonState } from '@/components/BackButton/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport type { Version } from '@/version/types.js';\n\ntype Emitter = EventEmitter<BackButtonEvents>;\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/back-button\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/back-button\n */\nexport class BackButton extends WithSupportsAndStateUtils<BackButtonState, 'show' | 'hide'> {\n  constructor(isVisible: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isVisible }, version, {\n      show: 'web_app_setup_back_button',\n      hide: 'web_app_setup_back_button',\n    });\n  }\n\n  private set isVisible(visible: boolean) {\n    this.set('isVisible', visible);\n    this.postEvent('web_app_setup_back_button', { is_visible: visible });\n  }\n\n  /**\n   * True if BackButton is currently visible.\n   */\n  get isVisible(): boolean {\n    return this.get('isVisible');\n  }\n\n  /**\n   * Hides the BackButton.\n   */\n  hide(): void {\n    this.isVisible = false;\n  }\n\n  /**\n   * Adds a new event listener.\n   * @param event - event to listen.\n   * @param listener - listener to add.\n   */\n  on: Emitter['on'] = (event, listener) => (\n    event === 'click'\n      ? on('back_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.on(event, listener as any)\n  );\n\n  /**\n   * Removes the event listener.\n   * @param event - event to listen.\n   * @param listener - listener to remove.\n   */\n  off: Emitter['off'] = (event, listener) => (\n    event === 'click'\n      ? off('back_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.off(event, listener as any)\n  );\n\n  /**\n   * Shows the BackButton.\n   */\n  show(): void {\n    this.isVisible = true;\n  }\n}\n","import { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport { number } from './number.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as Date.\n */\nexport const date: ValueParserGenerator<Date> = createValueParserGenerator((value) => (\n  value instanceof Date\n    ? value\n    : new Date(number().parse(value) * 1000)\n), 'Date');\n","import { createTypeError } from '../createTypeError.js';\nimport { parseBySchema } from '../parseBySchema.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { Schema } from '../types.js';\n\n/**\n * Creates new search params parser according to passed schema.\n * @param schema - object schema.\n * @param type - parser type name.\n */\nexport function searchParams<T>(schema: Schema<T>, type?: string): ValueParser<T, false> {\n  return new ValueParser((value) => {\n    if (typeof value !== 'string' && !(value instanceof URLSearchParams)) {\n      throw createTypeError();\n    }\n\n    const params = typeof value === 'string' ? new URLSearchParams(value) : value;\n\n    return parseBySchema(schema, (field) => {\n      const paramValue = params.get(field);\n      return paramValue === null ? undefined : paramValue;\n    });\n  }, false, type);\n}\n","import { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { Chat } from '../types.js';\n\nexport const chat = json<Chat>({\n  id: number(),\n  type: string(),\n  title: string(),\n  photoUrl: {\n    type: string().optional(),\n    from: 'photo_url',\n  },\n  username: string().optional(),\n}, 'Chat')\n  .optional();\n","import { boolean } from '@/parsing/parsers/boolean.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { User } from '../types.js';\n\nexport const user = json<User>({\n  addedToAttachmentMenu: {\n    type: boolean().optional(),\n    from: 'added_to_attachment_menu',\n  },\n  allowsWriteToPm: {\n    type: boolean().optional(),\n    from: 'allows_write_to_pm',\n  },\n  firstName: {\n    type: string(),\n    from: 'first_name',\n  },\n  id: number(),\n  isBot: {\n    type: boolean().optional(),\n    from: 'is_bot',\n  },\n  isPremium: {\n    type: boolean().optional(),\n    from: 'is_premium',\n  },\n  languageCode: {\n    type: string().optional(),\n    from: 'language_code',\n  },\n  lastName: {\n    type: string().optional(),\n    from: 'last_name',\n  },\n  photoUrl: {\n    type: string().optional(),\n    from: 'photo_url',\n  },\n  username: string().optional(),\n}, 'User')\n  .optional();\n","import { date } from '@/parsing/parsers/date.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\nimport type { ValueParser } from '@/parsing/ValueParser/ValueParser.js';\n\nimport { chat } from './chat.js';\nimport { user } from './user.js';\nimport type { InitDataParsed } from '../types.js';\n\n/**\n * Returns parser used to parse init data, presented as search params.\n */\nexport function initData(): ValueParser<InitDataParsed, false> {\n  return searchParams<InitDataParsed>({\n    authDate: {\n      type: date(),\n      from: 'auth_date',\n    },\n    canSendAfter: {\n      type: number().optional(),\n      from: 'can_send_after',\n    },\n    chat,\n    chatInstance: {\n      type: string().optional(),\n      from: 'chat_instance',\n    },\n    chatType: {\n      type: string().optional(),\n      from: 'chat_type',\n    },\n    hash: string(),\n    queryId: {\n      type: string().optional(),\n      from: 'query_id',\n    },\n    receiver: user,\n    startParam: {\n      type: string().optional(),\n      from: 'start_param',\n    },\n    user,\n  }, 'InitData');\n}\n","import { toRGB } from '@/colors/toRGB.js';\nimport type { RGB } from '@/colors/types.js';\n\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport { string } from './string.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as RGB color.\n */\nexport const rgb: ValueParserGenerator<RGB> = createValueParserGenerator((value) => toRGB(string().parse(value)), 'rgb');\n","/**\n * Converts a palette key from the Telegram application to the representation used by the package.\n * @param key - palette key.\n */\nexport function keyToLocal(key: string): string {\n  return key.replace(/_[a-z]/g, (match) => match[1].toUpperCase());\n}\n\n/**\n * Converts palette key from the local representation to the representation sent from the\n * Telegram application.\n * @param key - palette key.\n */\nexport function keyToExternal(key: string): string {\n  return key.replace(/[A-Z]/g, (match) => `_${match.toLowerCase()}`);\n}\n","import { createValueParserGenerator, type ValueParserGenerator } from '@/parsing/createValueParserGenerator.js';\nimport { rgb } from '@/parsing/parsers/rgb.js';\nimport { toRecord } from '@/parsing/toRecord.js';\n\nimport { keyToLocal } from '../keys.js';\nimport type { ThemeParamsParsed } from '../types.js';\n\nexport const themeParams: ValueParserGenerator<ThemeParamsParsed> = createValueParserGenerator(\n  (value) => {\n    const rgbOptional = rgb().optional();\n\n    return Object\n      .entries(toRecord(value))\n      .reduce<ThemeParamsParsed>((acc, [k, v]) => {\n        acc[keyToLocal(k)] = rgbOptional.parse(v);\n        return acc;\n      }, {});\n  },\n  'ThemeParams',\n);\n","import { initData } from '@/components/InitData/parsers/initData.js';\nimport { themeParams } from '@/components/ThemeParams/parsing/themeParams.js';\nimport { boolean } from '@/parsing/parsers/boolean.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { LaunchParams } from './types.js';\n\n/**\n * Parses value as launch parameters.\n * @param value - value to parse.\n */\nexport function parseLaunchParams(value: unknown): LaunchParams {\n  return searchParams({\n    botInline: {\n      type: boolean().optional(),\n      from: 'tgWebAppBotInline',\n    },\n    initData: {\n      type: initData().optional(),\n      from: 'tgWebAppData',\n    },\n    initDataRaw: {\n      type: string().optional(),\n      from: 'tgWebAppData',\n    },\n    platform: {\n      type: string(),\n      from: 'tgWebAppPlatform',\n    },\n    showSettings: {\n      type: boolean().optional(),\n      from: 'tgWebAppShowSettings',\n    },\n    startParam: {\n      type: string().optional(),\n      from: 'tgWebAppStartParam',\n    },\n    themeParams: {\n      type: themeParams(),\n      from: 'tgWebAppThemeParams',\n    },\n    version: {\n      type: string(),\n      from: 'tgWebAppVersion',\n    },\n  }).parse(value);\n}\n","import { parseLaunchParams } from './parseLaunchParams.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @param urlString - URL to extract launch parameters from.\n * @returns Launch parameters from the specified URL.\n * @throws Error if function was unable to extract launch parameters from the passed URL.\n */\nexport function retrieveFromUrl(urlString: string): LaunchParams {\n  return parseLaunchParams(\n    urlString\n      // Replace everything before this first hashtag or question sign.\n      .replace(/^[^?#]*[?#]/, '')\n      // Replace all hashtags and question signs to make it look like some search params.\n      .replace(/[?#]/g, '&'),\n  );\n}\n","import { retrieveFromUrl } from './retrieveFromUrl.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters from the current window location hash.\n * @throws Error if function was unable to extract launch parameters from the window location hash.\n */\nexport function retrieveFromLocation(): LaunchParams {\n  return retrieveFromUrl(window.location.href);\n}\n","/**\n * Returns the first navigation entry from window.performance.\n * @returns First navigation entry or null, in case performance functionality is not supported\n * or navigation entry was not found.\n */\nexport function getFirstNavigationEntry(): PerformanceNavigationTiming | undefined {\n  return performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming | undefined;\n}\n","import { getFirstNavigationEntry } from '@/navigation/getFirstNavigationEntry.js';\n\nimport { retrieveFromUrl } from './retrieveFromUrl.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters based on the first navigation entry.\n * @throws Error if function was unable to extract launch parameters from the navigation entry.\n */\nexport function retrieveFromPerformance(): LaunchParams {\n  const navigationEntry = getFirstNavigationEntry();\n  if (!navigationEntry) {\n    throw new Error('Unable to get first navigation entry.');\n  }\n\n  return retrieveFromUrl(navigationEntry.name);\n}\n","import type { BackButtonState } from '@/components/BackButton/types.js';\nimport type { BiometryManagerState } from '@/components/BiometryManager/types.js';\nimport type { ClosingBehaviorState } from '@/components/ClosingBehavior/types.js';\nimport type { MainButtonState } from '@/components/MainButton/types.js';\nimport type { MiniAppState } from '@/components/MiniApp/types.js';\nimport type { SettingsButtonState } from '@/components/SettingsButton/types.js';\nimport type { ThemeParamsParsed } from '@/components/ThemeParams/types.js';\nimport type { ViewportState } from '@/components/Viewport/types.js';\n\n/**\n * Describes storage keys and according values.\n */\nexport interface StorageParams {\n  backButton: BackButtonState;\n  biometryManager: BiometryManagerState;\n  closingBehavior: ClosingBehaviorState;\n  launchParams: string;\n  mainButton: MainButtonState;\n  miniApp: MiniAppState;\n  settingsButton: SettingsButtonState;\n  themeParams: ThemeParamsParsed;\n  viewport: ViewportState;\n}\n\n/**\n * Key which could be used to store data in the storage.\n */\nexport type StorageKey = keyof StorageParams;\n\n/**\n * Type specific to the specified storage key.\n */\nexport type StorageValue<K extends StorageKey> = StorageParams[K];\n\n/**\n * Converts passed storage key to the formatted state.\n * @param key - storage key.\n */\nfunction formatKey(key: StorageKey): string {\n  return `tma.js/${key.replace(/[A-Z]/g, (m) => `-${m.toLowerCase()}`)}`;\n}\n\n/**\n * Saves value in the storage.\n * @param key - storage key.\n * @param value - storage value.\n */\nexport function setStorageValue<K extends StorageKey>(key: K, value: StorageValue<K>): void {\n  sessionStorage.setItem(formatKey(key), JSON.stringify(value));\n}\n\n/**\n * Extracts value from the storage.\n * @param key - storage key.\n */\nexport function getStorageValue<K extends StorageKey>(key: K): StorageValue<K> | undefined {\n  const value = sessionStorage.getItem(formatKey(key));\n  try {\n    return value ? JSON.parse(value) as StorageValue<K> : undefined;\n  } catch { /* empty */ }\n}\n","import { parseLaunchParams } from '@/launch-params/parseLaunchParams.js';\nimport { getStorageValue } from '@/storage/storage.js';\nimport type { LaunchParams } from '@/launch-params/types.js';\n\n/**\n * @returns Launch parameters stored in the session storage.\n * @throws Error if function was unable to extract launch parameters from the window location hash.\n */\nexport function retrieveFromStorage(): LaunchParams {\n  return parseLaunchParams(getStorageValue('launchParams') || '');\n}\n","import { keyToExternal } from '../keys.js';\nimport type { ThemeParamsParsed } from '../types.js';\n\n/**\n * Serializes theme parameters to representation sent from the Telegram application.\n */\nexport function serializeThemeParams(themeParams: ThemeParamsParsed): string {\n  return JSON.stringify(\n    Object.fromEntries(\n      Object\n        .entries(themeParams)\n        .map(([key, value]) => [keyToExternal(key), value]),\n    ),\n  );\n}\n","import { serializeThemeParams } from '@/components/ThemeParams/parsing/serializeThemeParams.js';\n\nimport type { LaunchParams } from './types.js';\n\n/**\n * Converts launch parameters to its initial representation.\n * @param value - launch parameters.\n */\nexport function serializeLaunchParams(value: LaunchParams): string {\n  const {\n    initDataRaw,\n    themeParams,\n    platform,\n    version,\n    showSettings,\n    startParam,\n    botInline,\n  } = value;\n\n  const params = new URLSearchParams();\n\n  params.set('tgWebAppPlatform', platform);\n  params.set('tgWebAppThemeParams', serializeThemeParams(themeParams));\n  params.set('tgWebAppVersion', version);\n\n  if (initDataRaw) {\n    params.set('tgWebAppData', initDataRaw);\n  }\n\n  if (startParam) {\n    params.set('tgWebAppStartParam', startParam);\n  }\n\n  if (typeof showSettings === 'boolean') {\n    params.set('tgWebAppShowSettings', showSettings ? '1' : '0');\n  }\n\n  if (typeof botInline === 'boolean') {\n    params.set('tgWebAppBotInline', botInline ? '1' : '0');\n  }\n\n  return params.toString();\n}\n","import { setStorageValue } from '@/storage/storage.js';\n\nimport { serializeLaunchParams } from './serializeLaunchParams.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * Saves specified launch parameters in the session storage.\n * @param value - launch params to save.\n */\nexport function saveToStorage(value: LaunchParams): void {\n  setStorageValue('launchParams', serializeLaunchParams(value));\n}\n","import { retrieveFromLocation } from './retrieveFromLocation.js';\nimport { retrieveFromPerformance } from './retrieveFromPerformance.js';\nimport { retrieveFromStorage } from './retrieveFromStorage.js';\nimport { saveToStorage } from './saveToStorage.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters from any known source.\n * @throws Error if extraction was unsuccessful.\n */\nexport function retrieveLaunchParams(): LaunchParams {\n  const errors: unknown[] = [];\n\n  for (const retrieve of [\n    // Try to retrieve launch parameters from the current location. This method can return\n    // nothing in case, location was changed and then page was reloaded.\n    retrieveFromLocation,\n    // Then, try using the lower level API - window.performance.\n    retrieveFromPerformance,\n    // Finally, try to extract launch parameters from the session storage.\n    retrieveFromStorage,\n  ]) {\n    try {\n      const lp = retrieve();\n      saveToStorage(lp);\n      return lp;\n    } catch (e) {\n      errors.push(e);\n    }\n  }\n\n  throw new Error('Unable to retrieve launch parameters from any known source.');\n}\n","import { getFirstNavigationEntry } from './getFirstNavigationEntry.js';\n\n/**\n * @returns True, if current page was reloaded.\n * @see https://stackoverflow.com/a/36444134/11894710\n */\nexport function isPageReload(): boolean {\n  const entry = getFirstNavigationEntry();\n  return !!(entry && entry.type === 'reload');\n}\n","import type { CreateRequestIdFn } from './types.js';\n\n/**\n * Creates function which generated request identifiers.\n */\nexport function createRequestIdGenerator(): CreateRequestIdFn {\n  let requestId = 0;\n  return () => (requestId += 1).toString();\n}\n","import { createPostEvent } from '@/bridge/methods/createPostEvent.js';\nimport { retrieveLaunchParams } from '@/launch-params/retrieveLaunchParams.js';\nimport { createSingleton } from '@/misc/createSingleton.js';\nimport { isPageReload } from '@/navigation/isPageReload.js';\nimport { createRequestIdGenerator } from '@/request-id/createRequestIdGenerator.js';\nimport type { StorageKey, StorageValue } from '@/storage/storage.js';\nimport { getStorageValue, setStorageValue } from '@/storage/storage.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\n\nimport {\n  FactoryDynamic,\n  FactoryStatic,\n  InitStaticComponentFn,\n  InitDynamicComponentFn,\n  WithOnChange,\n} from './types.js';\n\nconst [createReqId] = createSingleton(createRequestIdGenerator);\n\n/**\n * Creates a new init function based on factory, creating a component, not synchronizing its\n * state with the session storage.\n * @param factory - function creating new component instance.\n */\nexport function createComponentInitFn<R>(factory: FactoryStatic<R>): InitStaticComponentFn<R>;\n\n/**\n * Creates a new init function based on factory, creating a component, synchronizing its\n * state with the session storage.\n * @param factory - function creating new component instance.\n * @param storageKey - storage key to restore component from.\n */\nexport function createComponentInitFn<\n  SK extends StorageKey,\n  R extends WithOnChange<StorageValue<SK>> | Promise<WithOnChange<StorageValue<SK>>>,\n>(\n  storageKey: SK,\n  factory: FactoryDynamic<R, SK>,\n): InitDynamicComponentFn<R>;\n\nexport function createComponentInitFn<\n  R extends WithOnChange<StorageValue<SK>> | Promise<WithOnChange<StorageValue<SK>>>,\n  SK extends StorageKey,\n>(\n  factoryStaticOrSK: FactoryStatic<R> | SK,\n  factoryDynamic?: FactoryDynamic<R, SK>,\n): InitStaticComponentFn<R> | InitDynamicComponentFn<R> {\n  return () => {\n    const lp = retrieveLaunchParams();\n    const factoryOptions = {\n      ...lp,\n      postEvent: createPostEvent(lp.version),\n      createRequestId: createReqId(),\n    };\n\n    // In static init mode we have no reason to use the storage to restore the state. In this\n    // case we should just call the factory.\n    if (typeof factoryStaticOrSK === 'function') {\n      return factoryStaticOrSK(factoryOptions);\n    }\n\n    // Otherwise, we create a new component instance from the storage if possible and add\n    // required change listeners.\n    const [addCleanup, cleanup, cleanedUp] = createCleanup();\n\n    const result = factoryDynamic!({\n      ...factoryOptions,\n      // State should only be passed only in case, current page was reloaded. If we don't add\n      // this check, state restoration will work improperly in the web version of Telegram,\n      // when we are always working in the same \"session\" (tab).\n      state: isPageReload() ? getStorageValue(factoryStaticOrSK) : undefined,\n      addCleanup,\n    });\n\n    const bindChange = (value: WithOnChange<StorageValue<SK>>) => {\n      if (!cleanedUp) {\n        addCleanup(\n          value.on('change', (state) => {\n            setStorageValue(factoryStaticOrSK, state);\n          }),\n        );\n      }\n      return value;\n    };\n\n    return [\n      result instanceof Promise ? result.then(bindChange) : bindChange(result),\n      cleanup,\n    ] as unknown as R;\n  };\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { BackButton } from './BackButton.js';\n\n/**\n * @returns A new initialized instance of the `BackButton` class.\n * @see BackButton\n */\nexport const initBackButton = createComponentInitFn('backButton', ({\n  postEvent,\n  version,\n  state = { isVisible: false },\n}) => new BackButton(state.isVisible, version, postEvent));\n","import { WithSupportsAndStateUtils } from '@/classes/WithSupportsAndStateUtils.js';\nimport type { StateEvents } from '@/classes/State/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\n\ntype Emitter<StateShape extends object> = EventEmitter<StateEvents<StateShape>>;\n\nexport class WithSupportsAndTrackableState<StateShape extends object, SupportsMethod extends string>\n  extends WithSupportsAndStateUtils<StateShape, SupportsMethod> {\n  /**\n   * Adds a new event listener.\n   */\n  on: Emitter<StateShape>['on'] = this.state.on.bind(this.state);\n\n  /**\n   * Removes the event listener.\n   */\n  off: Emitter<StateShape>['off'] = this.state.off.bind(this.state);\n}\n","import type { BiometryType, MiniAppsEventPayload } from '@/bridge/events/types.js';\n\nexport interface FormatBiometryInfoResult {\n  /**\n   * Shows whether biometry is available.\n   */\n  available: boolean;\n  /**\n   * Shows whether permission to use biometrics has been requested.\n   */\n  accessRequested: boolean;\n  /**\n   * Shows whether permission to use biometrics has been granted.\n   */\n  accessGranted: boolean;\n  /**\n   * A unique device identifier that can be used to match the token to the device.\n   */\n  deviceId: string;\n  /**\n   * Show whether local storage contains previously saved token.\n   */\n  tokenSaved: boolean;\n  /**\n   * The type of biometrics currently available on the device.\n   */\n  type: BiometryType;\n}\n\n/**\n * Converts `biometry_info_received` to some common shape.\n * @param event - event payload.\n * @see biometry_info_received\n */\nexport function formatEvent(\n  event: MiniAppsEventPayload<'biometry_info_received'>,\n): FormatBiometryInfoResult {\n  const data = event.available ? event : {\n    available: false,\n    device_id: '',\n    token_saved: false,\n    access_requested: false,\n    access_granted: false,\n    type: '',\n  };\n\n  return {\n    available: true,\n    type: data.type,\n    deviceId: data.device_id,\n    tokenSaved: data.token_saved,\n    accessRequested: data.access_requested,\n    accessGranted: data.access_granted,\n  };\n}\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport { formatEvent } from '@/components/BiometryManager/formatEvent.js';\nimport type { BiometryType } from '@/bridge/events/types.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type {\n  BiometryManagerAuthenticateOptions,\n  BiometryManagerProps,\n  BiometryManagerRequestAccessOptions,\n  BiometryManagerState,\n  BiometryManagerUpdateTokenOptions,\n} from '@/components/BiometryManager/types.js';\n\nexport class BiometryManager extends WithSupportsAndTrackableState<BiometryManagerState,\n  | 'auth'\n  | 'openSettings'\n  | 'requestAccess'\n  | 'updateToken'\n> {\n  private readonly postEvent: PostEvent;\n\n  private authPromise?: Promise<string | undefined>;\n\n  private accessPromise?: Promise<boolean>;\n\n  constructor({ postEvent, version, ...rest }: BiometryManagerProps) {\n    super(rest, version, {\n      auth: 'web_app_biometry_request_auth',\n      openSettings: 'web_app_biometry_open_settings',\n      requestAccess: 'web_app_biometry_request_access',\n      updateToken: 'web_app_biometry_update_token',\n    });\n    this.postEvent = postEvent;\n  }\n\n  /**\n   * Shows whether biometry is available.\n   */\n  get available(): boolean {\n    return this.get('available');\n  }\n\n  /**\n   * Shows whether permission to use biometrics has been granted.\n   */\n  get accessGranted(): boolean {\n    return this.get('accessGranted');\n  }\n\n  /**\n   * Shows whether if permission to use biometrics has been requested.\n   */\n  get accessRequested(): boolean {\n    return this.get('accessRequested');\n  }\n\n  /**\n   * Authenticates the user using biometrics.\n   * @param options - method options.\n   * @since 7.2\n   * @returns Token from the local secure storage, if authentication was successful.\n   */\n  async authenticate({\n    reason,\n    ...rest\n  }: BiometryManagerAuthenticateOptions): Promise<string | undefined> {\n    if (!this.authPromise) {\n      this.authPromise = request({\n        ...rest,\n        method: 'web_app_biometry_request_auth',\n        event: 'biometry_auth_requested',\n        postEvent: this.postEvent,\n        params: {\n          // TODO: Check if reason is empty works fine.\n          reason: (reason || '').trim(),\n        },\n      })\n        .then(({ token }) => token)\n        .finally(() => this.authPromise = undefined);\n    }\n    return this.authPromise;\n  }\n\n  /**\n   * A unique device identifier that can be used to match the token to the device.\n   */\n  get deviceId(): string {\n    return this.get('deviceId');\n  }\n\n  /**\n   * Opens the biometric access settings for bots. Useful when you need to request biometrics\n   * access to users who haven't granted it yet.\n   *\n   * _Note that this method can be called only in response to user interaction with the Mini App\n   * interface (e.g. a click inside the Mini App or on the main button)_.\n   * @since 7.2\n   */\n  openSettings(): void {\n    this.postEvent('web_app_biometry_open_settings');\n  }\n\n  /**\n   * Requests permission to use biometrics.\n   * @since 7.2\n   * @returns Promise with true, if access was granted.\n   */\n  requestAccess({ reason, ...rest }: BiometryManagerRequestAccessOptions = {}): Promise<boolean> {\n    if (!this.accessPromise) {\n      this.accessPromise = request({\n        ...rest,\n        postEvent: this.postEvent,\n        method: 'web_app_biometry_request_access',\n        event: 'biometry_info_received',\n        params: { reason: reason || '' },\n      })\n        .then((response) => {\n          // Actualize local state.\n          const formatted = formatEvent(response);\n          this.set(formatted);\n\n          return formatted.accessGranted;\n        })\n        .finally(() => this.accessPromise = undefined);\n    }\n    return this.accessPromise;\n  }\n\n  /**\n   * The type of biometrics currently available on the device.\n   */\n  get biometryType(): BiometryType | undefined {\n    return this.get('biometryType');\n  }\n\n  /**\n   * Shows whether token was saved previously in the local secure storage.\n   */\n  get tokenSaved(): boolean {\n    return this.get('tokenSaved');\n  }\n\n  /**\n   * Updates the biometric token in a secure storage on the device.\n   * @returns Promise with `true`, if token was updated.\n   */\n  async updateToken({ token, ...rest }: BiometryManagerUpdateTokenOptions = {}): Promise<boolean> {\n    return ['removed', 'updated'].includes(\n      (\n        await request({\n          ...rest,\n          postEvent: this.postEvent,\n          method: 'web_app_biometry_update_token',\n          event: 'biometry_token_updated',\n          params: { token: token || '' },\n        })\n      ).status,\n    );\n  }\n}\n","import { request } from '@/bridge/request.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { formatEvent } from './formatEvent.js';\nimport type { FormatBiometryInfoResult } from './formatEvent.js';\n\n/**\n * Requests biometry information.\n * @param options - additional execution options.\n */\nexport async function requestBiometryInfo(\n  options?: ExecuteWithOptions,\n): Promise<FormatBiometryInfoResult> {\n  return formatEvent(\n    await request({\n      ...(options || {}),\n      method: 'web_app_biometry_get_info',\n      event: 'biometry_info_received',\n    }),\n  );\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\nimport { supports } from '@/supports/supports.js';\n\nimport { BiometryManager } from './BiometryManager.js';\nimport { requestBiometryInfo } from './requestBiometryInfo.js';\n\n/**\n * @returns A promise with a new initialized instance of the `BiometryManager` class.\n * @see BiometryManager\n */\nexport const initBiometryManager = createComponentInitFn(\n  'biometryManager',\n  async ({ postEvent, version, state }) => {\n    return new BiometryManager({\n      ...(state || supports('web_app_biometry_get_info', version)\n        ? state || await requestBiometryInfo({ timeout: 1000 })\n        : {\n          available: false,\n          accessGranted: false,\n          accessRequested: false,\n          tokenSaved: false,\n          deviceId: '',\n        }),\n      version,\n      postEvent,\n    });\n  },\n);\n","import { WithStateUtils } from '@/classes/WithStateUtils.js';\nimport type { StateEvents } from '@/classes/State/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\n\ntype Emitter<StateShape extends object> = EventEmitter<StateEvents<StateShape>>;\n\nexport class WithTrackableState<StateShape extends object>\n  extends WithStateUtils<StateShape> {\n  /**\n   * Adds a new event listener.\n   */\n  on: Emitter<StateShape>['on'] = this.state.on.bind(this.state);\n\n  /**\n   * Removes the event listener.\n   */\n  off: Emitter<StateShape>['off'] = this.state.off.bind(this.state);\n}\n","import { WithTrackableState } from '@/classes/WithTrackableState.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { ClosingBehaviorState } from '@/components/ClosingBehavior/types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/closing-behavior\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/closing-behavior\n */\nexport class ClosingBehavior extends WithTrackableState<ClosingBehaviorState> {\n  constructor(isConfirmationNeeded: boolean, private readonly postEvent: PostEvent) {\n    super({ isConfirmationNeeded });\n  }\n\n  private set isConfirmationNeeded(value: boolean) {\n    this.set('isConfirmationNeeded', value);\n    this.postEvent('web_app_setup_closing_behavior', { need_confirmation: value });\n  }\n\n  /**\n   * True, if the confirmation dialog should be shown while the user is trying to close\n   * the Mini App.\n   */\n  get isConfirmationNeeded(): boolean {\n    return this.get('isConfirmationNeeded');\n  }\n\n  /**\n   * Disables the confirmation dialog when closing the Mini App.\n   */\n  disableConfirmation(): void {\n    this.isConfirmationNeeded = false;\n  }\n\n  /**\n   * Enables the confirmation dialog when closing the Mini App.\n   */\n  enableConfirmation(): void {\n    this.isConfirmationNeeded = true;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { ClosingBehavior } from './ClosingBehavior.js';\n\n/**\n * @returns A new initialized instance of the `ClosingBehavior` class.\n * @see ClosingBehavior\n */\nexport const initClosingBehavior = createComponentInitFn(\n  'closingBehavior',\n  ({\n    postEvent,\n    state = { isConfirmationNeeded: false },\n  }) => new ClosingBehavior(state.isConfirmationNeeded, postEvent),\n);\n","import { createSupportsFn } from '@/supports/createSupportsFn.js';\nimport type { MiniAppsMethodName } from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport class WithSupports<SupportsMethod extends string> {\n  constructor(\n    /**\n     * Mini Apps version.\n     */\n    version: Version,\n    /**\n     * Supports method schema.\n     */\n    supportsSchema: Record<SupportsMethod, MiniAppsMethodName>,\n  ) {\n    this.supports = createSupportsFn(version, supportsSchema);\n  }\n\n  /**\n   * @returns True, if specified method is supported by the current component.\n   */\n  supports: SupportsFn<SupportsMethod>;\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { ArrayParserOfResult } from '../ArrayParser/types.js';\nimport type { AnyParser, Parser } from '../types.js';\nimport type { ValueParserParseResult } from '../ValueParser/types.js';\n\n/**\n * Parses incoming value as array.\n * @param value - value to parse.\n */\nfunction parseArray(value: unknown): unknown[] {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    try {\n      const json = JSON.parse(value);\n\n      if (Array.isArray(json)) {\n        return json;\n      }\n    } catch {}\n  }\n  throw createTypeError();\n}\n\nexport class ArrayParser<ItemType, IsOptional extends boolean>\n  extends ValueParser<unknown[], IsOptional> {\n  private itemParser: Parser<any>;\n\n  constructor(\n    itemParser: AnyParser<ItemType>,\n    isOptional: IsOptional,\n    type?: string,\n  ) {\n    super(parseArray, isOptional, type);\n\n    this.itemParser = typeof itemParser === 'function'\n      ? itemParser\n      : itemParser.parse.bind(itemParser);\n  }\n\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  override parse(value: unknown): ValueParserParseResult<ItemType[], IsOptional> {\n    const arr = super.parse(value);\n    return arr === undefined ? arr : arr.map(this.itemParser);\n  }\n\n  of<Item>(itemParser: AnyParser<Item>): ArrayParserOfResult<this, Item, IsOptional> {\n    this.itemParser = typeof itemParser === 'function'\n      ? itemParser\n      : itemParser.parse.bind(itemParser);\n\n    return this as ArrayParserOfResult<this, Item, IsOptional>;\n  }\n}\n","import { ArrayParser } from '@/parsing/ArrayParser/ArrayParser.js';\n\n/**\n * Parses incoming value as an array.\n * @param parserTypeName - parser type name.\n */\nexport function array(parserTypeName?: string): ArrayParser<unknown, false> {\n  return new ArrayParser((value) => value, false, parserTypeName);\n}\n","import { invokeCustomMethod } from '@/bridge/invokeCustomMethod.js';\nimport { WithSupports } from '@/classes/WithSupports.js';\nimport { array } from '@/parsing/parsers/array.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { string } from '@/parsing/parsers/string.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { CreateRequestIdFn } from '@/request-id/types.js';\nimport type { ExecuteWithTimeout } from '@/types/methods.js';\nimport type { Version } from '@/version/types.js';\n\nfunction objectFromKeys<K extends string, V>(keys: K[], value: V): Record<K, V> {\n  return Object.fromEntries(keys.map((k) => [k, value])) as Record<K, V>;\n}\n\n// TODO: Usage.\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/cloud-storage\n */\nexport class CloudStorage extends WithSupports<'delete' | 'get' | 'getKeys' | 'set'> {\n  constructor(\n    version: Version,\n    private readonly createRequestId: CreateRequestIdFn,\n    private readonly postEvent: PostEvent,\n  ) {\n    super(version, {\n      delete: 'web_app_invoke_custom_method',\n      get: 'web_app_invoke_custom_method',\n      getKeys: 'web_app_invoke_custom_method',\n      set: 'web_app_invoke_custom_method',\n    });\n  }\n\n  /**\n   * Deletes specified key or keys from the cloud storage.\n   * @param keyOrKeys - key or keys to delete.\n   * @param options - request execution options.\n   */\n  async delete(keyOrKeys: string | string[], options: ExecuteWithTimeout = {}): Promise<void> {\n    const keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys];\n    if (keys.length) {\n      await invokeCustomMethod(\n        'deleteStorageValues',\n        { keys },\n        this.createRequestId(),\n        { ...options, postEvent: this.postEvent },\n      );\n    }\n  }\n\n  /**\n   * Returns list of all keys presented in the cloud storage.\n   * @param options - request execution options.\n   */\n  async getKeys(options: ExecuteWithTimeout = {}): Promise<string[]> {\n    return array().of(string()).parse(\n      await invokeCustomMethod(\n        'getStorageKeys',\n        {},\n        this.createRequestId(),\n        { ...options, postEvent: this.postEvent },\n      ),\n    );\n  }\n\n  /**\n   * Returns map, where key is one of the specified in keys argument, and value is according\n   * storage value.\n   * @param keys - keys list.\n   * @param options - request execution options.\n   */\n  get<K extends string>(keys: K[], options?: ExecuteWithTimeout): Promise<Record<K, string>>;\n\n  /**\n   * Returns value of the specified key.\n   * @param key - cloud storage key.\n   * @param options - request execution options.\n   * @return Value of the specified key. In case, key was not created previously, function\n   * will return empty string.\n   */\n  get(key: string, options?: ExecuteWithTimeout): Promise<string>;\n\n  async get(\n    keyOrKeys: string | string[],\n    options: ExecuteWithTimeout = {},\n  ): Promise<string | Record<string, string>> {\n    const keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys];\n    if (!keys.length) {\n      return objectFromKeys(keys, '');\n    }\n\n    const data = await invokeCustomMethod(\n      'getStorageValues',\n      { keys },\n      this.createRequestId(),\n      { ...options, postEvent: this.postEvent },\n    );\n    const result = json(objectFromKeys(keys, string()), 'CloudStorageData').parse(data);\n\n    return Array.isArray(keyOrKeys) ? result : result[keyOrKeys];\n  }\n\n  /**\n   * Saves specified value by key.\n   * @param key - storage key.\n   * @param value - storage value.\n   * @param options - request execution options.\n   */\n  async set(key: string, value: string, options: ExecuteWithTimeout = {}): Promise<void> {\n    await invokeCustomMethod(\n      'saveStorageValue',\n      { key, value },\n      this.createRequestId(),\n      { ...options, postEvent: this.postEvent },\n    );\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { CloudStorage } from './CloudStorage.js';\n\n/**\n * @returns A new initialized instance of the `CloudStorage` class.\n * @see CloudStorage\n */\nexport const initCloudStorage = createComponentInitFn(\n  ({ createRequestId, postEvent, version }) => {\n    return new CloudStorage(version, createRequestId, postEvent);\n  },\n);\n","import { WithSupports } from '@/classes/WithSupports.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type {\n  ImpactHapticFeedbackStyle,\n  NotificationHapticFeedbackType,\n} from '@/bridge/methods/types/haptic.js';\nimport type { Version } from '@/version/types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/haptic-feedback\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/haptic-feedback\n */\nexport class HapticFeedback\n  extends WithSupports<'impactOccurred' | 'notificationOccurred' | 'selectionChanged'> {\n  constructor(version: Version, private readonly postEvent: PostEvent) {\n    super(version, {\n      impactOccurred: 'web_app_trigger_haptic_feedback',\n      notificationOccurred: 'web_app_trigger_haptic_feedback',\n      selectionChanged: 'web_app_trigger_haptic_feedback',\n    });\n  }\n\n  /**\n   * A method tells that an impact occurred. The Telegram app may play the\n   * appropriate haptics based on style value passed.\n   * @param style - impact style.\n   */\n  impactOccurred(style: ImpactHapticFeedbackStyle): void {\n    this.postEvent('web_app_trigger_haptic_feedback', {\n      type: 'impact',\n      impact_style: style,\n    });\n  }\n\n  /**\n   * A method tells that a task or action has succeeded, failed, or produced\n   * a warning. The Telegram app may play the appropriate haptics based on\n   * type value passed.\n   * @param type - notification type.\n   */\n  notificationOccurred(type: NotificationHapticFeedbackType): void {\n    this.postEvent('web_app_trigger_haptic_feedback', {\n      type: 'notification',\n      notification_type: type,\n    });\n  }\n\n  /**\n   * A method tells that the user has changed a selection. The Telegram app\n   * may play the appropriate haptics.\n   *\n   * Do not use this feedback when the user makes or confirms a selection;\n   * use it only when the selection changes.\n   */\n  selectionChanged(): void {\n    this.postEvent('web_app_trigger_haptic_feedback', { type: 'selection_change' });\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { HapticFeedback } from './HapticFeedback.js';\n\n/**\n * @returns A new initialized instance of the `HapticFeedback` class.\n * @see HapticFeedback\n */\nexport const initHapticFeedback = createComponentInitFn(\n  ({ version, postEvent }) => new HapticFeedback(version, postEvent),\n);\n","import type {\n  Chat,\n  ChatType,\n  InitDataParsed,\n  User,\n} from './types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/init-data\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/init-data\n */\nexport class InitData {\n  constructor(private readonly initData: InitDataParsed) {\n  }\n\n  /**\n   * @see InitDataParsed.authDate\n   */\n  get authDate(): Date {\n    return this.initData.authDate;\n  }\n\n  /**\n   * @see InitDataParsed.canSendAfter\n   */\n  get canSendAfter(): number | undefined {\n    return this.initData.canSendAfter;\n  }\n\n  /**\n   * Date after which it is allowed to call\n   * the [answerWebAppQuery](https://core.telegram.org/bots/api#answerwebappquery) method.\n   */\n  get canSendAfterDate(): Date | undefined {\n    const { canSendAfter } = this;\n\n    return canSendAfter\n      ? new Date(this.authDate.getTime() + canSendAfter * 1000)\n      : undefined;\n  }\n\n  /**\n   * @see InitDataParsed.chat\n   */\n  get chat(): Chat | undefined {\n    return this.initData.chat;\n  }\n\n  /**\n   * @see InitDataParsed.chatType\n   */\n  get chatType(): ChatType | undefined {\n    return this.initData.chatType;\n  }\n\n  /**\n   * @see InitDataParsed.chatInstance\n   */\n  get chatInstance(): string | undefined {\n    return this.initData.chatInstance;\n  }\n\n  /**\n   * @see InitDataParsed.hash\n   */\n  get hash(): string {\n    return this.initData.hash;\n  }\n\n  /**\n   * @see InitDataParsed.queryId\n   */\n  get queryId(): string | undefined {\n    return this.initData.queryId;\n  }\n\n  /**\n   * @see InitDataParsed.receiver\n   */\n  get receiver(): User | undefined {\n    return this.initData.receiver;\n  }\n\n  /**\n   * @see InitDataParsed.startParam\n   */\n  get startParam(): string | undefined {\n    return this.initData.startParam;\n  }\n\n  /**\n   * @see InitDataParsed.user\n   */\n  get user(): User | undefined {\n    return this.initData.user;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { InitData } from './InitData.js';\n\n/**\n * @returns A new initialized instance of the `InitData` class or undefined.\n * @see InitData\n */\nexport const initInitData = createComponentInitFn(\n  ({ initData }) => (initData ? new InitData(initData) : undefined),\n);\n","import { initData } from './parsers/initData.js';\nimport type { InitDataParsed } from './types.js';\n\n/**\n * Parses incoming value as init data.\n * @param value - value to parse.\n */\nexport function parseInitData(value: unknown): InitDataParsed {\n  return initData().parse(value);\n}\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport type { InvoiceStatus } from '@/bridge/events/types.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { Version } from '@/version/types.js';\n\nimport type { InvoiceState } from './types.js';\n\n// TODO: Usage.\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/invoice\n */\nexport class Invoice extends WithSupportsAndTrackableState<InvoiceState, 'open'> {\n  constructor(\n    isOpened: boolean,\n    version: Version,\n    private readonly postEvent: PostEvent,\n  ) {\n    super({ isOpened }, version, { open: 'web_app_open_invoice' });\n  }\n\n  private set isOpened(value) {\n    this.set('isOpened', value);\n  }\n\n  /**\n   * True if invoice is currently opened.\n   */\n  get isOpened(): boolean {\n    return this.get('isOpened');\n  }\n\n  /**\n   * Opens an invoice using its slug.\n   * @param slug - invoice slug.\n   * @throws {Error} Invoice is already opened.\n   */\n  open(slug: string): Promise<InvoiceStatus>;\n\n  /**\n   * Opens an invoice using its url. It expects passing link in full format, with hostname \"t.me\".\n   * @param url - invoice URL.\n   * @param type - value type.\n   * @throws {Error} Invoice is already opened.\n   */\n  open(url: string, type: 'url'): Promise<InvoiceStatus>;\n\n  async open(urlOrSlug: string, type?: 'url'): Promise<InvoiceStatus> {\n    if (this.isOpened) {\n      throw new Error('Invoice is already opened');\n    }\n\n    let slug: string;\n    if (!type) {\n      slug = urlOrSlug;\n    } else {\n      const { hostname, pathname } = new URL(urlOrSlug, window.location.href);\n      if (hostname !== 't.me') {\n        throw new Error(`Incorrect hostname: ${hostname}`);\n      }\n\n      // Valid examples:\n      // \"/invoice/my-slug\"\n      // \"/$my-slug\"\n      const match = pathname.match(/^\\/(\\$|invoice\\/)([A-Za-z0-9\\-_=]+)$/);\n      if (!match) {\n        throw new Error('Link pathname has incorrect format. Expected to receive \"/invoice/{slug}\" or \"/${slug}\"');\n      }\n      [, , slug] = match;\n    }\n\n    this.isOpened = true;\n\n    try {\n      const result = await request({\n        method: 'web_app_open_invoice',\n        event: 'invoice_closed',\n        params: { slug },\n        postEvent: this.postEvent,\n        capture(data) {\n          return slug === data.slug;\n        },\n      });\n\n      return result.status;\n    } finally {\n      this.isOpened = false;\n    }\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { Invoice } from './Invoice.js';\n\n/**\n * @returns A new initialized instance of the `Invoice` class.\n * @see Invoice\n */\nexport const initInvoice = createComponentInitFn(\n  ({ version, postEvent }) => new Invoice(false, version, postEvent),\n);\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { WithStateUtils } from '@/classes/WithStateUtils.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { RGB } from '@/colors/types.js';\nimport type {\n  MainButtonEvents,\n  MainButtonParams,\n  MainButtonProps,\n  MainButtonState,\n} from '@/components/MainButton/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\n\ntype Emitter = EventEmitter<MainButtonEvents>;\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/main-button\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/main-button\n */\nexport class MainButton extends WithStateUtils<MainButtonState> {\n  private readonly postEvent: PostEvent;\n\n  constructor({ postEvent, ...rest }: MainButtonProps) {\n    super(rest);\n    this.postEvent = postEvent;\n  }\n\n  /**\n   * The MainButton background color.\n   */\n  get bgColor(): RGB {\n    return this.get('bgColor');\n  }\n\n  /**\n   * Sends current local state to the Telegram application.\n   */\n  private commit(): void {\n    // We should not commit changes until payload is correct. We could\n    // have some invalid values in case, button instance was created\n    // with empty values. Otherwise, an unexpected behavior could be received.\n    if (this.text === '') {\n      return;\n    }\n\n    this.postEvent('web_app_setup_main_button', {\n      is_visible: this.isVisible,\n      is_active: this.isEnabled,\n      is_progress_visible: this.isLoaderVisible,\n      text: this.text,\n      color: this.bgColor,\n      text_color: this.textColor,\n    });\n  }\n\n  /**\n   * Disables the MainButton.\n   * @see Does not work on Android: https://github.com/Telegram-Mini-Apps/issues/issues/1\n   */\n  disable(): this {\n    this.isEnabled = false;\n    return this;\n  }\n\n  /**\n   * Enables the MainButton.\n   */\n  enable(): this {\n    this.isEnabled = true;\n    return this;\n  }\n\n  /**\n   * Hides the MainButton.\n   */\n  hide(): this {\n    this.isVisible = false;\n    return this;\n  }\n\n  /**\n   * Hides the MainButton loading indicator.\n   */\n  hideLoader(): this {\n    this.isLoaderVisible = false;\n    return this;\n  }\n\n  private set isEnabled(isEnabled: boolean) {\n    this.setParams({ isEnabled });\n  }\n\n  /**\n   * True if the MainButton is enabled.\n   */\n  get isEnabled(): boolean {\n    return this.get('isEnabled');\n  }\n\n  private set isLoaderVisible(isLoaderVisible: boolean) {\n    this.setParams({ isLoaderVisible });\n  }\n\n  /**\n   * True if the MainButton loader is visible.\n   */\n  get isLoaderVisible(): boolean {\n    return this.get('isLoaderVisible');\n  }\n\n  private set isVisible(isVisible: boolean) {\n    this.setParams({ isVisible });\n  }\n\n  /**\n   * True if the MainButton is visible.\n   */\n  get isVisible(): boolean {\n    return this.get('isVisible');\n  }\n\n  /**\n   * Adds a new event listener.\n   * @param event - event to listen.\n   * @param listener - listener to add.\n   */\n  on: Emitter['on'] = (event, listener) => (\n    event === 'click'\n      ? on('main_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.on(event, listener as any)\n  );\n\n  /**\n   * Removes the event listener.\n   * @param event - event to listen.\n   * @param listener - listener to remove.\n   */\n  off: Emitter['off'] = (event, listener) => (\n    event === 'click'\n      ? off('main_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.off(event, listener as any)\n  );\n\n  /**\n   * Shows the MainButton.\n   *\n   * Note that opening the Mini App from the attachment menu hides the main button until the\n   * user interacts with the Mini App interface.\n   */\n  show(): this {\n    this.isVisible = true;\n    return this;\n  }\n\n  /**\n   * Shows a loading indicator on the Main Button.\n   */\n  showLoader(): this {\n    this.isLoaderVisible = true;\n    return this;\n  }\n\n  /**\n   * Sets a new MainButton text. Minimal length for the text is 1 symbol, and maximum is 64 symbols.\n   * @param text - a new text.\n   */\n  setText(text: string): this {\n    return this.setParams({ text });\n  }\n\n  /**\n   * Sets a new Main Button text color.\n   * @param textColor - new text color.\n   */\n  setTextColor(textColor: RGB): this {\n    return this.setParams({ textColor });\n  }\n\n  /**\n   * Updates current Main Button color.\n   * @param bgColor - color to set.\n   */\n  setBgColor(bgColor: RGB): this {\n    return this.setParams({ bgColor });\n  }\n\n  /**\n   * Allows setting multiple Main Button parameters.\n   * @param params - Main Button parameters.\n   */\n  setParams(params: Partial<MainButtonParams>): this {\n    this.set(params);\n    this.commit();\n    return this;\n  }\n\n  /**\n   * The MainButton text.\n   */\n  get text(): string {\n    return this.get('text');\n  }\n\n  /**\n   * The MainButton text color.\n   */\n  get textColor(): RGB {\n    return this.get('textColor');\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { MainButton } from './MainButton.js';\n\n/**\n * @returns A new initialized instance of the `MainButton` class.\n * @see MainButton\n */\nexport const initMainButton = createComponentInitFn(\n  'mainButton',\n  ({\n    postEvent,\n    themeParams,\n    state = {\n      isVisible: false,\n      isEnabled: false,\n      text: '',\n      isLoaderVisible: false,\n      textColor: themeParams.buttonTextColor || '#ffffff',\n      bgColor: themeParams.buttonColor || '#000000',\n    },\n  }) => new MainButton({ ...state, postEvent }),\n);\n","import { date } from '@/parsing/parsers/date.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\nimport type { ValueParser } from '@/parsing/ValueParser/ValueParser.js';\n\nimport type { RequestedContact } from '../types.js';\n\n/**\n * Returns function which parses incoming value as a contact information.\n */\nexport function contact(): ValueParser<RequestedContact, false> {\n  return searchParams({\n    contact: json({\n      userId: {\n        type: number(),\n        from: 'user_id',\n      },\n      phoneNumber: {\n        type: string(),\n        from: 'phone_number',\n      },\n      firstName: {\n        type: string(),\n        from: 'first_name',\n      },\n      lastName: {\n        type: string().optional(),\n        from: 'last_name',\n      },\n    }),\n    authDate: {\n      type: date(),\n      from: 'auth_date',\n    },\n    hash: string(),\n  }, 'RequestedContact');\n}\n","import { supports } from '@/supports/supports.js';\nimport type {\n  MiniAppsMethodVersionedParams,\n  MiniAppsMethodWithVersionedParams,\n} from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\ntype HasCheckSupportMethodTuple = {\n  [M in MiniAppsMethodWithVersionedParams]: [M, MiniAppsMethodVersionedParams<M>]\n}[MiniAppsMethodWithVersionedParams];\n\n/**\n * Returns function, which accepts predefined method name and checks if it is supported\n * via passed schema and version.\n * @param schema - object which contains methods names and TWA methods with specified parameter\n * as a dependency.\n * @param version - platform version.\n */\nexport function createSupportsParamFn<Method extends string>(\n  version: Version,\n  schema: Record<Method, HasCheckSupportMethodTuple>,\n): SupportsFn<Method> {\n  return (method) => {\n    const [tmaMethod, param] = schema[method];\n\n    return supports(tmaMethod, param, version);\n  };\n}\n","/**\n * Awaits for specified amount of time.\n * @param duration - duration in ms to await.\n */\nexport function sleep(duration: number): Promise<void> {\n  return new Promise((res) => {\n    setTimeout(res, duration);\n  });\n}\n","import { invokeCustomMethod } from '@/bridge/invokeCustomMethod.js';\nimport { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport { isColorDark } from '@/colors/isColorDark.js';\nimport { isRGB } from '@/colors/isRGB.js';\nimport { contact } from '@/components/MiniApp/parsing/contact.js';\nimport { createSupportsParamFn } from '@/supports/createSupportsParamFn.js';\nimport { createTimeoutError } from '@/timeout/createTimeoutError.js';\nimport { sleep } from '@/timeout/sleep.js';\nimport { withTimeout } from '@/timeout/withTimeout.js';\nimport type { PhoneRequestedStatus, WriteAccessRequestedStatus } from '@/bridge/events/types.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { SwitchInlineQueryChatType } from '@/bridge/methods/types/methods.js';\nimport type { RGB } from '@/colors/types.js';\nimport type {\n  MiniAppHeaderColor,\n  MiniAppProps,\n  MiniAppState,\n  RequestedContact,\n} from '@/components/MiniApp/types.js';\nimport type { CreateRequestIdFn } from '@/request-id/types.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { ExecuteWithTimeout } from '@/types/methods.js';\n\n/**\n * Provides common Mini Apps functionality not covered by other system components.\n */\nexport class MiniApp extends WithSupportsAndTrackableState<\n  MiniAppState,\n  | 'requestPhoneAccess'\n  | 'requestWriteAccess'\n  | 'switchInlineQuery'\n  | 'setHeaderColor'\n  | 'setBackgroundColor'\n> {\n  private readonly botInline: boolean;\n\n  private readonly postEvent: PostEvent;\n\n  private readonly createRequestId: CreateRequestIdFn;\n\n  private requestPhoneAccessPromise: Promise<PhoneRequestedStatus> | undefined;\n\n  private requestWriteAccessPromise: Promise<WriteAccessRequestedStatus> | undefined;\n\n  constructor({ postEvent, createRequestId, version, botInline, ...rest }: MiniAppProps) {\n    super(rest, version, {\n      requestPhoneAccess: 'web_app_request_phone',\n      requestWriteAccess: 'web_app_request_write_access',\n      switchInlineQuery: 'web_app_switch_inline_query',\n      setHeaderColor: 'web_app_set_header_color',\n      setBackgroundColor: 'web_app_set_background_color',\n    });\n\n    this.createRequestId = createRequestId;\n    this.postEvent = postEvent;\n    this.botInline = botInline;\n\n    const supportsOriginal = this.supports.bind(this);\n    this.supports = (method) => {\n      if (!supportsOriginal(method)) {\n        return false;\n      }\n\n      // web_app_switch_inline_query requires a Mini App to be in inline mode, that's why we\n      // add 1 more check here.\n      return method !== 'switchInlineQuery' || botInline;\n    };\n\n    this.supportsParam = createSupportsParamFn(version, {\n      'setHeaderColor.color': ['web_app_set_header_color', 'color'],\n    });\n  }\n\n  /**\n   * Attempts to get requested contact.\n   * @param timeout - request timeout.\n   */\n  private async getRequestedContact({\n    timeout = 10000,\n  }: ExecuteWithTimeout = {}): Promise<RequestedContact> {\n    return contact().parse(\n      await invokeCustomMethod(\n        'getRequestedContact',\n        {},\n        this.createRequestId(),\n        { postEvent: this.postEvent, timeout },\n      ),\n    );\n  }\n\n  /**\n   * The Mini App background color.\n   * @example \"#ffaabb\"\n   */\n  get bgColor(): RGB {\n    return this.get('bgColor');\n  }\n\n  /**\n   * Closes the Mini App.\n   * @param returnBack - should the application be wrapped into the bottom bar.\n   */\n  close(returnBack?: boolean): void {\n    this.postEvent('web_app_close', { return_back: returnBack });\n  }\n\n  /**\n   * The Mini App header color.\n   * @example \"#ffaabb\"\n   * @example \"bg_color\"\n   */\n  get headerColor(): MiniAppHeaderColor {\n    return this.get('headerColor');\n  }\n\n  /**\n   * True if the Mini App is currently launched in bot inline mode.\n   */\n  get isBotInline(): boolean {\n    return this.botInline;\n  }\n\n  /**\n   * True if the current Mini App background color is recognized as dark.\n   */\n  get isDark(): boolean {\n    return isColorDark(this.bgColor);\n  }\n\n  /**\n   * Informs the Telegram app that the Mini App is ready to be displayed.\n   *\n   * It is recommended to call this method as early as possible, as soon as all essential\n   * interface elements loaded. Once this method called, the loading placeholder is hidden\n   * and the Mini App shown.\n   *\n   * If the method not called, the placeholder will be hidden only when the page fully loaded.\n   */\n  ready(): void {\n    this.postEvent('web_app_ready');\n  }\n\n  /**\n   * Requests current user contact information. In contrary to requestPhoneAccess, this method\n   * returns promise with contact information that rejects in case, user denied access, or request\n   * failed.\n   * @param options - additional options.\n   */\n  async requestContact({ timeout = 5000 }: ExecuteWithTimeout = {}): Promise<RequestedContact> {\n    // First of all, let's try to get the requested contact. Probably, we already requested\n    // it before.\n    try {\n      return await this.getRequestedContact();\n    } catch { /* empty */\n    }\n\n    // Then, request access to user's phone.\n    const status = await this.requestPhoneAccess();\n    if (status !== 'sent') {\n      throw new Error('Access denied.');\n    }\n\n    // Expected deadline.\n    const deadlineAt = Date.now() + timeout;\n\n    // Time to wait before executing the next request.\n    let sleepTime = 50;\n\n    // We are trying to retrieve the requested contact until deadline was reached.\n    return withTimeout(async () => {\n      while (Date.now() < deadlineAt) {\n        try {\n          return await this.getRequestedContact();\n        } catch {}\n\n        // Sleep for some time.\n        await sleep(sleepTime);\n\n        // Increase the sleep time not to kill the backend service.\n        sleepTime += 50;\n      }\n\n      throw createTimeoutError(timeout);\n    }, timeout);\n  }\n\n  /**\n   * Requests current user phone access. Method returns promise, which resolves\n   * status of the request. In case, user accepted the request, Mini App bot will receive\n   * the according notification.\n   *\n   * To obtain the retrieved information instead, utilize the `requestContact` method.\n   * @param options - additional options.\n   * @see requestContact\n   */\n  async requestPhoneAccess(options: ExecuteWithTimeout = {}): Promise<PhoneRequestedStatus> {\n    if (!this.requestPhoneAccessPromise) {\n      this.requestPhoneAccessPromise = request({\n        ...options,\n        method: 'web_app_request_phone',\n        event: 'phone_requested',\n        postEvent: this.postEvent,\n      })\n        .then(({ status }) => status)\n        .finally(() => this.requestPhoneAccessPromise = undefined);\n    }\n    return this.requestPhoneAccessPromise;\n  }\n\n  /**\n   * Requests write message access to current user.\n   * @param options - additional options.\n   */\n  async requestWriteAccess(options: ExecuteWithTimeout = {}): Promise<WriteAccessRequestedStatus> {\n    if (!this.requestWriteAccessPromise) {\n      this.requestWriteAccessPromise = request({\n        ...options,\n        method: 'web_app_request_write_access',\n        event: 'write_access_requested',\n        postEvent: this.postEvent,\n      })\n        .then(({ status }) => status)\n        .finally(() => this.requestWriteAccessPromise = undefined);\n    }\n    return this.requestWriteAccessPromise;\n  }\n\n  /**\n   * A method used to send data to the bot. When this method called, a service message sent to\n   * the bot containing the data of the length up to 4096 bytes, and the Mini App closed. See the\n   * field `web_app_data` in the class [Message](https://core.telegram.org/bots/api#message).\n   *\n   * This method is only available for Mini Apps launched via a Keyboard button.\n   * @param data - data to send to bot.\n   * @throws {Error} data has incorrect size.\n   */\n  sendData(data: string): void {\n    const { size } = new Blob([data]);\n    if (!size || size > 4096) {\n      throw new Error(`Passed data has incorrect size: ${size}`);\n    }\n    this.postEvent('web_app_data_send', { data });\n  }\n\n  /**\n   * Updates current Mini App header color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/tma.js/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/tma.js/issues/8\n   * @param color - color key or RGB color.\n   */\n  setHeaderColor(color: MiniAppHeaderColor): void {\n    this.postEvent('web_app_set_header_color', isRGB(color) ? { color } : { color_key: color });\n    this.set('headerColor', color);\n  }\n\n  /**\n   * Updates current Mini App background color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/tma.js/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/tma.js/issues/8\n   * @param color - RGB color.\n   */\n  setBgColor(color: RGB): void {\n    this.postEvent('web_app_set_background_color', { color });\n    this.set('bgColor', color);\n  }\n\n  /**\n   * Checks if specified method parameter is supported by current component.\n   */\n  supportsParam: SupportsFn<'setHeaderColor.color'>;\n\n  /**\n   * Inserts the bot's username and the specified inline query in the current chat's input field.\n   * Query may be empty, in which case only the bot's username will be inserted. The client prompts\n   * the user to choose a specific chat, then opens that chat and inserts the bot's username and\n   * the specified inline query in the input field.\n   * @param text - text which should be inserted in the input after the current bot name. Max\n   * length is 256 symbols.\n   * @param chatTypes - List of chat types which could be chosen to send the message. Could be\n   * empty list.\n   */\n  switchInlineQuery(text: string, chatTypes: SwitchInlineQueryChatType[] = []): void {\n    if (!this.supports('switchInlineQuery') && !this.isBotInline) {\n      throw new Error('Method is unsupported because Mini App should be launched in inline mode.');\n    }\n    this.postEvent('web_app_switch_inline_query', { query: text, chat_types: chatTypes });\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { MiniApp } from './MiniApp.js';\n\n/**\n * @returns A new initialized instance of the `MiniApp` class.\n * @see MiniApp\n */\nexport const initMiniApp = createComponentInitFn(\n  'miniApp',\n  ({\n    themeParams,\n    botInline = false,\n    state = {\n      bgColor: themeParams.bgColor || '#ffffff',\n      headerColor: themeParams.headerBgColor || '#000000',\n    },\n    ...rest\n  }) => new MiniApp({ ...rest, ...state, botInline }),\n);\n","import type { PopupButton, PopupParams as BridgePopupParams } from '@/bridge/methods/types/popup.js';\n\nimport type { OpenPopupOptions } from './types.js';\n\n/**\n * Prepares popup parameters before sending them to native app.\n * @param params - popup parameters.\n */\nexport function preparePopupParams(params: OpenPopupOptions): BridgePopupParams {\n  const message = params.message.trim();\n  const title = (params.title || '').trim();\n  const buttons = params.buttons || [];\n  let preparedButtons: PopupButton[];\n\n  // Check title.\n  if (title.length > 64) {\n    throw new Error(`Title has incorrect size: ${title.length}`);\n  }\n\n  // Check message.\n  if (!message.length || message.length > 256) {\n    throw new Error(`Message has incorrect size: ${message.length}`);\n  }\n\n  // Check buttons.\n  if (buttons.length > 3) {\n    throw new Error(`Buttons have incorrect size: ${buttons.length}`);\n  }\n\n  // Append button in case, there are no buttons passed.\n  if (!buttons.length) {\n    preparedButtons = [{ type: 'close', id: '' }];\n  } else {\n    // Otherwise, check all the buttons.\n    preparedButtons = buttons.map((b) => {\n      const { id = '' } = b;\n\n      // Check button ID.\n      if (id.length > 64) {\n        throw new Error(`Button ID has incorrect size: ${id}`);\n      }\n\n      if (!b.type || b.type === 'default' || b.type === 'destructive') {\n        const text = b.text.trim();\n\n        if (!text.length || text.length > 64) {\n          const type = b.type || 'default';\n\n          throw new Error(`Button text with type \"${type}\" has incorrect size: ${b.text.length}`);\n        }\n\n        return { ...b, text, id };\n      }\n\n      return { ...b, id };\n    });\n  }\n  return { title, message, buttons: preparedButtons };\n}\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport { preparePopupParams } from '@/components/Popup/preparePopupParams.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { OpenPopupOptions, PopupState } from '@/components/Popup/types.js';\nimport type { Version } from '@/version/types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/popup\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/popup\n */\nexport class Popup extends WithSupportsAndTrackableState<PopupState, 'open'> {\n  constructor(isOpened: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isOpened }, version, { open: 'web_app_open_popup' });\n  }\n\n  private set isOpened(value) {\n    this.set('isOpened', value);\n  }\n\n  /**\n   * True if the Popup is opened.\n   */\n  get isOpened(): boolean {\n    return this.get('isOpened');\n  }\n\n  /**\n   * A method that shows a native popup described by the `params` argument.\n   * Promise will be resolved when popup is closed. Resolved value will have\n   * an identifier of pressed button.\n   *\n   * In case, user clicked outside the popup or clicked top right popup close\n   * button, null will be returned.\n   *\n   * @param options - popup parameters.\n   * @throws {Error} Popup is already opened.\n   */\n  async open(options: OpenPopupOptions): Promise<string | null> {\n    if (this.isOpened) {\n      throw new Error('Popup is already opened.');\n    }\n\n    this.isOpened = true;\n\n    try {\n      const { button_id: buttonId = null } = await request({\n        event: 'popup_closed',\n        method: 'web_app_open_popup',\n        postEvent: this.postEvent,\n        params: preparePopupParams(options),\n      });\n      return buttonId;\n    } finally {\n      this.isOpened = false;\n    }\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { Popup } from './Popup.js';\n\n/**\n * @returns A new initialized instance of the `Popup` class.\n * @see Popup\n */\nexport const initPopup = createComponentInitFn(\n  ({ postEvent, version }) => new Popup(false, version, postEvent),\n);\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { Version } from '@/version/types.js';\n\nimport { QRScannerOpenOptions, QRScannerState } from './types.js';\n\n// TODO: Usage\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/qr-scanner\n */\nexport class QRScanner extends WithSupportsAndTrackableState<QRScannerState, 'close' | 'open'> {\n  constructor(isOpened: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isOpened }, version, {\n      close: 'web_app_close_scan_qr_popup',\n      open: 'web_app_open_scan_qr_popup',\n    });\n  }\n\n  /**\n   * Closes the scanner.\n   */\n  close(): void {\n    this.postEvent('web_app_close_scan_qr_popup');\n    this.isOpened = false;\n  }\n\n  private set isOpened(value) {\n    this.set('isOpened', value);\n  }\n\n  /**\n   * Returns true if the scanner is currently opened.\n   */\n  get isOpened(): boolean {\n    return this.get('isOpened');\n  }\n\n  /**\n   * Opens the scanner with the specified title shown to user.\n   * The method returns a promise with a scanned QR content and null if the scanner was closed.\n   * @param options - method options.\n   */\n  async open(options?: QRScannerOpenOptions): Promise<string | null>;\n  /**\n   * Opens the scanner with the specified title shown to user.\n   * The method returns a promise with a scanned QR content and null if the scanner was closed.\n   * @param text - title to display.\n   */\n  async open(text?: string): Promise<string | null>;\n  async open(textOrOptions?: QRScannerOpenOptions | string): Promise<string | null> {\n    if (this.isOpened) {\n      throw new Error('The scanner is already opened');\n    }\n\n    const { text, capture }: QRScannerOpenOptions = (\n      typeof textOrOptions === 'string'\n        ? { text: textOrOptions }\n        : textOrOptions\n    ) || {};\n    this.isOpened = true;\n\n    try {\n      const result = await request({\n        method: 'web_app_open_scan_qr_popup',\n        event: ['qr_text_received', 'scan_qr_popup_closed'],\n        postEvent: this.postEvent,\n        params: { text },\n        capture(ev) {\n          return ev.event === 'scan_qr_popup_closed' || !capture || capture(ev.payload);\n        },\n      }) || {};\n\n      const qr = result.data || null;\n      if (qr) {\n        this.close();\n      }\n      return qr;\n    } finally {\n      this.isOpened = false;\n    }\n  }\n\n  // TODO: Streaming mode, allowing to scan several QRs until closed.\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { QRScanner } from './QRScanner.js';\n\n/**\n * @returns A new initialized instance of the `QRScanner` class.\n * @see QRScanner\n */\nexport const initQRScanner = createComponentInitFn(\n  ({ version, postEvent }) => new QRScanner(false, version, postEvent),\n);\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { WithSupportsAndStateUtils } from '@/classes/WithSupportsAndStateUtils.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type {\n  SettingsButtonEvents,\n  SettingsButtonState,\n} from '@/components/SettingsButton/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport type { Version } from '@/version/types.js';\n\ntype Emitter = EventEmitter<SettingsButtonEvents>;\n\nexport class SettingsButton extends WithSupportsAndStateUtils<SettingsButtonState, 'show' | 'hide'> {\n  constructor(isVisible: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isVisible }, version, {\n      show: 'web_app_setup_settings_button',\n      hide: 'web_app_setup_settings_button',\n    });\n  }\n\n  private set isVisible(visible: boolean) {\n    this.set('isVisible', visible);\n    this.postEvent('web_app_setup_settings_button', { is_visible: visible });\n  }\n\n  /**\n   * True if the SettingsButton is visible.\n   */\n  get isVisible(): boolean {\n    return this.get('isVisible');\n  }\n\n  /**\n   * Hides the SettingsButton.\n   */\n  hide(): void {\n    this.isVisible = false;\n  }\n\n  /**\n   * Adds a new event listener.\n   * @param event - event to listen.\n   * @param listener - listener to add.\n   */\n  on: Emitter['on'] = (event, listener) => (\n    event === 'click'\n      ? on('settings_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.on(event, listener as any)\n  );\n\n  /**\n   * Removes the event listener.\n   * @param event - event to listen.\n   * @param listener - listener to remove.\n   */\n  off: Emitter['off'] = (event, listener) => (\n    event === 'click'\n      ? off('settings_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.off(event, listener as any)\n  );\n\n  /**\n   * Shows the SettingsButton.\n   */\n  show(): void {\n    this.isVisible = true;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { SettingsButton } from './SettingsButton.js';\n\n/**\n * @returns A new initialized instance of the `SettingsButton` class.\n * @see SettingsButton\n */\nexport const initSettingsButton = createComponentInitFn(\n  'settingsButton',\n  ({\n    version,\n    postEvent,\n    state = { isVisible: false },\n  }) => new SettingsButton(state.isVisible, version, postEvent),\n);\n","import { themeParams } from '@/components/ThemeParams/parsing/themeParams.js';\n\nimport type { ThemeParamsParsed } from '../types.js';\n\n/**\n * Parses incoming value as theme parameters.\n * @param value - value to parse.\n */\nexport function parseThemeParams(value: unknown): ThemeParamsParsed {\n  return themeParams().parse(value);\n}\n","import { on } from '@/bridge/events/listening/on.js';\nimport { WithTrackableState } from '@/classes/WithTrackableState.js';\nimport { isColorDark } from '@/colors/isColorDark.js';\nimport type { RGB } from '@/colors/types.js';\nimport type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { parseThemeParams } from './parsing/parseThemeParams.js';\nimport type { ThemeParamsParsed, ThemeParamsState } from './types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/theming\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/theme-params\n */\nexport class ThemeParams extends WithTrackableState<ThemeParamsState> {\n  /**\n   * @since v6.10\n   */\n  get accentTextColor(): RGB | undefined {\n    return this.get('accentTextColor');\n  }\n\n  get bgColor(): RGB | undefined {\n    return this.get('bgColor');\n  }\n\n  get buttonColor(): RGB | undefined {\n    return this.get('buttonColor');\n  }\n\n  get buttonTextColor(): RGB | undefined {\n    return this.get('buttonTextColor');\n  }\n\n  get destructiveTextColor(): RGB | undefined {\n    return this.get('destructiveTextColor');\n  }\n\n  /**\n   * Returns the copy of the internal state of the current component instance.\n   */\n  getState(): ThemeParamsParsed {\n    return this.clone();\n  }\n\n  /**\n   * @since v6.10\n   */\n  get headerBgColor(): RGB | undefined {\n    return this.get('headerBgColor');\n  }\n\n  get hintColor(): RGB | undefined {\n    return this.get('hintColor');\n  }\n\n  /**\n   * @returns True in case, current color scheme is recognized as dark. This\n   * value is calculated according to theme bg color.\n   */\n  get isDark(): boolean {\n    return !this.bgColor || isColorDark(this.bgColor);\n  }\n\n  get linkColor(): RGB | undefined {\n    return this.get('linkColor');\n  }\n\n  get secondaryBgColor(): RGB | undefined {\n    return this.get('secondaryBgColor');\n  }\n\n  /**\n   * @since v6.10\n   */\n  get sectionBgColor(): RGB | undefined {\n    return this.get('sectionBgColor');\n  }\n\n  /**\n   * @since v6.10\n   */\n  get sectionHeaderTextColor(): RGB | undefined {\n    return this.get('sectionHeaderTextColor');\n  }\n\n  /**\n   * @since v7.6\n   */\n  get sectionSeparatorColor(): RGB | undefined {\n    return this.get('sectionHeaderTextColor');\n  }\n\n  /**\n   * Starts listening to the external theme changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen(): RemoveEventListenerFn {\n    return on('theme_changed', (event) => {\n      this.set(parseThemeParams(event.theme_params));\n    });\n  }\n\n  /**\n   * @since v6.10\n   */\n  get subtitleTextColor(): RGB | undefined {\n    return this.get('subtitleTextColor');\n  }\n\n  get textColor(): RGB | undefined {\n    return this.get('textColor');\n  }\n}\n","import { ThemeParams } from '@/components/ThemeParams/ThemeParams.js';\nimport { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\n/**\n * @returns A new initialized instance of the `ThemeParams` class.\n * @see ThemeParams\n */\nexport const initThemeParams = createComponentInitFn(\n  'themeParams',\n  ({ themeParams, state = themeParams, addCleanup }) => {\n    const tp = new ThemeParams(state);\n    addCleanup(tp.listen());\n    return tp;\n  },\n);\n","import { request } from '@/bridge/request.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { parseThemeParams } from './parsing/parseThemeParams.js';\nimport type { ThemeParamsParsed } from './types.js';\n\n/**\n * Requests current theme parameters from the Telegram application.\n * @param options - request options.\n */\nexport function requestThemeParams(options: ExecuteWithOptions = {}): Promise<ThemeParamsParsed> {\n  return request({\n    ...options,\n    method: 'web_app_request_theme',\n    event: 'theme_changed',\n  }).then(parseThemeParams);\n}\n","/**\n * Ensures, that specified value starts with the specified prefix. If it doesn't, function appends\n * prefix.\n * @param value - value to check.\n * @param prefix - prefix to add.\n */\nexport function ensurePrefix(value: string, prefix: string): string {\n  return value.startsWith(prefix) ? value : `${prefix}${value}`;\n}\n","import { ensurePrefix } from '@/navigation/ensurePrefix.js';\nimport type { URLLike } from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Safely creates new instance of URL with some predefined protocol and hostname.\n * @param urlOrPath - URL instance or path.\n */\nexport function createSafeURL(urlOrPath: string | Partial<URLLike>): URL {\n  return new URL(\n    typeof urlOrPath === 'string'\n      ? urlOrPath\n      : `${urlOrPath.pathname || ''}${ensurePrefix(urlOrPath.search || '', '?')}${ensurePrefix(urlOrPath.hash || '', '#')}`,\n    'http://a',\n  );\n}\n","import { captureSameReq } from '@/bridge/captureSameReq.js';\nimport { request } from '@/bridge/request.js';\nimport { WithSupports } from '@/classes/WithSupports.js';\nimport { createSupportsParamFn } from '@/supports/createSupportsParamFn.js';\nimport { supports } from '@/supports/supports.js';\nimport { createSafeURL } from '@/navigation/createSafeURL.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { CreateRequestIdFn } from '@/request-id/types.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport interface UtilsOpenLinkOptions {\n  /**\n   * Attempts to use the instant view mode.\n   */\n  tryInstantView?: boolean;\n  /**\n   * Attempts to use user preferred browser.\n   */\n  tryBrowser?: boolean;\n}\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/utils\n */\nexport class Utils extends WithSupports<'readTextFromClipboard'> {\n  constructor(\n    private readonly version: Version,\n    private readonly createRequestId: CreateRequestIdFn,\n    private readonly postEvent: PostEvent,\n  ) {\n    super(version, { readTextFromClipboard: 'web_app_read_text_from_clipboard' });\n\n    this.supportsParam = createSupportsParamFn(version, {\n      'openLink.tryInstantView': ['web_app_open_link', 'try_instant_view'],\n    });\n  }\n\n  /**\n   * Opens a link.\n   *\n   * The Mini App will not be closed.\n   *\n   * Note that this method can be called only in response to the user\n   * interaction with the Mini App interface (e.g. click inside the Mini App or on the main button).\n   * @param url - URL to be opened.\n   * @param options - additional options.\n   */\n  openLink(url: string, options?: UtilsOpenLinkOptions): void;\n\n  /**\n   * Opens a link.\n   *\n   * The Mini App will not be closed.\n   *\n   * Note that this method can be called only in response to the user\n   * interaction with the Mini App interface (e.g. click inside the Mini App or on the main button).\n   * @param url - URL to be opened.\n   * @param tryInstantView - try to use the instant view.\n   * @deprecated Use the second argument as an object.\n   */\n  openLink(url: string, tryInstantView?: boolean): void\n\n  openLink(url: string, instantOrOptions?: boolean | UtilsOpenLinkOptions): void {\n    const formattedUrl = createSafeURL(url).toString();\n\n    // If the method is not supported, we are doing it in legacy way.\n    if (!supports('web_app_open_link', this.version)) {\n      window.open(formattedUrl, '_blank');\n      return;\n    }\n\n    const options: UtilsOpenLinkOptions = typeof instantOrOptions === 'boolean'\n      ? { tryInstantView: instantOrOptions }\n      : instantOrOptions || {};\n\n    // Otherwise, do it normally.\n    this.postEvent('web_app_open_link', {\n      url: formattedUrl,\n      try_browser: options.tryBrowser,\n      try_instant_view: options.tryInstantView,\n    });\n  }\n\n  /**\n   * Opens a Telegram link inside Telegram app. The Mini App will be closed. It expects passing\n   * link in full format, with hostname \"t.me\".\n   * @param url - URL to be opened.\n   * @throws {Error} URL has not allowed hostname.\n   */\n  openTelegramLink(url: string): void {\n    const { hostname, pathname, search } = new URL(url, 'https://t.me');\n    if (hostname !== 't.me') {\n      throw new Error(`URL has not allowed hostname: ${hostname}. Only \"t.me\" is allowed`);\n    }\n\n    if (!supports('web_app_open_tg_link', this.version)) {\n      window.location.href = url;\n      return;\n    }\n\n    this.postEvent('web_app_open_tg_link', { path_full: pathname + search });\n  }\n\n  /**\n   * Reads text from clipboard and returns string or null. null is returned\n   * in cases:\n   * - Value in clipboard is not text\n   * - Access to clipboard is not allowed\n   */\n  async readTextFromClipboard(): Promise<string | null> {\n    const reqId = this.createRequestId();\n    const {\n      data = null,\n    } = await request({\n      method: 'web_app_read_text_from_clipboard',\n      event: 'clipboard_text_received',\n      postEvent: this.postEvent,\n      params: { req_id: reqId },\n      capture: captureSameReq(reqId),\n    });\n\n    return data;\n  }\n\n  /**\n   * Shares specified URL with the passed to the chats, selected by user. After being called,\n   * it closes the mini application.\n   *\n   * This method uses Telegram's Share Links.\n   * @param url - URL to share.\n   * @param text - text to append after the URL.\n   * @see https://core.telegram.org/api/links#share-links\n   * @see https://core.telegram.org/widgets/share#custom-buttons\n   */\n  shareURL(url: string, text?: string): void {\n    this.openTelegramLink(\n      `https://t.me/share/url?` + new URLSearchParams({ url, text: text || '' })\n        .toString()\n        // By default, URL search params encode spaces with \"+\".\n        // We are replacing them with \"%20\", because plus symbols are working incorrectly\n        // in Telegram.\n        .replace(/\\+/g, '%20'),\n    );\n  }\n\n  /**\n   * Checks if specified method parameter is supported by current component.\n   */\n  supportsParam: SupportsFn<'openLink.tryInstantView'>;\n}\n","import { Utils } from '@/components/Utils/Utils.js';\nimport { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\n/**\n * @returns A new initialized instance of the `Utils` class.\n * @see Utils\n */\nexport const initUtils = createComponentInitFn(\n  ({ version, postEvent, createRequestId }) => {\n    return new Utils(version, createRequestId, postEvent);\n  },\n);\n","import { request } from '@/bridge/request.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nexport interface RequestViewportResult {\n  height: number;\n  isStateStable: boolean;\n  isExpanded: boolean;\n  width: number;\n}\n\n/**\n * Requests viewport actual information from the Telegram application.\n * @param options - request options.\n */\nexport async function requestViewport(\n  options: ExecuteWithOptions = {},\n): Promise<RequestViewportResult> {\n  const {\n    is_expanded: isExpanded,\n    is_state_stable: isStateStable,\n    ...rest\n  } = await request({\n    ...options,\n    method: 'web_app_request_viewport',\n    event: 'viewport_changed',\n  });\n\n  return { ...rest, isExpanded, isStateStable };\n}\n","import { on } from '@/bridge/events/listening/on.js';\nimport { WithTrackableState } from '@/classes/WithTrackableState.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { RemoveEventListenerFn } from '@/events/types.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { requestViewport } from './requestViewport.js';\nimport type { ViewportProps, ViewportState } from './types.js';\n\n/**\n * Formats value to make it stay in bounds [0, +Inf).\n * @param value - value to format.\n */\nfunction truncate(value: number): number {\n  return value < 0 ? 0 : value;\n}\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/viewport\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/viewport\n */\nexport class Viewport extends WithTrackableState<ViewportState> {\n  private readonly postEvent: PostEvent;\n\n  constructor({ postEvent, stableHeight, height, width, isExpanded }: ViewportProps) {\n    super({\n      height: truncate(height),\n      isExpanded,\n      stableHeight: truncate(stableHeight),\n      width: truncate(width),\n    });\n    this.postEvent = postEvent;\n  }\n\n  /**\n   * Requests viewport information from the Telegram application and updates current Viewport\n   * instance.\n   * @param options - options to request fresh data.\n   */\n  async sync(options?: ExecuteWithOptions): Promise<void> {\n    const { isStateStable, ...rest } = await requestViewport(options);\n    this.set({\n      ...rest,\n      stableHeight: isStateStable ? rest.height : this.get('stableHeight'),\n    });\n  }\n\n  /**\n   * The current height of the **visible area** of the Mini App.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the bot can do the same by calling `expand` method. As the position of\n   * the Mini App changes, the current height value of the visible area will be updated  in real\n   * time.\n   *\n   * Please note that the refresh rate of this value is not sufficient to smoothly follow the\n   * lower border of the window. It should not be used to pin interface elements to the bottom\n   * of the visible area. It's more appropriate to use the value of the `stableHeight`\n   * field for this purpose.\n   *\n   * @see stableHeight\n   */\n  get height(): number {\n    return this.get('height');\n  }\n\n  /**\n   * The height of the visible area of the Mini App in its last stable state.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the application can do the same by calling `expand` method.\n   *\n   * Unlike the value of `height`, the value of `stableHeight` does not change as the position\n   * of the Mini App changes with user gestures or during animations. The value of `stableHeight`\n   * will be updated after all gestures and animations are completed and\n   * the Mini App reaches its final size.\n   *\n   * @see height\n   */\n  get stableHeight(): number {\n    return this.get('stableHeight');\n  }\n\n  /**\n   * Starts listening to viewport changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen(): RemoveEventListenerFn {\n    return on('viewport_changed', (event) => {\n      const {\n        height,\n        width,\n        is_expanded: isExpanded,\n        is_state_stable: isStateStable,\n      } = event;\n      const truncatedHeight = truncate(height);\n\n      this.set({\n        height: truncatedHeight,\n        isExpanded,\n        width: truncate(width),\n        ...(isStateStable ? { stableHeight: truncatedHeight } : {}),\n      });\n    });\n  }\n\n  /**\n   * True if the Mini App is expanded to the maximum available height. Otherwise, if\n   * the Mini App occupies part of the screen and can be expanded to the full height using\n   * `expand` method.\n   * @see expand\n   */\n  get isExpanded(): boolean {\n    return this.get('isExpanded');\n  }\n\n  /**\n   * Current visible area width.\n   */\n  get width(): number {\n    return this.get('width');\n  }\n\n  /**\n   * A method that expands the Mini App to the maximum available height. To find out if the Mini\n   * App is expanded to the maximum height, refer to the value of the `isExpanded`.\n   * @see isExpanded\n   */\n  expand(): void {\n    this.postEvent('web_app_expand');\n    this.set('isExpanded', true);\n  }\n\n  /**\n   * True if the current viewport height is stable and is not going to change in the next moment.\n   */\n  get isStable(): boolean {\n    return this.stableHeight === this.height;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { Viewport } from './Viewport.js';\nimport { requestViewport } from '@/components/Viewport/requestViewport.js';\n\n/**\n * @returns A promise with a new initialized instance of the `Viewport` class.\n * @see Viewport\n */\nexport const initViewport = createComponentInitFn(\n  'viewport',\n  async ({ state, platform, postEvent, addCleanup }) => {\n    let isExpanded = false;\n    let height = 0;\n    let width = 0;\n    let stableHeight = 0;\n\n    // State was saved previously, we restore the Viewport from this state.\n    if (state) {\n      isExpanded = state.isExpanded;\n      height = state.height;\n      width = state.width;\n      stableHeight = state.stableHeight;\n    } else if (['macos', 'tdesktop', 'unigram', 'webk', 'weba', 'web'].includes(platform)) {\n      // If platform has a stable viewport, it means we could instantiate Viewport using\n      // the window global object properties.\n      isExpanded = true;\n      height = window.innerHeight;\n      width = window.innerWidth;\n      stableHeight = window.innerHeight;\n    } else {\n      // We were unable to retrieve data locally. In this case we are sending a request returning\n      // a viewport information.\n      const response = await requestViewport({ timeout: 1000, postEvent });\n      isExpanded = response.isExpanded;\n      height = response.height;\n      width = response.width;\n      stableHeight = response.isStateStable ? height : 0;\n    }\n\n    // Otherwise, Viewport instance will be created using zero values.\n    const viewport = new Viewport({\n      postEvent,\n      height,\n      width,\n      stableHeight,\n      isExpanded,\n    });\n\n    // Listen to the viewport external changes and actualize local instance.\n    addCleanup(viewport.listen());\n\n    return viewport;\n  },\n);\n","/**\n * Sets CSS variable globally.\n * @param name - variable name.\n * @param value - variable value.\n */\nexport function setCSSVar(name: string, value: string): void {\n  document.documentElement.style.setProperty(name, value);\n}\n","import { isRGB } from '@/colors/isRGB.js';\nimport { setCSSVar } from '@/css-vars/setCSSVar.js';\nimport type { ThemeParams } from '@/components/ThemeParams/ThemeParams.js';\nimport type { MiniApp } from '@/components/MiniApp/MiniApp.js';\nimport type { CleanupFn } from '@/types/index.js';\n\nexport interface GetMiniAppCSSVarNameFn {\n  /**\n   * @param property - MiniApp property.\n   * @returns Computed complete CSS variable name.\n   */\n  (property: 'bg' | 'header'): string;\n}\n\n/**\n * Creates CSS variables connected with the MiniApps class instance background and header colors\n * based on the passed MiniApp and ThemeParams instances.\n *\n * Created variables by default:\n * - `--tg-bg-color`\n * - `--tg-header-color`\n *\n * Variables are being automatically updated in case, corresponding MiniApp and ThemeParams\n * properties were updated.\n *\n * @param miniApp - MiniApp instance.\n * @param themeParams - ThemeParams instance.\n * @param getVarName - function, returning complete CSS variable name for the specified\n * MiniApp property.\n * @returns Function to stop updating variables.\n */\nexport function bindMiniAppCSSVars(\n  miniApp: MiniApp,\n  themeParams: ThemeParams,\n  getVarName?: GetMiniAppCSSVarNameFn,\n): CleanupFn {\n  getVarName ||= (property) => `--tg-${property}-color`;\n\n  const headerVar = getVarName('header');\n  const bgVar = getVarName('bg');\n\n  const actualize = () => {\n    const { headerColor } = miniApp;\n\n    if (isRGB(headerColor)) {\n      setCSSVar(headerVar, headerColor);\n    } else {\n      const { bgColor, secondaryBgColor } = themeParams;\n\n      if (headerColor === 'bg_color' && bgColor) {\n        setCSSVar(headerVar, bgColor);\n      } else if (headerColor === 'secondary_bg_color' && secondaryBgColor) {\n        setCSSVar(headerVar, secondaryBgColor);\n      }\n    }\n\n    setCSSVar(bgVar, miniApp.bgColor)\n  };\n\n  const listeners = [\n    themeParams.on('change', actualize),\n    miniApp.on('change', actualize),\n  ];\n\n  actualize();\n\n  return () => listeners.forEach(off => off());\n}\n","import { setCSSVar } from '@/css-vars/setCSSVar.js';\nimport type { ThemeParams } from '@/components/ThemeParams/ThemeParams.js';\nimport type { CleanupFn } from '@/types/index.js';\n\nexport interface GetThemeParamsCSSVarNameFn {\n  /**\n   * @param property - ThemeParams property.\n   * @returns Computed complete CSS variable name.\n   */\n  (property: string): string;\n}\n\n/**\n * Creates CSS variables connected with the passed instance of the ThemeParams class.\n *\n * By default, created CSS variables names are following the pattern \"--tg-theme-{name}\", where\n * {name} is a theme parameters key name converted from camel case to kebab case.\n *\n * Example:\n * --tg-theme-bg-color\n * --tg-theme-secondary-text-color\n *\n * Variables are being automatically updated in case, corresponding properties updated in\n * the passed ThemeParams instance.\n *\n * @param themeParams - ThemeParams instance.\n * @param getCSSVarName - function, returning complete CSS variable name for the specified\n * ThemeParams property.\n * @returns Function to stop updating variables.\n */\nexport function bindThemeParamsCSSVars(\n  themeParams: ThemeParams,\n  getCSSVarName?: GetThemeParamsCSSVarNameFn,\n): CleanupFn {\n  getCSSVarName ||= (property) => {\n    return `--tg-theme-${property.replace(/[A-Z]/g, (m) => `-${m.toLowerCase()}`)}`;\n  };\n\n  const actualize = () => {\n    Object.entries(themeParams.getState()).forEach(([k, v]) => {\n      if (v) {\n        setCSSVar(getCSSVarName(k), v);\n      }\n    });\n  };\n\n  actualize();\n\n  return themeParams.on('change', actualize);\n}\n","import { setCSSVar } from '@/css-vars/setCSSVar.js';\nimport type { Viewport } from '@/components/Viewport/Viewport.js';\nimport type { CleanupFn } from '@/types/index.js';\n\nexport interface GetViewportCSSVarNameFn {\n  /**\n   * @param property - Viewport property.\n   * @returns Computed complete CSS variable name.\n   */\n  (property: 'width' | 'height' | 'stable-height'): string;\n}\n\n/**\n * Accepts Viewport instance and sets CSS variables connected with viewport\n * sizes.\n *\n * Be careful using this function as long as it can impact application\n * performance. Viewport size is changing rather often, this makes CSS\n * variables update, which leads to possible layout redraw.\n *\n * Variables:\n * - `--tg-viewport-height`\n * - `--tg-viewport-width`\n * - `--tg-viewport-stable-height`\n *\n * Variables are being automatically updated in case, corresponding properties\n * updated in passed Viewport instance.\n *\n * @param viewport - Viewport instance.\n * @param getCSSVarName - function, returning complete CSS variable name for the specified\n * Viewport property.\n * @returns Function to stop updating variables.\n */\nexport function bindViewportCSSVars(\n  viewport: Viewport,\n  getCSSVarName?: GetViewportCSSVarNameFn,\n): CleanupFn {\n  getCSSVarName ||= (property) => `--tg-viewport-${property}`;\n  const [\n    heightVar,\n    widthVar,\n    stableHeightVar,\n  ] = (['height', 'width', 'stable-height'] as const).map((prop) => getCSSVarName(prop));\n  const setHeight = () => setCSSVar(heightVar, `${viewport.height}px`);\n  const setWidth = () => setCSSVar(widthVar, `${viewport.width}px`);\n  const setStableHeight = () => setCSSVar(stableHeightVar, `${viewport.stableHeight}px`);\n\n  // TODO: Should probably add debounce or throttle.\n  const listeners = [\n    viewport.on('change:height', setHeight),\n    viewport.on('change:width', setWidth),\n    viewport.on('change:stableHeight', setStableHeight),\n  ];\n\n  setHeight();\n  setWidth();\n  setStableHeight();\n\n  return () => listeners.forEach(off => off());\n}\n","import { on } from '@/bridge/events/listening/on.js';\nimport { postEvent } from '@/bridge/methods/postEvent.js';\n\ninterface CleanupFn {\n  (): void;\n}\n\n/**\n * Performs initialization process in the web version of Telegram.\n * @returns Function, which performs cleanup removing all created elements and listeners.\n * @param acceptCustomStyles - true if SDK should accept styles sent from the Telegram web\n * application. This option is only used in web versions of Telegram. Default: false.\n */\nexport function initWeb(acceptCustomStyles = true): CleanupFn {\n  const listeners: CleanupFn[] = [\n    on('reload_iframe', () => {\n      postEvent('iframe_will_reload');\n      window.location.reload();\n    }),\n  ];\n  const cleanup: CleanupFn = () => listeners.forEach((l) => l());\n\n  if (acceptCustomStyles) {\n    const style = document.createElement('style');\n    style.id = 'telegram-custom-styles';\n    document.head.appendChild(style);\n\n    listeners.push(\n      on('set_custom_style', (html) => {\n        // It is safe to use innerHTML here as long as style tag has a special behavior related\n        // to the specified content. In case, any script will be passed here, it will not be\n        // executed.\n        style.innerHTML = html;\n      }),\n      () => document.head.removeChild(style),\n    );\n  }\n\n  // Notify Telegram, iframe is ready. This will result in sending style tag html from native\n  // application which is used in catchCustomStyles function. We should call this method also\n  // to start receiving \"reload_iframe\" events from the Telegram application.\n  postEvent('iframe_ready', { reload_supported: true });\n\n  return cleanup;\n}\n","/**\n * @returns True, if current environment is server.\n */\nexport function isSSR(): boolean {\n  return typeof window === 'undefined';\n}\n","import { request } from '@/bridge/request.js';\nimport { hasWebviewProxy } from '@/env/hasWebviewProxy.js';\n\n/**\n * Returns true in case, current environment is Telegram Mini Apps.\n */\nexport async function isTMA(): Promise<boolean> {\n  if (hasWebviewProxy(window)) {\n    return true;\n  }\n  try {\n    await request({ method: 'web_app_request_theme', event: 'theme_changed', timeout: 100 });\n    return true;\n  } catch {\n    return false;\n  }\n}\n","import { saveToStorage } from '@/launch-params/saveToStorage.js';\nimport { parseMessage } from '@/bridge/parseMessage.js';\nimport { isIframe } from '@/env/isIframe.js';\nimport { hasExternalNotify } from '@/env/hasExternalNotify.js';\nimport { emitMiniAppsEvent } from '@/bridge/events/event-handlers/emitMiniAppsEvent.js';\nimport { serializeThemeParams } from '@/components/ThemeParams/parsing/serializeThemeParams.js';\nimport { parseLaunchParams } from '@/launch-params/parseLaunchParams.js';\nimport type { LaunchParams } from '@/launch-params/types.js';\nimport type { MiniAppsEventPayload } from '@/bridge/events/types.js';\n\n/**\n * Mocks a Telegram application environment.\n * @param launchParamsRaw - launch parameters presented as a string or query parameters.\n */\nexport function mockTelegramEnv(launchParamsRaw: LaunchParams | string): void {\n  const lp = typeof launchParamsRaw === 'string'\n    ? parseLaunchParams(launchParamsRaw)\n    : launchParamsRaw;\n\n  // Save launch params in the storage, so retrieveLaunchParams will return them.\n  saveToStorage(lp);\n\n  function wiredPostMessage(data: unknown): void {\n    if (typeof data !== 'string') {\n      return;\n    }\n    try {\n      const { eventType } = parseMessage(data);\n\n      if (eventType === 'web_app_request_theme') {\n        emitMiniAppsEvent('theme_changed', {\n          theme_params: JSON.parse(serializeThemeParams(lp.themeParams)),\n        } satisfies MiniAppsEventPayload<'theme_changed'>);\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        emitMiniAppsEvent('viewport_changed', {\n          width: window.innerWidth,\n          height: window.innerHeight,\n          is_state_stable: true,\n          is_expanded: true,\n        } satisfies MiniAppsEventPayload<'viewport_changed'>);\n      }\n    } catch {\n    }\n  }\n\n  // Override all possible ways of calling a Mini Apps method.\n  if (isIframe()) {\n    const postMessage = window.parent.postMessage.bind(window.parent);\n    window.parent.postMessage = data => {\n      void wiredPostMessage(data);\n      postMessage(data);\n    };\n    return;\n  }\n\n  if (hasExternalNotify(window)) {\n    const notify = window.external.notify.bind(window.external);\n    window.external.notify = data => {\n      void wiredPostMessage(data);\n      notify(data);\n    };\n    return;\n  }\n\n  const proxy = (window as any).TelegramWebviewProxy;\n  (window as any).TelegramWebviewProxy = {\n    ...(proxy || {}),\n    postEvent(...args: any) {\n      void wiredPostMessage(JSON.stringify({ eventType: args[0], eventData: args[1] }));\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      proxy && proxy.postEvent(...args);\n    },\n  };\n}\n","import { SDKError } from './SDKError.js';\n\n/**\n * @returns True, if passed value is an instance of SDKError.\n * @param value - value to check.\n */\nexport function isSDKError(value: unknown): value is SDKError {\n  return value instanceof SDKError;\n}\n","import { isSDKError } from './isSDKError.js';\nimport type { ErrorType } from './errors.js';\n\n/**\n * Returns true if passed value is an SDK error of specified type.\n * @param value - value to check.\n * @param type - error type.\n */\nexport function isSDKErrorOfType(value: unknown, type: ErrorType): boolean {\n  return isSDKError(value) && value.type === type;\n}\n","import type {\n  BasicNavigatorAnyHistoryItem,\n  BasicNavigatorHistoryItem,\n} from '@/navigation/BasicNavigator/types.js';\n\n/**\n * Converts any known history item type to the local one.\n * @param item - history item presented as a string or an object.\n * @param relativePathname - relative pathname.\n */\nexport function prepareItem<Params>(\n  item: BasicNavigatorAnyHistoryItem<Params>,\n  relativePathname: string,\n): Readonly<BasicNavigatorHistoryItem<Params>> {\n  let pathname: string;\n  let params: Params | undefined;\n  let id: string | undefined;\n\n  if (typeof item === 'string') {\n    pathname = item;\n  } else {\n    pathname = item.pathname === undefined\n      ? relativePathname\n      : item.pathname;\n    params = item.params;\n    id = item.id;\n  }\n\n  return Object.freeze({\n    id: id || ((Math.random() * 2 ** 14) | 0).toString(16),\n    pathname,\n    params,\n  });\n}\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { type PostEvent, postEvent as defaultPostEvent } from '@/bridge/methods/postEvent.js';\nimport { createError } from '@/errors/createError.js';\nimport {\n  ERR_NAVIGATION_HISTORY_EMPTY,\n  ERR_NAVIGATION_INDEX_INVALID,\n} from '@/errors/errors.js';\nimport { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport { prepareItem } from '@/navigation/BasicNavigator/prepareItem.js';\nimport type {\n  BasicNavigatorAnyHistoryItem,\n  BasicNavigatorEvents,\n  BasicNavigatorHistoryItem,\n} from '@/navigation/BasicNavigator/types.js';\n\ntype Emitter<Params> = EventEmitter<BasicNavigatorEvents<Params>>;\n\nexport class BasicNavigator<Params = {}> {\n  /**\n   * Navigation history.\n   */\n  readonly history: Readonly<BasicNavigatorHistoryItem<Params>>[];\n\n  private readonly ee: Emitter<Params> = new EventEmitter();\n\n  constructor(\n    /**\n     * Navigation history.\n     */\n    history: readonly BasicNavigatorAnyHistoryItem<Params>[],\n    /**\n     * Currently active history item.\n     */\n    private _index: number,\n    /**\n     * Function to call Mini Apps methods.\n     * @default Global `postEvent` function.\n     */\n    private readonly postEvent: PostEvent = defaultPostEvent,\n  ) {\n    if (history.length === 0) {\n      throw createError(ERR_NAVIGATION_HISTORY_EMPTY, 'History should not be empty.');\n    }\n\n    if (_index < 0 || _index >= history.length) {\n      throw createError(\n        ERR_NAVIGATION_INDEX_INVALID,\n        'Index should not be zero and higher or equal than history size.',\n      );\n    }\n    this.history = history.map((item) => prepareItem(item, ''));\n  }\n\n  /**\n   * True, if current navigator is currently attached.\n   */\n  private attached = false;\n\n  /**\n   * Allows this navigator to control the `BackButton` visibility state. It also tracks the\n   * `BackButton` clicks and calls the `back` method.\n   */\n  attach(): void {\n    if (!this.attached) {\n      this.attached = true;\n      this.sync();\n      on('back_button_pressed', this.back);\n    }\n  }\n\n  /**\n   * Goes to the previous history item.\n   */\n  back = (): void => this.go(-1);\n\n  /**\n   * Currently active history item.\n   */\n  get current(): Readonly<BasicNavigatorHistoryItem<Params>> {\n    return this.history[this.index];\n  }\n\n  /**\n   * Prevents current navigator from controlling the BackButton visibility state.\n   */\n  detach(): void {\n    this.attached = false;\n    off('back_button_pressed', this.back);\n  }\n\n  /**\n   * Goes to the next history item.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(delta: number, fit?: boolean): void {\n    // Compute the next index.\n    const index = this.index + delta;\n\n    // Cut the index to be in bounds [0, history.length - 1].\n    const fitIndex = Math.min(\n      Math.max(0, index),\n      this.history.length - 1,\n    );\n\n    // We perform \"go\" only in case, computed and cut indexes are equal or \"fit\" option was\n    // specified.\n    if (index === fitIndex || fit) {\n      // We are just calling setter to update the index and emit all related events.\n      this.replaceAndMove(fitIndex, this.history[fitIndex]);\n    }\n  }\n\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(index: number, fit?: boolean): void {\n    this.go(index - this.index, fit);\n  }\n\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev(): boolean {\n    return this.index > 0;\n  }\n\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext(): boolean {\n    return this.index !== this.history.length - 1;\n  }\n\n  /**\n   * Currently active history item index.\n   */\n  get index(): number {\n    return this._index;\n  }\n\n  /**\n   * Adds new event listener.\n   */\n  on: Emitter<Params>['on'] = this.ee.on.bind(this.ee);\n\n  /**\n   * Removes event listener.\n   */\n  off: Emitter<Params>['off'] = this.ee.off.bind(this.ee);\n\n  /**\n   * Adds a new history item removing all after the current one.\n   * @param item - item to add.\n   */\n  push(item: BasicNavigatorAnyHistoryItem<Params>): void {\n    if (this.hasNext) {\n      this.history.splice(this.index + 1);\n    }\n    this.replaceAndMove(this.index + 1, prepareItem(item, this.current.pathname));\n  }\n\n  /**\n   * Replaces the current history item.\n   * @param item - item to replace the current item with.\n   */\n  replace(item: BasicNavigatorAnyHistoryItem<Params>): void {\n    this.replaceAndMove(this.index, prepareItem(item, this.current.pathname));\n  }\n\n  /**\n   * Sets history item by the specified index.\n   * @param index - history item index to replace.\n   * @param historyItem - history item to set.\n   */\n  private replaceAndMove(index: number, historyItem: BasicNavigatorHistoryItem<Params>): void {\n    const delta = index - this.index;\n    if (!delta && this.current === historyItem) {\n      // Nothing changed.\n      return;\n    }\n\n    const from = this.current;\n\n    if (this.index !== index) {\n      const prevIndex = this._index;\n      this._index = index;\n\n      // If navigator is attached and back button local visibility state changed, we should\n      // notify Telegram app about it.\n      if (this.attached && prevIndex > 0 !== index > 0) {\n        this.sync();\n      }\n    }\n\n    this.history[index] = historyItem;\n    this.ee.emit('change', {\n      navigator: this,\n      from,\n      to: this.current,\n      delta,\n    });\n  }\n\n  /**\n   * Actualizes the `BackButton` visibility state.\n   */\n  private sync(): void {\n    this.postEvent('web_app_setup_back_button', { is_visible: !!this.index });\n  }\n}\n","import type { BasicNavigatorHistoryItem } from '@/navigation/BasicNavigator/types.js';\nimport type {\n  BrowserNavigatorHistoryItem,\n  BrowserNavigatorHistoryItemParams,\n} from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Converts basic navigator entry to browser navigator entry.\n */\nexport function basicItemToBrowser<State>(\n  {\n    params,\n    ...rest\n  }: BasicNavigatorHistoryItem<BrowserNavigatorHistoryItemParams<State>>,\n): BrowserNavigatorHistoryItem<State> {\n  return { ...(params || { hash: '', search: '' }), ...rest };\n}\n","import { createSafeURL } from '@/navigation/createSafeURL.js';\nimport type { URLLike } from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Extracts path part from a URL.\n * @param urlOrPath - URL instance or path.\n */\nexport function urlToPath(urlOrPath: string | Partial<URLLike>): string {\n  const isAbsolute = typeof urlOrPath === 'string'\n    ? urlOrPath.startsWith('/')\n    : !!(urlOrPath.pathname && urlOrPath.pathname.startsWith('/'));\n  const url = createSafeURL(urlOrPath);\n\n  return `${isAbsolute ? url.pathname : url.pathname.slice(1)}${url.search}${url.hash}`;\n}\n","import { ensurePrefix } from '@/navigation/ensurePrefix.js';\nimport { urlToPath } from '@/navigation/urlToPath.js';\nimport type { BrowserNavigatorAnyHistoryItem } from '@/navigation/BrowserNavigator/types.js';\n\ninterface PrepareItemResult<State> {\n  id?: string;\n  pathname: string;\n  params: {\n    hash: string;\n    search: string;\n    state?: State;\n  };\n}\n\n/**\n * Converts a path, presented as a string to a basic navigator appropriate form.\n * @param path - full path.\n * @param relativePath - relative path.\n * @param state - history item state.\n */\nexport function prepareItem<State>(\n  path: string,\n  relativePath: string,\n  state?: State,\n): PrepareItemResult<State>;\n\n/**\n * Converts a path, presented as an object to a basic navigator appropriate form.\n * @param item - history item data.\n * @param relativePath - relative path.\n */\nexport function prepareItem<State>(\n  item: BrowserNavigatorAnyHistoryItem<State>,\n  relativePath: string,\n): PrepareItemResult<State>;\n\nexport function prepareItem<State>(\n  itemOrPath: string | BrowserNavigatorAnyHistoryItem<State>,\n  relativePath: string,\n  state?: State,\n): PrepareItemResult<State> {\n  let path: string;\n  let id: string | undefined;\n\n  if (typeof itemOrPath === 'string') {\n    path = itemOrPath;\n  } else {\n    path = urlToPath(itemOrPath);\n    state = itemOrPath.state;\n    id = itemOrPath.id;\n  }\n\n  const { pathname, search, hash } = new URL(path, `http://a${ensurePrefix(relativePath, '/')}`);\n  return { id, pathname, params: { hash, search, state } };\n}\n","import { onWindow } from '@/events/onWindow.js';\n\n/**\n * Performs window.history.go operation waiting for it to be completed.\n * @param delta - history change delta.\n */\nexport async function go(delta: number): Promise<boolean> {\n  if (delta === 0) {\n    return true;\n  }\n\n  // We expect popstate event to occur during some time. Yeah, this seems tricky and not stable,\n  // but it seems like we have no other way out. Waiting for Navigation API to be implemented in\n  // browsers.\n  return Promise.race<boolean>([\n    new Promise((res) => {\n      const remove = onWindow('popstate', () => {\n        remove();\n        res(true);\n      });\n\n      window.history.go(delta);\n    }),\n\n    // Usually, it takes about 1ms to emit this event, but we use some buffer.\n    new Promise((res) => {\n      setTimeout(res, 50, false);\n    }),\n  ]);\n}\n","import { go } from '@/navigation/go.js';\n\n/**\n * Drops current browser history switching browser history cursor to the first one entry.\n */\nexport async function drop(): Promise<void> {\n  if (window.history.length <= 1) {\n    return;\n  }\n\n  // Push empty state to cut states we have no access to, placed after the current one.\n  window.history.pushState(null, '');\n\n  // By this line of code we cover the most recent case, when application is opened in WebView,\n  // but not in iframe. Applications opened in WebView have simple browser history containing\n  // only entries belonging to the current web application.\n  const goPerformed = await go(1 - window.history.length);\n  if (goPerformed) {\n    return;\n  }\n\n  // Nevertheless, iframe works a bit different in context of browser history. Calling\n  // window.history.length in iframe will return browser history information related to the\n  // external web environment too (e.g. browser tab). So, iframe shares the browser history with\n  // the external application, but has no access to its history entries. Calling window.history.go\n  // pointing out to the entry belonging to the external application will have no impact, so the\n  // previous idea with go(1 - ...) will not work.\n  //\n  // This is the reason why we iteratively call go(-1) to meet the entry which is recognized as\n  // the initial one for the current iframe.\n  let shouldGoBack = await go(-1);\n  while (shouldGoBack) {\n    shouldGoBack = await go(-1);\n  }\n}\n","import { createSafeURL } from '@/navigation/createSafeURL.js';\nimport type { URLLike } from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Extracts pathname from the value.\n * @param value - source value.\n */\nexport function getPathname(value: string | Partial<URLLike>): string {\n  return createSafeURL(value).pathname;\n}\n","import { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport { BasicNavigator } from '@/navigation/BasicNavigator/BasicNavigator.js';\nimport { basicItemToBrowser } from '@/navigation/BrowserNavigator/basicItemToBrowser.js';\nimport { prepareItem } from '@/navigation/BrowserNavigator/prepareItem.js';\nimport { createSafeURL } from '@/navigation/createSafeURL.js';\nimport { drop } from '@/navigation/drop.js';\nimport { ensurePrefix } from '@/navigation/ensurePrefix.js';\nimport { getPathname } from '@/navigation/getPathname.js';\nimport { go } from '@/navigation/go.js';\nimport { urlToPath } from '@/navigation/urlToPath.js';\nimport type { BasicNavigatorEvents } from '@/navigation/BasicNavigator/types.js';\nimport type {\n  BrowserNavigatorAnyHistoryItem,\n  BrowserNavigatorConOptions,\n  BrowserNavigatorEvents,\n  BrowserNavigatorHashMode,\n  BrowserNavigatorHistoryItem,\n  BrowserNavigatorHistoryItemParams,\n  URLLike,\n} from '@/navigation/BrowserNavigator/types.js';\n\nconst CURSOR_VOID = 0;\nconst CURSOR_BACK = 1;\nconst CURSOR_FORWARD = 2;\n\ntype Navigator<State> = BasicNavigator<BrowserNavigatorHistoryItemParams<State>>;\ntype Emitter<State> = EventEmitter<BrowserNavigatorEvents<State>>;\n\nexport class BrowserNavigator<State = {}> {\n  private readonly navigator: Navigator<State>;\n\n  private readonly ee: Emitter<State> = new EventEmitter();\n\n  readonly hashMode: BrowserNavigatorHashMode | null;\n\n  readonly base: string;\n\n  constructor(\n    /**\n     * Navigation history.\n     */\n    history: readonly BrowserNavigatorAnyHistoryItem<State>[],\n    /**\n     * Currently active history item index.\n     */\n    index: number,\n    { postEvent, hashMode = 'classic', base }: BrowserNavigatorConOptions = {},\n  ) {\n    this.navigator = new BasicNavigator(\n      history.map((item) => prepareItem(item, '/')),\n      index,\n      postEvent,\n    );\n    this.navigator.on('change', (e) => {\n      void this.onNavigatorChange(e);\n    });\n    this.hashMode = hashMode;\n    this.base = getPathname(base || '');\n  }\n\n  /**\n   * Shows whether the navigator is currently attached to the browser history.\n   */\n  private attached = false;\n\n  /**\n   * Attaches current navigator to the browser history allowing navigator to manipulate it.\n   */\n  async attach(): Promise<void> {\n    if (!this.attached) {\n      this.attached = true;\n      this.navigator.attach();\n      window.addEventListener('popstate', this.onPopState);\n      await this.syncHistory();\n    }\n  }\n\n  /**\n   * Goes back in history by 1.\n   */\n  back(): void {\n    this.navigator.back();\n  }\n\n  /**\n   * Detaches current navigator from the browser history.\n   */\n  detach() {\n    this.attached = false;\n    this.navigator.detach();\n    window.removeEventListener('popstate', this.onPopState);\n  }\n\n  /**\n   * Goes forward in history.\n   */\n  forward(): void {\n    return this.navigator.forward();\n  }\n\n  /**\n   * Current history cursor.\n   */\n  get index(): number {\n    return this.navigator.index;\n  }\n\n  /**\n   * Current history item identifier.\n   */\n  get id(): string {\n    return this.navigator.current.id;\n  }\n\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(delta: number, fit?: boolean): void {\n    return this.navigator.go(delta, fit);\n  }\n\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(index: number, fit?: boolean): void {\n    this.navigator.goTo(index, fit);\n  }\n\n  /**\n   * Current history item hash.\n   * @see URL.hash\n   * @example\n   * \"\", \"#my-hash\"\n   */\n  get hash(): string {\n    return (this.navigator.current.params || {}).hash || '';\n  }\n\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev(): boolean {\n    return this.navigator.hasPrev;\n  }\n\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext(): boolean {\n    return this.navigator.hasNext;\n  }\n\n  /**\n   * Navigation history.\n   */\n  get history(): BrowserNavigatorHistoryItem<State>[] {\n    return this.navigator.history.map(basicItemToBrowser);\n  }\n\n  /**\n   * Handles the window \"popstate\" event.\n   * @param state - event state.\n   */\n  private onPopState = ({ state }: PopStateEvent) => {\n    // In case state is null, we recognize current event as occurring whenever user clicks\n    // any anchor.\n    // TODO: Should we do it?\n    if (state === null) {\n      return this.push(this.parsePath(window.location.href));\n    }\n\n    // There is only one case when state can be CURSOR_VOID - when history contains\n    // only one element. In this case, we should return user to the current history element.\n    if (state === CURSOR_VOID) {\n      window.history.forward();\n    } else if (state === CURSOR_BACK) {\n      this.back();\n    }\n    if (state === CURSOR_FORWARD) {\n      this.forward();\n    }\n  };\n\n  /**\n   * Underlying navigator change event listener.\n   */\n  private onNavigatorChange = async ({\n    to,\n    from,\n    delta,\n  }: BasicNavigatorEvents<BrowserNavigatorHistoryItemParams<State>>['change']) => {\n    // If this navigator is attached to the browser history, we should synchronize.\n    if (this.attached) {\n      await this.syncHistory();\n    }\n    this.ee.emit('change', {\n      delta,\n      from: basicItemToBrowser(from),\n      to: basicItemToBrowser(to),\n      navigator: this,\n    });\n  };\n\n  /**\n   * Adds new event listener.\n   */\n  on: Emitter<State>['on'] = this.ee.on.bind(this.ee);\n\n  /**\n   * Removes event listener.\n   */\n  off: Emitter<State>['off'] = this.ee.off.bind(this.ee);\n\n  /**\n   * Path, including pathname, search and hash.\n   * @example Pathname only.\n   * \"/pathname\"\n   * @example Pathname + search.\n   * \"/pathname?search\"\n   * @example Pathname + hash.\n   * \"/pathname#hash\"\n   * @example Pathname + search + hash.\n   * \"/pathname?search#hash\"\n   */\n  get path(): string {\n    return urlToPath(this);\n  }\n\n  /**\n   * Current pathname. Always starts with the slash.\n   * @see URL.pathname\n   * @example\n   * \"/\", \"/abc\"\n   */\n  get pathname(): string {\n    return this.navigator.current.pathname;\n  }\n\n  /**\n   * Depending on the current navigation type, parses incoming path and returns it presented as\n   * an object. In other words, this method parses the passed path and returns object, describing\n   * how the navigator \"sees\" it.\n   *\n   * @example Hash mode is omitted.\n   * parsePath('/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   * parsePath('http://example.com/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   *\n   * @example Hash mode is enabled.\n   * parsePath('/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   * parsePath('http://example.com/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   */\n  parsePath(path: string | URL): URLLike {\n    let url = createSafeURL(path);\n    if (this.hashMode) {\n      url = createSafeURL(url.hash.slice(1));\n    }\n\n    return {\n      pathname: url.pathname,\n      search: url.search,\n      hash: url.hash,\n    };\n  }\n\n  /**\n   * Pushes new history item. Method replaces all entries after the current one with the one\n   * being pushed. Take a note, that passed item is always relative. In case, you want to use\n   * it as an absolute one, use the \"/\" prefix. Example: \"/absolute\", { pathname: \"/absolute\" }.\n   *\n   * To create a final path, navigator uses a method, used in the URL class constructor, resolving\n   * a path based on the current one.\n   * @param path - entry path.\n   * @param state - entry state.\n   *\n   * @example Pushing an absolute path.\n   * push(\"/absolute\"); // \"/absolute\"\n   *\n   * @example Pushing a relative path.\n   * push(\"relative\"); // \"/home/root\" -> \"/home/relative\"\n   *\n   * @example Pushing query parameters.\n   * push(\"/absolute?my-param=1\"); // \"/home/root\" -> \"/absolute?my-param=1\"\n   * push(\"relative?my-param=1\"); // \"/home/root\" -> \"/home/relative?my-param=1\"\n   * push(\"?my-param=1\"); // \"/home\" -> \"/home?my-param=1\"\n   *\n   * @example Pushing hash.\n   * push(\"#my-hash\"); // \"/home\" -> \"/home#my-hash\"\n   * push(\"relative#my-hash\"); // \"/home/root\" -> \"/home/relative#my-hash\"\n   *\n   * @example Pushing state.\n   * push(\"\", { state: 'my-state' }); \"/home/root\" -> \"/home/root\"\n   * push({ state: 'my-state' }); \"/home/root\" -> \"/home/root\"\n   */\n  push(path: string, state?: State): void;\n  push(item: BrowserNavigatorAnyHistoryItem<State>): void;\n  push(itemOrPath: string | BrowserNavigatorAnyHistoryItem<State>, fnState?: State): void {\n    const item = prepareItem(itemOrPath, this.path);\n    const { state = fnState } = item.params;\n    this.navigator.push({ ...item, params: { ...item.params, state } });\n  }\n\n  /**\n   * Replaces the current history item. Has the same logic as the `push` method.\n   * @param path - entry path.\n   * @param state - entry state.\n   * @see push\n   */\n  replace(path: string, state?: State): void;\n  replace(item: BrowserNavigatorAnyHistoryItem<State>): void;\n  replace(itemOrPath: string | BrowserNavigatorAnyHistoryItem<State>, fnState?: State): void {\n    const item = prepareItem(itemOrPath, this.path);\n    const { state = fnState } = item.params;\n    this.navigator.replace({ ...item, params: { ...item.params, state } });\n  }\n\n  /**\n   * Combines the navigator `base` property with the passed path data applying the navigator\n   * navigation mode.\n   * @param value - path presented as string or URLLike.\n   */\n  renderPath(value: string | URLLike): string {\n    const path = (this.base.length === 1 ? '' : this.base)\n      + ensurePrefix(urlToPath(value), '/');\n\n    return this.hashMode\n      ? ensurePrefix(path.slice(1), this.hashMode === 'classic' ? '#' : '#/')\n      : path;\n  }\n\n  /**\n   * Synchronizes current navigator state with browser history.\n   */\n  private async syncHistory(): Promise<void> {\n    // Remove history change event listener to get rid of side effects related to the possible\n    // future calls of history.go.\n    window.removeEventListener('popstate', this.onPopState);\n\n    const { state } = this;\n    const path = this.renderPath(this);\n\n    // Drop the browser history and work with the clean one.\n    await drop();\n\n    if (this.hasPrev && this.hasNext) {\n      // We have both previous and next elements. History should be:\n      // [back, *current*, forward]\n      window.history.replaceState(CURSOR_BACK, '');\n      window.history.pushState(state, '', path);\n      window.history.pushState(CURSOR_FORWARD, '');\n\n      await go(-1);\n    } else if (this.hasPrev) {\n      // We have only previous element. History should be:\n      // [back, *current*]\n      window.history.replaceState(CURSOR_BACK, '');\n      window.history.pushState(state, '', path);\n    } else if (this.hasNext) {\n      // We have only next element. History should be:\n      // [*current*, forward]\n      window.history.replaceState(state, path);\n      window.history.pushState(CURSOR_FORWARD, '');\n\n      await go(-1);\n    } else {\n      // We have no back and next elements. History should be:\n      // [void, *current*]\n      window.history.replaceState(CURSOR_VOID, '');\n      window.history.pushState(state, '', path);\n    }\n\n    window.addEventListener('popstate', this.onPopState);\n  }\n\n  /**\n   * Current query parameters.\n   * @see URL.search\n   * @example\n   * \"\", \"?\", \"?a=1\"\n   */\n  get search(): string {\n    return (this.navigator.current.params || {}).search || '';\n  }\n\n  /**\n   * Current history item state.\n   */\n  get state(): State | undefined {\n    return (this.navigator.current.params || {}).state;\n  }\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_INVALID_PATH_BASE } from '@/errors/errors.js';\nimport { BrowserNavigator } from '@/navigation/BrowserNavigator/BrowserNavigator.js';\nimport { getPathname } from '@/navigation/getPathname.js';\nimport { urlToPath } from '@/navigation/urlToPath.js';\nimport type { BrowserNavigatorConOptions } from '@/navigation/BrowserNavigator/types.js';\n\nexport function createBrowserNavigatorFromLocation<State>(\n  options?: BrowserNavigatorConOptions,\n): BrowserNavigator<State> {\n  options ||= {};\n  const { href, hash } = window.location;\n\n  let path = urlToPath(\n    options.hashMode === null\n      // Hash mode is explicitly disabled. We are working with the usual location path.\n      ? href\n      // If hash mode is enabled, we should create a navigator based on the location's hash.\n      // In this case we have 2 possible situations:\n      // 1. Hash contains only launch parameters. Example:\n      // #tgWebAppData=...&tgWebAppPlatform=...&...\n      // Here we should mark the launch parameters as query parameters and have pathname \"/\" as\n      // the initial one.\n      //\n      // 2. Hash contains value, passed from above and launch parameters as query parameters.\n      // For instance, we could have such a URL:\n      // https://t.me/mybot/myapp#my-hash\n      // In this case, the Mini App will be opened with this URL:\n      // https://example.com/#my-hash?tgWebAppData=...&tgWebAppPlatform=...&...\n      : hash.includes('?') ? hash.slice(1) : `?${hash.slice(1)}`,\n  );\n\n  // If some base was specified, we should check if computed path starts with this base. In\n  // case it does, it should be removed from the path. Otherwise, an error must be thrown.\n  const base = options.base ? getPathname(options.base) : undefined;\n  if (base) {\n    if (!path.startsWith(base)) {\n      throw createError(\n        ERR_INVALID_PATH_BASE,\n        `Path \"${path}\" expected to be starting with \"${base}\"`,\n      );\n    }\n    path = path.slice(base.length);\n  }\n\n  return new BrowserNavigator<State>([path], 0, options);\n}\n","/**\n * @param value - string to take hash part from.\n * @returns String after the first met \"#\" symbol. In case, value doesn't contain hashtag, the\n * function will return null.\n *\n * @example No hash.\n * getHash('/path'); // null\n *\n * @example Has hash.\n * getHash('/path#abc'); // 'abc'\n *\n * @example Has double hash.\n * getHash('/path#abc#another'); // 'abc#another'\n */\nexport function getHash(value: string): string | null {\n  const match = value.match(/#(.+)/);\n  return match ? match[1] : null;\n}\n","import {\n  BrowserNavigatorConOptions,\n  BrowserNavigatorHistoryItem,\n} from '@/navigation/BrowserNavigator/types.js';\nimport { BrowserNavigator } from '@/navigation/BrowserNavigator/BrowserNavigator.js';\nimport { isPageReload } from '@/navigation/isPageReload.js';\nimport {\n  createBrowserNavigatorFromLocation\n} from '@/navigation/BrowserNavigator/createBrowserNavigatorFromLocation.js';\n\n\nfunction instantiate<State>(\n  sessionStorageKey: string,\n  options?: BrowserNavigatorConOptions,\n): BrowserNavigator<State> {\n  // If page was reloaded, we assume that navigator had to previously save its state in the\n  // session storage.\n  if (isPageReload()) {\n    const stateRaw = sessionStorage.getItem(sessionStorageKey);\n    if (stateRaw) {\n      try {\n        const { index, history } = JSON.parse(stateRaw);\n        return new BrowserNavigator(\n          history as BrowserNavigatorHistoryItem<State>[],\n          index as number,\n          options\n        );\n      } catch (e) {\n        console.error('Unable to restore hash navigator state.', e);\n      }\n    }\n  }\n\n  // In case, we could not restore its state, or it is a fresh start, we can create an empty\n  // navigator. We are creating BrowserNavigator from the window.location.\n  return createBrowserNavigatorFromLocation(options);\n}\n\n/**\n * Initializes a standard Mini Apps navigator.\n * @param sessionStorageKey - session storage key, containing the navigator state.\n * @param options - additional BrowserNavigator options.\n */\nexport function initNavigator<State>(\n  sessionStorageKey: string,\n  options?: BrowserNavigatorConOptions,\n): BrowserNavigator<State> {\n  const navigator = instantiate<State>(sessionStorageKey, options);\n\n  const saveState = () => sessionStorage.setItem(sessionStorageKey, JSON.stringify({\n    index: navigator.index,\n    history: navigator.history,\n  }));\n\n  // Whenever navigator changes its state, we save it in the session storage.\n  navigator.on('change', saveState);\n\n  // Save the initial state to make sure nothing will break when the page was reloaded.\n  saveState();\n\n  return navigator;\n}\n"],"mappings":";;;;;;;;AAKgB,SAAAA,GACdC,CAAA,EACAC,CAAA,EAUA;EACI,IAAAC,CAAA;EACJ,MAAMC,CAAA,GAAQC,CAAA,KAAM;IACPF,CAAA,eAAaD,CAAA,IAAWA,CAAA,CAAQC,CAAM,GACxCA,CAAA;EAAA;EAGJ,QAAC,MAAOA,CAAA,KAAW,SAAYA,CAAA,GAASF,CAAA,CAAOG,CAAK,IAAID,CAAA,EAASC,CAAK;AAC/E;AClBO,SAASE,GAAYL,CAAA,EAA2C;EACrE,MAAMC,CAAA,GAAKK,CAAA;IACL;MAAEC,KAAA,EAAAL;IAAU,IAAAD,CAAA;EAClBA,CAAA,CAAGO,WAAA,CAAYR,CAAQ,GAGnBE,CAAA,IAAS,CAACD,CAAA,CAAGM,KAAA,IACWE,EAAA;AAE9B;ACLO,SAASC,GAAUV,CAAA,EAA4D;EAC/D,OAAAM,CAAA,GAAEK,SAAA,CAAUX,CAAQ,GAClC,MAAMK,EAAA,CAAYL,CAAQ;AACnC;ACJO,MAAMY,EAAA,CAAiD;EAC5DC,YACmBZ,CAAA,EACAC,CAAA,GAAyB,IAC1C;IAFiB,KAAAY,KAAA,GAAAb,CAAA,EACA,KAAAc,OAAA,GAAAb,CAAA;EAEnB;EAAA;AAAA;AAAA;AAAA;AAAA;EAOQc,MAAMf,CAAA,KAAoBC,CAAA,EAAmB;IAC7C,MAAAC,CAAA,sBAAUc,IAAA;MACVC,CAAA,GAAOC,IAAA,CACVC,cAAA,CAAe,SAAS;QACvBC,IAAA,EAAM;QACNC,MAAA,EAAQ;QACRC,MAAA,EAAQ;QACRC,sBAAA,EAAwB;QACxBC,QAAA,EAAU;MAAA,CACX,EACAC,MAAA,CAAOvB,CAAG;MAEP;QAAEwB,SAAA,EAAAC,CAAA;QAAWC,OAAA,EAAAC;MAAA,IAAY,KAAKf,OAAA;MAC9BgB,CAAA,GAAY;IAElBC,OAAA,CAAQ/B,CAAK,EACX,KAAKiB,CAAI,UAAU,KAAKJ,KAAK,IAC7B,GAAGiB,CAAS,4CACZ,IACA,GAAGA,CAAS,IAAIH,CAAA,GAAY,SAASA,CAAS,MAAM,EAAE,GAAGE,CAAA,GAAU,oBAAoBA,CAAO,KAAK,EAAE,IAErG,GAAG5B,CAAA;EAEP;EAAA;AAAA;AAAA;AAAA;EAMA+B,MAAA,GAAShC,CAAA,EAAmB;IAErB,KAAAe,KAAA,CAAM,SAAS,GAAGf,CAAI;EAC7B;EAAA;AAAA;AAAA;AAAA;EAMAiC,IAAA,GAAOjC,CAAA,EAAmB;IAEnB,KAAAe,KAAA,CAAM,OAAO,GAAGf,CAAI;EAC3B;AACF;AC3Da,MAAAkC,CAAA,GAAS,IAAIvB,EAAA,CAAO,OAAO;EACtCiB,OAAA,EAAS;EACTF,SAAA,EAAW;AACb,CAAC;AAED,IAAIS,CAAA,GAAe;AAEnB,MAAMC,EAAA,GAAqCC,CAAC;EAAEC,IAAA,EAAAvC,CAAA;EAAMwC,OAAA,EAAAvC;AAAA,MAAc;EACzDkC,CAAA,CAAAD,GAAA,CAAI,mBAAmBjC,CAAA,GAAU;IAAEsC,IAAA,EAAAvC,CAAA;IAAMwC,OAAA,EAAAvC;EAAQ,IAAI;IAAEsC,IAAA,EAAAvC;EAAA,CAAM;AACtE;AAOO,SAASyC,GAASzC,CAAA,EAAuB;EAC1CoC,CAAA,KAAiBpC,CAAA,KACJoC,CAAA,GAAApC,CAAA,EACfA,CAAA,GAASU,EAAA,CAAU2B,EAAO,IAAIhC,EAAA,CAAYgC,EAAO;AAErD;AAMO,SAASK,GAAA,GAAO1C,CAAA,EAAmB;EACpCoC,CAAA,IAEKD,CAAA,CAAAD,GAAA,CAAI,GAAGlC,CAAI;AAEtB;AC3BO,MAAM2C,CAAA,CAAqB;EAA3B9B,YAAA;IACY+B,CAAA,uCAGTC,GAAA;IAEAD,CAAA,yBAAiB;IAEjBA,CAAA,6BAAkD;EAAA;EAAA;AAAA;AAAA;EAK1DE,MAAA,EAAQ;IACN,KAAKC,SAAA,CAAUD,KAAA,IACf,KAAKE,kBAAA,GAAqB;EAC5B;EAAA;AAAA;AAAA;EAKA,IAAIzC,MAAA,EAAgB;IACX,YAAK0C,cAAA,GAAiB,KAAKD,kBAAA,CAAmBE,MAAA;EACvD;EAeAC,KAAKlD,CAAA,KAA6BC,CAAA,EAAmB;IACnD,KAAK8C,kBAAA,CAAmBI,OAAA,CAASlC,CAAA,IAAMA,CAAA,CAAE;MACvCmC,KAAA,EAAApD,CAAA;MACAqD,IAAA,EAAApD;IACD,EAAC,IAEgB,KAAK6C,SAAA,CAAUQ,GAAA,CAAItD,CAAK,KAAK,IAErCmD,OAAA,CAAQ,CAAC,CAAClC,CAAA,EAAUU,CAAI,MAAM;MAEtCV,CAAA,CAAS,GAAGhB,CAAI,GACZ0B,CAAA,IACG,KAAA4B,GAAA,CAAIvD,CAAA,EAAOiB,CAAQ;IAC1B,CACD;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASAuC,GACExD,CAAA,EACAC,CAAA,EACAC,CAAA,EACuB;IACvB,IAAIe,CAAA,GAAY,KAAK6B,SAAA,CAAUQ,GAAA,CAAItD,CAAK;IACxC,OAAKiB,CAAA,IACH,KAAK6B,SAAA,CAAUW,GAAA,CAAIzD,CAAA,EAAOiB,CAAA,GAAY,EAAE,GAG1CA,CAAA,CAAUyC,IAAA,CAAK,CAACzD,CAAA,EAAUC,CAAI,CAAC,GAC/B,KAAK8C,cAAA,IAAkB,GAEhB,MAAM,KAAKO,GAAA,CAAIvD,CAAA,EAAOC,CAAQ;EACvC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAsD,IAAiCvD,CAAA,EAAUC,CAAA,EAA0C;IACnF,MAAMC,CAAA,GAAY,KAAK4C,SAAA,CAAUQ,GAAA,CAAItD,CAAK,KAAK;IAC/C,SAASiB,CAAA,GAAI,GAAGA,CAAA,GAAIf,CAAA,CAAU+C,MAAA,EAAQhC,CAAA,IAAK,GACzC,IAAIhB,CAAA,KAAaC,CAAA,CAAUe,CAAC,EAAE,CAAC,GAAG;MACtBf,CAAA,CAAAyD,MAAA,CAAO1C,CAAA,EAAG,CAAC,GACrB,KAAK+B,cAAA,IAAkB;MACvB;IACF;EAEJ;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAtC,UAAUV,CAAA,EAA4D;IAC/D,YAAA+C,kBAAA,CAAmBW,IAAA,CAAK1D,CAAQ,GAC9B,MAAM,KAAKO,WAAA,CAAYP,CAAQ;EACxC;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAO,YAAYP,CAAA,EAA2C;IACrD,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAI,KAAK8C,kBAAA,CAAmBE,MAAA,EAAQhD,CAAA,IAAK,GACvD,IAAI,KAAK8C,kBAAA,CAAmB9C,CAAC,MAAMD,CAAA,EAAU;MACtC,KAAA+C,kBAAA,CAAmBY,MAAA,CAAO1D,CAAA,EAAG,CAAC;MACnC;IACF;EAEJ;AACF;ACvHgB,SAAA2D,EACd7D,CAAA,EACAC,CAAA,EACAC,CAAA,EACuB;EAChB,OAAA4D,MAAA,CAAAC,gBAAA,CAAiB/D,CAAA,EAAMC,CAAA,EAAUC,CAAO,GACxC,MAAM4D,MAAA,CAAOE,mBAAA,CAAoBhE,CAAA,EAAMC,CAAA,EAAUC,CAAO;AACjE;ACVO,SAAS+D,EAAA,GAAiBjE,CAAA,EAI/B;EACA,IAAIC,CAAA,GAAY;EACV,MAAAC,CAAA,GAAQF,CAAA,CAAIkE,IAAA,CAAK,CAAC;EAEjB,QACJ/D,CAAA,IAAO,CAACF,CAAA,IAAaC,CAAA,CAAMyD,IAAA,CAAKxD,CAAE,GACnC,MAAM;IACCF,CAAA,KACSA,CAAA,OACNC,CAAA,CAAAkD,OAAA,CAAiBjD,CAAA,IAAAA,CAAA,CAAO;EAElC,GACAF,CAAA;AAEJ;ACnBO,MAAMkE,CAAA,SAAiBC,KAAA,CAAM;EAClCvD,YAA4BZ,CAAA,EAAiBC,CAAA,EAAkBC,CAAA,EAAiB;IACxE,MAAAD,CAAA,EAAS;MAAEmE,KAAA,EAAAlE;IAAA,CAAO,GADE,KAAAmE,IAAA,GAAArE,CAAA,EAEnBsE,MAAA,CAAAC,cAAA,CAAe,MAAML,CAAA,CAASM,SAAS;EAChD;AACF;ACDgB,SAAAC,EAAY1E,CAAA,EAAiBC,CAAA,EAAiBC,CAAA,EAA2B;EACvF,OAAO,IAAIiE,CAAA,CAASnE,CAAA,EAAMC,CAAA,EAASC,CAAK;AAC1C;ACRO,MAAMyE,EAAA,GAAyB;EAKzBC,EAAA,GAAmC;EAKnCC,EAAA,GAAkB;EAKlBC,EAAA,GAAoC;EAKpCC,EAAA,GAAgB;EAKhBC,EAAA,GAAsB;EAKtBC,EAAA,GAAY;EAKZC,EAAA,GAA+B;EAK/BC,EAAA,GAA+B;EAK/BC,EAAA,GAA8B;EAK9BC,EAAA,GAAe;EAKfC,EAAA,GAAwB;ACnD9B,SAASC,EAAA,EAA4B;EACnC,OAAAb,CAAA,CAAYM,EAAA,EAAqB,2BAA2B;AACrE;ACHO,MAAMQ,CAAA,CAAoD;EAC/D3E,YACYZ,CAAA,EACAC,CAAA,EACAC,CAAA,EACV;IAHU,KAAAsF,MAAA,GAAAxF,CAAA,EACA,KAAAyF,UAAA,GAAAxF,CAAA,EACA,KAAAoE,IAAA,GAAAnE,CAAA;EAEZ;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAwF,MAAM1F,CAAA,EAAgE;IAGhE,WAAKyF,UAAA,IAAczF,CAAA,KAAU,SAI7B;MACK,YAAKwF,MAAA,CAAOxF,CAAK;IAAA,SACjBC,CAAA,EAAO;MACR,MAAAwE,CAAA,CACJO,EAAA,EACA,wBAAwB,KAAKX,IAAA,GAAO,OAAO,KAAKA,IAAI,KAAK,EAAE,IAC3DpE,CAAA;IAEJ;EACF;EAEA0F,SAAA,EAAwD;IACtD,YAAKF,UAAA,GAAa,IACX;EACT;AACF;AChCgB,SAAAG,EACd7F,CAAA,EACAC,CAAA,EACyB;EACzB,OAAO,MAAM,IAAIuF,CAAA,CAAYxF,CAAA,EAAQ,IAAOC,CAAI;AAClD;ACRa,MAAA6F,CAAA,GAAyCD,CAAA,CAA4B7F,CAAA,IAAU;EACtF,WAAOA,CAAA,IAAU,WACZ,OAAAA,CAAA;EAEH,MAAAC,CAAA,GAAW8F,MAAA,CAAO/F,CAAK;EAEzB,IAAAC,CAAA,KAAa,OAAOA,CAAA,KAAa,QAC5B;EAGL,IAAAA,CAAA,KAAa,OAAOA,CAAA,KAAa,SAC5B;EAGT,MAAMsF,CAAA,CAAgB;AACxB,GAAG,SAAS;ACXI,SAAAS,GACdhG,CAAA,EACAC,CAAA,EACG;EACH,MAAMC,CAAA,GAAS;EAEf,WAAWC,CAAA,IAASH,CAAA,EAAQ;IACpB,MAAAkB,CAAA,GAAalB,CAAA,CAAOG,CAAK;IAC/B,IAAI,CAACe,CAAA,EACH;IAGE,IAAAU,CAAA,EACAE,CAAA;IAGJ,IAAI,OAAOZ,CAAA,IAAe,cAAc,WAAWA,CAAA,EAE1CU,CAAA,GAAAzB,CAAA,EACP2B,CAAA,GAAS,OAAOZ,CAAA,IAAe,aAAaA,CAAA,GAAaA,CAAA,CAAWyE,KAAA,CAAMM,IAAA,CAAK/E,CAAU,OACpF;MACC;QAAEoD,IAAA,EAAMvC;MAAmB,IAAAb,CAAA;MAEjCU,CAAA,GAAOV,CAAA,CAAWgF,IAAA,IAAQ/F,CAAA,EAC1B2B,CAAA,GAAS,OAAOC,CAAA,IAAmB,aAC/BA,CAAA,GACAA,CAAA,CAAe4D,KAAA,CAAMM,IAAA,CAAKlE,CAAc;IAC9C;IAEI;MACF,MAAMA,CAAA,GAAcD,CAAA,CAAO7B,CAAA,CAAS2B,CAAI,CAAC;MACrCG,CAAA,KAAgB,WACjB7B,CAAA,CAAeC,CAAK,IAAI4B,CAAA;IAAA,SAEpBA,CAAA,EAAO;MACd,MAAM2C,CAAA,CAAYO,EAAA,EAAW,0BAA0B9E,CAAK,KAAK4B,CAAK;IACxE;EACF;EAEO,OAAA7B,CAAA;AACT;AC3CO,SAASiG,GAASnG,CAAA,EAAyC;EAChE,IAAIC,CAAA,GAAsBD,CAAA;EASxB,IANE,OAAOC,CAAA,IAAmB,aACXA,CAAA,GAAAmG,IAAA,CAAKT,KAAA,CAAM1F,CAAc,IAK1C,OAAOA,CAAA,IAAmB,YACvBA,CAAA,KAAmB,QACnBoG,KAAA,CAAMC,OAAA,CAAQrG,CAAc,GAE/B,MAAMsF,CAAA,CAAgB;EAGjB,OAAAtF,CAAA;AACT;AChBgB,SAAAsG,EAAQvG,CAAA,EAAmBC,CAAA,EAAsC;EACxE,WAAIuF,CAAA,CAAatF,CAAA,IAAU;IAC1B,MAAAC,CAAA,GAASgG,EAAA,CAASjG,CAAK;IAC7B,OAAO8F,EAAA,CAAchG,CAAA,EAASkB,CAAA,IAAUf,CAAA,CAAOe,CAAK,CAAC;EAAA,GACpD,IAAOjB,CAAI;AAChB;ACRa,MAAAuG,CAAA,GAAuCX,CAAA,CAA4B7F,CAAA,IAAU;IACpF,WAAOA,CAAA,IAAU,UACZ,OAAAA,CAAA;IAGL,WAAOA,CAAA,IAAU,UAAU;MACvB,MAAAC,CAAA,GAAMwG,MAAA,CAAOzG,CAAK;MAExB,IAAI,CAACyG,MAAA,CAAOC,KAAA,CAAMzG,CAAG,GACZ,OAAAA,CAAA;IAEX;IAEA,MAAMsF,CAAA,CAAgB;EACxB,GAAG,QAAQ;ECdEoB,CAAA,GAAuCd,CAAA,CAA4B7F,CAAA,IAAU;IACxF,IAAI,OAAOA,CAAA,IAAU,YAAY,OAAOA,CAAA,IAAU,UAChD,OAAOA,CAAA,CAAM4G,QAAA;IAEf,MAAMrB,CAAA,CAAgB;EACxB,GAAG,QAAQ;ACSJ,SAASsB,GAAa7G,CAAA,EAAiC;EAC5D,OAAOuG,CAAA,CAAK;IACVO,SAAA,EAAWH,CAAA,CAAO;IAClBI,SAAA,EAAY9G,CAAA,IAAMA;EAAA,CACnB,EAAE0F,KAAA,CAAM3F,CAAK;AAChB;ACvBO,SAASgH,GAAA,EAA6B;EAC3C,CAAC,kCAAkC,qBAAqB,UAAU,EAAE5D,OAAA,CAASpD,CAAA,IAAS;IACpF,OAAO8D,MAAA,CAAO9D,CAAoB;EAAA,CACnC;AACH;ACCgB,SAAAiH,EAAkBjH,CAAA,EAAmBC,CAAA,EAA0B;EACtE6D,MAAA,CAAAoD,aAAA,CAAc,IAAIC,YAAA,CAAa,WAAW;IAC/CC,IAAA,EAAMhB,IAAA,CAAKiB,SAAA,CAAU;MAAEP,SAAA,EAAA9G,CAAA;MAAW+G,SAAA,EAAA9G;IAAA,CAAW;IAAA;IAE7CqH,MAAA,EAAQxD,MAAA,CAAOyD;EAChB,EAAC;AACJ;ACPO,SAASC,GAAA,EAAsB;EAIpC,CACE,CAAC,gCAAgC;EAAA;EACjC,CAAC,qBAAqB,cAAc;EAAA;EACpC,CAAC,YAAY,WAAW,cAAc;EAAA;EAAA,EACtCpE,OAAA,CAASpD,CAAA,IAAS;IAElB,IAAIC,CAAA,GAAU6D,MAAA;IAEd9D,CAAA,CAAKoD,OAAA,CAAQ,CAAClD,CAAA,EAAMC,CAAA,EAAKe,CAAA,KAAQ;MAE3B,IAAAf,CAAA,KAAQe,CAAA,CAAIgC,MAAA,GAAS,GAAG;QAC1BjD,CAAA,CAAQC,CAAI,IAAI+G,CAAA;QAChB;MACF;MAEM/G,CAAA,IAAQD,CAAA,KACJA,CAAA,CAAAC,CAAI,IAAI,KAElBD,CAAA,GAAUA,CAAA,CAAQC,CAAI;IAAA,CACvB;EAAA,CACF;AACH;ACVA,MAAMuH,EAAA,GAIF;EACFC,uBAAA,EAAyBnB,CAAA,CAAK;IAC5BoB,MAAA,EAAQhB,CAAA,CAAO;IACfS,IAAA,EAAOpH,CAAA,IAAWA,CAAA,KAAU,OAAOA,CAAA,GAAQ2G,CAAA,GAASf,QAAA,GAAWD,KAAA,CAAM3F,CAAK;EAAA,CAC3E;EACD4H,qBAAA,EAAuBrB,CAAA,CAAK;IAC1BoB,MAAA,EAAQhB,CAAA,CAAO;IACfkB,MAAA,EAAS7H,CAAA,IAAUA,CAAA;IACnBiC,KAAA,EAAO0E,CAAA,CAAO,EAAEf,QAAA,CAAS;EAAA,CAC1B;EACDkC,YAAA,EAAc;IACZnC,MAAM3F,CAAA,EAAO;MACX,OAAOuG,CAAA,CAAK;QACVwB,SAAA,EAAY9H,CAAA,IACVA,CAAA,IAAU,OACN,SACA0G,CAAA,GAAShB,KAAA,CAAM1F,CAAK;MAE3B,GAAE0F,KAAA,CAAM3F,CAAA,IAAS,EAAE;IACtB;EACF;EACAgI,gBAAA,EAAkBzB,CAAA,CAAK;IACrB0B,MAAA,EAAQzB,CAAA,CAAO;IACf0B,KAAA,EAAQlI,CAAA,IACNA,CAAA,IAAU,OACN8D,MAAA,CAAOqE,UAAA,GACP3B,CAAA,GAASb,KAAA,CAAM3F,CAAK;IAE1BoI,eAAA,EAAiBtC,CAAA,CAAQ;IACzBuC,WAAA,EAAavC,CAAA,CAAQ;EAAA,CACtB;AACH;AAKO,SAASwC,GAAA,EASd;EAEM,MAAAtI,CAAA,GAAa,IAAI2C,CAAA;IAGjB1C,CAAA,GAAc,IAAI0C,CAAA;EAExB1C,CAAA,CAAYU,SAAA,CAAmBR,CAAA;IAClBH,CAAA,CAAAmD,IAAA,CAAK,SAAS;MAAEZ,IAAA,EAAMpC,CAAA,CAAMkD,KAAA;MAAOb,OAAA,EAASrC,CAAA,CAAMmD,IAAA,CAAK,CAAC;IAAG;EAAA,CACvE,GAGmBkE,EAAA;EAGd,SAAGtH,CAAO,IAAI+D,CAAA;EAAA;EAElB+C,EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAMAnD,CAAA,CAAS,UAAU,MAAM;IACvB5D,CAAA,CAAYkD,IAAA,CAAK,oBAAoB;MACnC+E,KAAA,EAAOpE,MAAA,CAAOqE,UAAA;MACdF,MAAA,EAAQnE,MAAA,CAAOyE,WAAA;MACfH,eAAA,EAAiB;MACjBC,WAAA,EAAa;IAAA,CACd;EAAA,CACF;EAAA;EAAA;EAGDxE,CAAA,CAAS,WAAY1D,CAAA,IAAU;IAEzB,IAAAA,CAAA,CAAMmH,MAAA,KAAWxD,MAAA,CAAOyD,MAAA,EAC1B;IAIE,IAAArG,CAAA;IACA;MACQA,CAAA,GAAA2F,EAAA,CAAa1G,CAAA,CAAMiH,IAAI;IAAA,QAC3B;MAEN;IACF;IAEM;QAAEN,SAAA,EAAAlF,CAAA;QAAWmF,SAAA,EAAAjF;MAAc,IAAAZ,CAAA;MAC3Ba,CAAA,GAAS0F,EAAA,CAAQ7F,CAAiC;IAEpD;MACF,MAAM4G,CAAA,GAAOzG,CAAA,GAASA,CAAA,CAAO4D,KAAA,CAAM7D,CAAS,IAAIA,CAAA;MACpC7B,CAAA,CAAAkD,IAAA,CAAK,IAAIqF,CAAA,GAAO,CAAC5G,CAAA,EAAW4G,CAAI,IAAI,CAAC5G,CAAS,CAAgB;IAAA,SACnE4G,CAAA,EAAO;MACPrG,CAAA,CAAAF,KAAA,CACL,qCAAqCL,CAAS;AAAA;AAAA,iEAC9CV,CAAA,EACAsH,CAAA;IAEJ;EAAA,CACD;EAAA;EAED,MAAMxI,CAAA,CAAW8C,KAAA,CAAM,GACvB,MAAM7C,CAAA,CAAY6C,KAAA,CAAM;EAG1B,OAAO,CAAC;IACNW,EAAA,EAAIxD,CAAA,CAAYwD,EAAA,CAAGwC,IAAA,CAAKhG,CAAW;IACnCuD,GAAA,EAAKvD,CAAA,CAAYuD,GAAA,CAAIyC,IAAA,CAAKhG,CAAW;IACrCU,UAAUR,CAAA,EAAU;MACX,OAAAH,CAAA,CAAWyD,EAAA,CAAG,SAAStD,CAAQ;IACxC;IACAK,YAAYL,CAAA,EAAU;MACTH,CAAA,CAAAwD,GAAA,CAAI,SAASrD,CAAQ;IAClC;IACA,IAAII,MAAA,EAAQ;MACH,OAAAN,CAAA,CAAYM,KAAA,GAAQP,CAAA,CAAWO,KAAA;IACxC;EAAA,GACCL,CAAO;AACZ;AClJA,MAAM,CAACuI,EAAA,EAAKhI,EAAyB,IAAIV,EAAA,CACtCC,CAAA,IAAU;EACT,MAAM,CAACC,CAAA,EAASC,CAAO,IAAIoI,EAAA,CAA2B;IAGhDnI,CAAA,GAAMF,CAAA,CAAQuD,GAAA,CAAIyC,IAAA,CAAKhG,CAAO;EAC5B,OAAAA,CAAA,CAAAuD,GAAA,GAAM,CAACtC,CAAA,EAAOU,CAAA,KAAa;IAC3B;MAAErB,KAAA,EAAAuB;IAAU,IAAA7B,CAAA;IAClBE,CAAA,CAAIe,CAAA,EAAOU,CAAQ,GAGfE,CAAA,IAAS,CAAC7B,CAAA,CAAQM,KAAA,IACdP,CAAA;EACR,GAGK,CAACC,CAAA,EAASC,CAAO;AAC1B,GACA,CAAC,GAAGF,CAAO,MAAMA,CAAA,CAAQ,CAC3B;AAKO,SAASM,EAAA,EAA6C;EACpD,OAAAmI,EAAA,GAAM,CAAC;AAChB;ACvBgB,SAAAC,EACd1I,CAAA,EACAC,CAAA,EACM;EACeK,CAAA,GAAEkD,GAAA,CAAIxD,CAAA,EAAOC,CAAQ;AAC5C;ACAgB,SAAA0I,EACd3I,CAAA,EACAC,CAAA,EACAC,CAAA,EACuB;EACvB,OAAOI,CAAA,CAAqB,EAAEmD,EAAA,CAAGzD,CAAA,EAAOC,CAAA,EAAUC,CAAI;AACxD;ACfO,SAAS0I,EAAS5I,CAAA,EAAkD;EAClE,cAAOA,CAAA,IAAU,YAAYA,CAAA,KAAU,QAAQ,CAACqG,KAAA,CAAMC,OAAA,CAAQtG,CAAK;AAC5E;ACGgB,SAAA6I,GAAgB7I,CAAA,EAAYC,CAAA,EAAoB;EAExD,MAAAC,CAAA,GAASF,CAAA,CAAE8I,KAAA,CAAM,GAAG;IACpB3I,CAAA,GAASF,CAAA,CAAE6I,KAAA,CAAM,GAAG;IAGpB5H,CAAA,GAAM6H,IAAA,CAAKC,GAAA,CAAI9I,CAAA,CAAOgD,MAAA,EAAQ/C,CAAA,CAAO+C,MAAM;EAIjD,SAAStB,CAAA,GAAI,GAAGA,CAAA,GAAIV,CAAA,EAAKU,CAAA,IAAK,GAAG;IAC/B,MAAME,CAAA,GAAOmH,QAAA,CAAS/I,CAAA,CAAO0B,CAAC,KAAK,KAAK,EAAE;MACpCG,CAAA,GAAOkH,QAAA,CAAS9I,CAAA,CAAOyB,CAAC,KAAK,KAAK,EAAE;IAE1C,IAAIE,CAAA,KAASC,CAAA,EAGN,OAAAD,CAAA,GAAOC,CAAA,GAAO,IAAI;EAC3B;EACO;AACT;AChBA,SAASmH,EAAmBlJ,CAAA,EAAYC,CAAA,EAAqB;EACpD,OAAA4I,EAAA,CAAgB7I,CAAA,EAAGC,CAAC,KAAK;AAClC;AAqBgB,SAAAkJ,EACdnJ,CAAA,EACAC,CAAA,EACAC,CAAA,EACS;EAEL,WAAOA,CAAA,IAAc,UAAU;IACjC,IAAIF,CAAA,KAAW,qBAAqB;MAClC,IAAIC,CAAA,KAAmB,oBACd,OAAAiJ,CAAA,CAAmB,OAAOhJ,CAAS;MAE5C,IAAID,CAAA,KAAmB,eACd,OAAAiJ,CAAA,CAAmB,OAAOhJ,CAAS;IAE9C;IAEA,IAAIF,CAAA,KAAW,8BACTC,CAAA,KAAmB,SACd,OAAAiJ,CAAA,CAAmB,OAAOhJ,CAAS;IAI1C,IAAAF,CAAA,KAAW,mBAAmBC,CAAA,KAAmB,eAC5C,OAAAiJ,CAAA,CAAmB,OAAOhJ,CAAS;EAE9C;EAEA,QAAQF,CAAA;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;MACI,OAAAkJ,CAAA,CAAmB,OAAOjJ,CAAc;IACjD,KAAK;MACI,OAAAiJ,CAAA,CAAmB,OAAOjJ,CAAc;IACjD,KAAK;IACL,KAAK;IACL,KAAK;MACI,OAAAiJ,CAAA,CAAmB,OAAOjJ,CAAc;IACjD,KAAK;MACI,OAAAiJ,CAAA,CAAmB,OAAOjJ,CAAc;IACjD,KAAK;IACL,KAAK;IACL,KAAK;MACI,OAAAiJ,CAAA,CAAmB,OAAOjJ,CAAc;IACjD,KAAK;MACI,OAAAiJ,CAAA,CAAmB,QAAQjJ,CAAc;IAClD,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;MACI,OAAAiJ,CAAA,CAAmB,OAAOjJ,CAAc;IACjD;MACS,QACL,gBACA,sBACA,iBACA,qBACA,kBACA,qBACA,iBACA,yBACA,4BACA,6BACA,kCACAmJ,QAAA,CAASpJ,CAAM;EACrB;AACF;ACnGO,SAASqJ,GAAoCrJ,CAAA,EAKjD;EACD,OAAO,cAAcA,CAAA,IAChB4I,CAAA,CAAS5I,CAAA,CAAMsJ,QAAQ,KACvB,YAAYtJ,CAAA,CAAMsJ,QAAA,IAClB,OAAOtJ,CAAA,CAAMsJ,QAAA,CAASC,MAAA,IAAW;AACxC;ACVO,SAASC,GAA8BxJ,CAAA,EAK3C;EACD,OAAO,0BAA0BA,CAAA,IAC5B4I,CAAA,CAAS5I,CAAA,CAAMyJ,oBAAoB,KACnC,eAAezJ,CAAA,CAAMyJ,oBAAA,IACrB,OAAOzJ,CAAA,CAAMyJ,oBAAA,CAAqBC,SAAA,IAAc;AACvD;ACbO,SAASC,GAAA,EAAoB;EAC9B;IACK,OAAA7F,MAAA,CAAO8F,IAAA,KAAS9F,MAAA,CAAO+F,GAAA;EAAA,QACxB;IACC;EACT;AACF;ACVA,MAAMC,EAAA,GAAwB;AAE9B,IAAIC,EAAA,GAAsBD,EAAA;AAWnB,SAASE,GAAgBhK,CAAA,EAAqB;EAC7B+J,EAAA,GAAA/J,CAAA;AACxB;AAYO,SAASiK,GAAA,EAAuB;EAC9B,OAAAF,EAAA;AACT;ACwCgB,SAAAG,EACdlK,CAAA,EACAC,CAAA,EACAC,CAAA,EACM;EACN,IAAIC,CAAA,GAAgC;IAChCe,CAAA;EAuBJ,IArBI,CAACjB,CAAA,IAAmB,CAACC,CAAA,GAEvBC,CAAA,GAAc,KACLF,CAAA,IAAmBC,CAAA,IAEdC,CAAA,GAAAD,CAAA,EACFgB,CAAA,GAAAjB,CAAA,IACHA,CAAA,KAEL,kBAAkBA,CAAA,GACNE,CAAA,GAAAF,CAAA,GAEFiB,CAAA,GAAAjB,CAAA,GAIZyC,EAAA,mBAAkBxB,CAAA,GAClB;IAAEmC,KAAA,EAAOrD,CAAA;IAAWoH,IAAA,EAAMlG;EAAA,IAC1B;IAAEmC,KAAA,EAAOrD;EAAW,IAGpB2J,EAAA,IACF,OAAO7F,MAAA,CAAOyD,MAAA,CAAO4C,WAAA,CACnB/D,IAAA,CAAKiB,SAAA,CAAU;IAAEP,SAAA,EAAA9G,CAAA;IAAW+G,SAAA,EAAA7F;EAAA,CAAW,GACvCf,CAAA,CAAYiK,YAAA,IAAgBH,EAAA,CAAe;EAK3C,IAAAZ,EAAA,CAAkBvF,MAAM,GAAG;IACtBA,MAAA,CAAAwF,QAAA,CAASC,MAAA,CAAOnD,IAAA,CAAKiB,SAAA,CAAU;MAAEP,SAAA,EAAA9G,CAAA;MAAW+G,SAAA,EAAA7F;IAAW,EAAC;IAC/D;EACF;EAGI,IAAAsI,EAAA,CAAgB1F,MAAM,GAAG;IAC3BA,MAAA,CAAO2F,oBAAA,CAAqBC,SAAA,CAAU1J,CAAA,EAAWoG,IAAA,CAAKiB,SAAA,CAAUnG,CAAS,CAAC;IAC1E;EACF;EAGM,MAAAwD,CAAA,CACJG,EAAA,EACA;AAEJ;ACxGO,SAASwF,GAAgBrK,CAAA,EAA6B;EACpD,QAACC,CAAA,EAAaC,CAAA,KAAgB;IAGnC,IAAI,CAACiJ,CAAA,CAASlJ,CAAA,EAAQD,CAAO,GAC3B,MAAM0E,CAAA,CAAYC,EAAA,EAAwB,WAAW1E,CAAM,yCAAyCD,CAAO,EAAE;IAM/G,IACE4I,CAAA,CAAS1I,CAAM,KACZD,CAAA,KAAW,8BACX,WAAWC,CAAA,IACX,CAACiJ,CAAA,CAASlJ,CAAA,EAAQ,SAASD,CAAO,GAE/B,MAAA0E,CAAA,CACJE,EAAA,EACA,yBAAyB3E,CAAM,gDAAgDD,CAAO;IAInF,OAAAkK,CAAA,CAAUjK,CAAA,EAAQC,CAAM;EAAA;AAEnC;ACpCO,SAASoK,GAAetK,CAAA,EAAiC;EAC9D,OAAO,CAAC;IAAE2H,MAAA,EAAA1H;EAAA,MAAaA,CAAA,KAAWD,CAAA;AACpC;ACDO,SAASuK,GAAmBvK,CAAA,EAA2B;EAC5D,OAAO0E,CAAA,CAAYK,EAAA,EAAe,oBAAoB/E,CAAO,IAAI;AACnE;ACHgB,SAAAwK,GACdxK,CAAA,EACAC,CAAA,EACY;EACZ,OAAOwK,OAAA,CAAQC,IAAA,CAAK,CAClB,OAAO1K,CAAA,IAAkB,aAAaA,CAAA,KAAkBA,CAAA,EACxD,IAAIyK,OAAA,CAAe,CAACvK,CAAA,EAAGC,CAAA,KAAQ;IAC7BwK,UAAA,CAAW,MAAM;MACXxK,CAAA,CAAAoK,EAAA,CAAmBtK,CAAO,CAAC;IAAA,GAC9BA,CAAO;EAAA,CACX,EACF;AACH;ACgEA,eAAsB2K,EACpB5K,CAAA,EAG2B;EACvB,IAAAC,CAAA;EACJ,MAAMC,CAAA,GAAU,IAAIuK,OAAA,CAA0B1I,CAAA,IAAO9B,CAAA,GAAU8B,CAAG;IAE5D;MAAEsB,KAAA,EAAAlD,CAAA;MAAO0K,OAAA,EAAA3J,CAAA;MAAS4J,OAAA,EAAAlJ;IAAA,IAAY5B,CAAA;IAC9B,GAAG8B,CAAO,IAAImC,CAAA;IAAA;IAAA,CAEjBoC,KAAA,CAAMC,OAAA,CAAQnG,CAAK,IAAIA,CAAA,GAAQ,CAACA,CAAK,GAAG4K,GAAA,CAAKhJ,CAAA,IAIrC4G,CAAA,CAAG5G,CAAA,EAAKyG,CAAA,IAAY;MACzB,CAAI,CAACtH,CAAA,KACHmF,KAAA,CAAMC,OAAA,CAAQnG,CAAK,IACde,CAAA,CAAwD;QACzDmC,KAAA,EAAOtB,CAAA;QACPS,OAAA,EAAAgG;MAAA,CACD,IACEtH,CAAA,CAAqDsH,CAAO,OAEjEvI,CAAA,CAAQuI,CAAO;IACjB,CACD,CACF;EAGC;IACF,QAACxI,CAAA,CAAQ0J,SAAA,IAAaQ,CAAA,EAAkBlK,CAAA,CAAQgL,MAAA,EAAgBhL,CAAA,CAAgBiL,MAAM,GAC/E,OAAOrJ,CAAA,GAAU4I,EAAA,CAAYtK,CAAA,EAAS0B,CAAO,IAAI1B,CAAA;EAAA,UACxD;IAEQ4B,CAAA;EACV;AACF;AChFA,eAAsBoJ,EACpBlL,CAAA,EACAC,CAAA,EACAC,CAAA,EACAC,CAAA,GAA8B,IACZ;EACZ;IACJ0H,MAAA,EAAA3G,CAAA;IACAe,KAAA,EAAAL;EACF,IAAI,MAAMgJ,CAAA,CAAQ;IAChB,GAAGzK,CAAA;IACH6K,MAAA,EAAQ;IACR3H,KAAA,EAAO;IACP4H,MAAA,EAAQ;MACND,MAAA,EAAAhL,CAAA;MACAiL,MAAA,EAAAhL,CAAA;MACA0H,MAAA,EAAQzH;IACV;IACA2K,OAAA,EAASP,EAAA,CAAepK,CAAS;EAAA,CAClC;EAED,IAAI0B,CAAA,EACI,MAAA8C,CAAA,CAAYI,EAAA,EAAmClD,CAAK;EAGrD,OAAAV,CAAA;AACT;ACrDO,SAASiK,EAAA,GAAcnL,CAAA,EAAuB;EAC5C,OAAAA,CAAA,CACJ+K,GAAA,CAAK9K,CAAA,IAAU;IACV,WAAOA,CAAA,IAAU,UACZ,OAAAA,CAAA;IAGL,IAAA2I,CAAA,CAAS3I,CAAK,GAChB,OAAOkL,CAAA,CAAW5G,MAAA,CAAO6G,OAAA,CAAQnL,CAAK,EAAE8K,GAAA,CAAK7K,CAAA,IAAUA,CAAA,CAAM,CAAC,KAAKA,CAAA,CAAM,CAAC,CAAC,CAAC;IAG1E,IAAAmG,KAAA,CAAMC,OAAA,CAAQrG,CAAK,GAEd,OAAAkL,CAAA,CAAW,GAAGlL,CAAK;EAE7B,GACAoL,MAAA,CAAOC,OAAO,EACdC,IAAA,CAAK,GAAG;AACb;ACVO,SAASC,GAAA,GAAoCxL,CAAA,EAAiC;EACnF,OAAOA,CAAA,CAASyL,MAAA,CAA2B,CAACxL,CAAA,EAAKC,CAAA,MAC1C0I,CAAA,CAAS1I,CAAO,KAIdqE,MAAA,CAAA6G,OAAA,CAAQlL,CAAO,EAAEkD,OAAA,CAAQ,CAAC,CAACjD,CAAA,EAAKe,CAAK,MAAM;IAChD,MAAMU,CAAA,GAAYuJ,CAAA,CAAYlL,CAAA,CAAYE,CAAG,GAAGe,CAAK;IAEjDU,CAAA,CAAUsB,MAAA,KACXjD,CAAA,CAAYE,CAAG,IAAIyB,CAAA;EACtB,CACD,GAEM3B,CAAA,GACN,CAAwB;AAC7B;AC/BO,SAASyL,EAAM1L,CAAA,EAA6B;EAC1C,wBAAiB2L,IAAA,CAAK3L,CAAK;AACpC;ACFO,SAAS4L,GAAW5L,CAAA,EAAkC;EACpD,wBAAiB2L,IAAA,CAAK3L,CAAK;AACpC;ACKO,SAAS6L,GAAM7L,CAAA,EAAoB;EAExC,MAAMC,CAAA,GAAQD,CAAA,CAAM8L,OAAA,CAAQ,OAAO,EAAE,EAAEC,WAAA;EAGnC,IAAAL,CAAA,CAAMzL,CAAK,GACN,OAAAA,CAAA;EAIL,IAAA2L,EAAA,CAAW3L,CAAK,GAAG;IACrB,IAAIE,CAAA,GAAa;IACjB,SAASe,CAAA,GAAI,GAAGA,CAAA,GAAI,GAAGA,CAAA,IAAK,GAC1Bf,CAAA,IAASF,CAAA,CAAM,IAAIiB,CAAC,EAAE8K,MAAA,CAAO,CAAC;IAEzB,OAAA7L,CAAA;EACT;EAGA,MAAMD,CAAA,GAAQD,CAAA,CAAMgM,KAAA,CAAM,wCAAwC,KAC7DhM,CAAA,CAAMgM,KAAA,CAAM,iDAAiD;EAIlE,IAAI,CAAC/L,CAAA,EACH,MAAM,IAAIkE,KAAA,CAAM,UAAUpE,CAAK,8CAA8C;EAK/E,OAAOE,CAAA,CAAMgM,KAAA,CAAM,CAAC,EAAET,MAAA,CAAO,CAACtL,CAAA,EAAKe,CAAA,KAAc;IAC/C,MAAMU,CAAA,GAAYqH,QAAA,CAAS/H,CAAA,EAAW,EAAE,EAAE0F,QAAA,CAAS,EAAE;IACrD,OAAOzG,CAAA,IAAOyB,CAAA,CAAUsB,MAAA,KAAW,IAAI,MAAM,MAAMtB,CAAA;EAAA,GAClD,GAAG;AACR;ACxCO,SAASuK,GAAYnM,CAAA,EAAwB;EAE5C,MAAAC,CAAA,GAAM4L,EAAA,CAAM7L,CAAK;EAIvB,OAAO+I,IAAA,CAAKqD,IAAA,CACV,CAAC,OAAO,OAAO,KAAK,EAAEX,MAAA,CAAe,CAACvL,CAAA,EAAKC,CAAA,EAAUe,CAAA,KAAQ;IAE3D,MAAMU,CAAA,GAAMqH,QAAA,CAAShJ,CAAA,CAAIiM,KAAA,CAAM,IAAIhL,CAAA,GAAM,GAAG,KAAKA,CAAA,GAAM,KAAK,CAAC,GAAG,EAAE;IAC3D,OAAAhB,CAAA,GAAM0B,CAAA,GAAMA,CAAA,GAAMzB,CAAA;EAAA,GACxB,CAAC,CACF;AACN;ACdO,MAAMkM,EAAA,CAA4B;EAGvCxL,YAImBZ,CAAA,EACjB;IAPe2C,CAAA,aAAqB,IAAID,CAAA;IA8D1C;AAAA;AAAA;IAAAC,CAAA,aAA2B,KAAK4E,EAAA,CAAG/D,EAAA,CAAGwC,IAAA,CAAK,KAAKuB,EAAE;IAKlD;AAAA;AAAA;IAAA5E,CAAA,cAA6B,KAAK4E,EAAA,CAAGhE,GAAA,CAAIyC,IAAA,CAAK,KAAKuB,EAAE;IA7DlC,KAAA8E,KAAA,GAAArM,CAAA;EAEnB;EAAA;AAAA;AAAA;EAKAsM,MAAA,EAAe;IACN;MAAE,GAAG,KAAKD;IAAA;EACnB;EAaA5I,IAAIzD,CAAA,EAAgDC,CAAA,EAAqC;IACrEqE,MAAA,CACf6G,OAAA,CAAQ,OAAOnL,CAAA,IAAe,WAAW;MAAE,CAACA,CAAU,GAAGC;IAAA,IAAaD,CAAU,EAChFwL,MAAA,CAAO,CAACvK,CAAA,EAAK,CAACU,CAAA,EAAKE,CAAK,MAEnB,KAAKwK,KAAA,CAAM1K,CAAkB,MAAME,CAAA,IAASA,CAAA,KAAU,SACjDZ,CAAA,IAIJ,KAAAoL,KAAA,CAAM1K,CAAkB,IAAIE,CAAA,EAEhC,KAAK0F,EAAA,CAAWrE,IAAA,CAAK,UAAUvB,CAAG,IAAIE,CAAK,GAErC,KACN,EAAK,KAIP,KAAK0F,EAAA,CAAWrE,IAAA,CAAK,UAAU,KAAKmJ,KAAK;EAE9C;EAAA;AAAA;AAAA;AAAA;EAMA/I,IAAiCtD,CAAA,EAAkB;IAC1C,YAAKqM,KAAA,CAAMrM,CAAG;EACvB;AAWF;ACzEO,MAAMuM,CAAA,CAAqC;EAGhD3L,YAAYZ,CAAA,EAAc;IAFhB2C,CAAA;IAYA;AAAA;AAAA;IAAAA,CAAA;IAKA;AAAA;AAAA;IAAAA,CAAA;IAKA;AAAA;AAAA;IAAAA,CAAA;IAnBH,KAAA0J,KAAA,GAAQ,IAAID,EAAA,CAAMpM,CAAK,GAC5B,KAAKyD,GAAA,GAAM,KAAK4I,KAAA,CAAM5I,GAAA,CAAIuC,IAAA,CAAK,KAAKqG,KAAK,GACzC,KAAK/I,GAAA,GAAM,KAAK+I,KAAA,CAAM/I,GAAA,CAAI0C,IAAA,CAAK,KAAKqG,KAAK,GACzC,KAAKC,KAAA,GAAQ,KAAKD,KAAA,CAAMC,KAAA,CAAMtG,IAAA,CAAK,KAAKqG,KAAK;EAC/C;AAgBF;ACbgB,SAAAG,GACdzM,CAAA,EACAC,CAAA,EACoB;EACpB,OAAQC,CAAA,IAAWiJ,CAAA,CAASlJ,CAAA,CAAOC,CAAM,GAAGF,CAAO;AACrD;ACZO,MAAM0M,CAAA,SACLF,CAAA,CAA2B;EACjC3L,YAIEX,CAAA,EAIAC,CAAA,EAIAe,CAAA,EACA;IACA,MAAMhB,CAAU;IAOlB;AAAA;AAAA;IAAA0C,CAAA;IANO,KAAA+J,QAAA,GAAWF,EAAA,CAAiBtM,CAAA,EAASe,CAAc;EAC1D;AAMF;AChBO,MAAM0L,EAAA,SAAmBF,CAAA,CAA4D;EAC1F7L,YAAYX,CAAA,EAAoBC,CAAA,EAAmCe,CAAA,EAAsB;IACjF;MAAE2L,SAAA,EAAA3M;IAAU,GAAGC,CAAA,EAAS;MAC5B2M,IAAA,EAAM;MACNC,IAAA,EAAM;IAAA,CACP;IA2BH;AAAA;AAAA;AAAA;AAAA;IAAAnK,CAAA,aAAoB,CAAC1C,CAAA,EAAOC,CAAA,KAC1BD,CAAA,KAAU,UACNyI,CAAA,CAAG,uBAAuBxI,CAAQ,IAElC,KAAKmM,KAAA,CAAM7I,EAAA,CAAGvD,CAAA,EAAOC,CAAe;IAQ1C;AAAA;AAAA;AAAA;AAAA;IAAAyC,CAAA,cAAsB,CAAC1C,CAAA,EAAOC,CAAA,KAC5BD,CAAA,KAAU,UACNwI,CAAA,CAAI,uBAAuBvI,CAAQ,IAEnC,KAAKmM,KAAA,CAAM9I,GAAA,CAAItD,CAAA,EAAOC,CAAe;IA/CwB,KAAAuJ,SAAA,GAAAxI,CAAA;EAKnE;EAEA,IAAY2L,UAAU3M,CAAA,EAAkB;IACjC,KAAAwD,GAAA,CAAI,aAAaxD,CAAO,GAC7B,KAAKwJ,SAAA,CAAU,6BAA6B;MAAEsD,UAAA,EAAY9M;IAAS;EACrE;EAAA;AAAA;AAAA;EAKA,IAAI2M,UAAA,EAAqB;IAChB,YAAKtJ,GAAA,CAAI,WAAW;EAC7B;EAAA;AAAA;AAAA;EAKAwJ,KAAA,EAAa;IACX,KAAKF,SAAA,GAAY;EACnB;EAAA;AAAA;AAAA;EA6BAC,KAAA,EAAa;IACX,KAAKD,SAAA,GAAY;EACnB;AACF;AChEO,MAAMI,EAAA,GAAmCpH,CAAA,CAA4B7F,CAAA,IAC1EA,CAAA,YAAiBiB,IAAA,GACbjB,CAAA,GACA,IAAIiB,IAAA,CAAKuF,CAAA,GAASb,KAAA,CAAM3F,CAAK,IAAI,GAAI,GACxC,MAAM;ACDO,SAAAkN,EAAgBlN,CAAA,EAAmBC,CAAA,EAAsC;EAChF,WAAIuF,CAAA,CAAatF,CAAA,IAAU;IAChC,IAAI,OAAOA,CAAA,IAAU,YAAY,EAAEA,CAAA,YAAiBiN,eAAA,GAClD,MAAM5H,CAAA,CAAgB;IAGxB,MAAMpF,CAAA,GAAS,OAAOD,CAAA,IAAU,WAAW,IAAIiN,eAAA,CAAgBjN,CAAK,IAAIA,CAAA;IAEjE,OAAA8F,EAAA,CAAchG,CAAA,EAASkB,CAAA,IAAU;MAChC,MAAAU,CAAA,GAAazB,CAAA,CAAOoD,GAAA,CAAIrC,CAAK;MAC5B,OAAAU,CAAA,KAAe,OAAO,SAAYA,CAAA;IAAA,CAC1C;EAAA,GACA,IAAO3B,CAAI;AAChB;ACjBO,MAAMmN,EAAA,GAAO7G,CAAA,CAAW;IAC7B8G,EAAA,EAAI7G,CAAA,CAAO;IACXlC,IAAA,EAAMqC,CAAA,CAAO;IACb2G,KAAA,EAAO3G,CAAA,CAAO;IACd4G,QAAA,EAAU;MACRjJ,IAAA,EAAMqC,CAAA,CAAO,EAAEf,QAAA,CAAS;MACxBM,IAAA,EAAM;IACR;IACAsH,QAAA,EAAU7G,CAAA,CAAO,EAAEf,QAAA,CAAS;EAC9B,GAAG,MAAM,EACNA,QAAA,CAAS;ECTC6H,EAAA,GAAOlH,CAAA,CAAW;IAC7BmH,qBAAA,EAAuB;MACrBpJ,IAAA,EAAMwB,CAAA,CAAQ,EAAEF,QAAA,CAAS;MACzBM,IAAA,EAAM;IACR;IACAyH,eAAA,EAAiB;MACfrJ,IAAA,EAAMwB,CAAA,CAAQ,EAAEF,QAAA,CAAS;MACzBM,IAAA,EAAM;IACR;IACA0H,SAAA,EAAW;MACTtJ,IAAA,EAAMqC,CAAA,CAAO;MACbT,IAAA,EAAM;IACR;IACAmH,EAAA,EAAI7G,CAAA,CAAO;IACXqH,KAAA,EAAO;MACLvJ,IAAA,EAAMwB,CAAA,CAAQ,EAAEF,QAAA,CAAS;MACzBM,IAAA,EAAM;IACR;IACA4H,SAAA,EAAW;MACTxJ,IAAA,EAAMwB,CAAA,CAAQ,EAAEF,QAAA,CAAS;MACzBM,IAAA,EAAM;IACR;IACA6H,YAAA,EAAc;MACZzJ,IAAA,EAAMqC,CAAA,CAAO,EAAEf,QAAA,CAAS;MACxBM,IAAA,EAAM;IACR;IACA8H,QAAA,EAAU;MACR1J,IAAA,EAAMqC,CAAA,CAAO,EAAEf,QAAA,CAAS;MACxBM,IAAA,EAAM;IACR;IACAqH,QAAA,EAAU;MACRjJ,IAAA,EAAMqC,CAAA,CAAO,EAAEf,QAAA,CAAS;MACxBM,IAAA,EAAM;IACR;IACAsH,QAAA,EAAU7G,CAAA,CAAO,EAAEf,QAAA,CAAS;EAC9B,GAAG,MAAM,EACNA,QAAA,CAAS;AC9BL,SAASqI,GAAA,EAA+C;EAC7D,OAAOf,CAAA,CAA6B;IAClCgB,QAAA,EAAU;MACR5J,IAAA,EAAM2I,EAAA,CAAK;MACX/G,IAAA,EAAM;IACR;IACAiI,YAAA,EAAc;MACZ7J,IAAA,EAAMkC,CAAA,CAAO,EAAEZ,QAAA,CAAS;MACxBM,IAAA,EAAM;IACR;IACAkI,IAAA,EAAAhB,EAAA;IACAiB,YAAA,EAAc;MACZ/J,IAAA,EAAMqC,CAAA,CAAO,EAAEf,QAAA,CAAS;MACxBM,IAAA,EAAM;IACR;IACAoI,QAAA,EAAU;MACRhK,IAAA,EAAMqC,CAAA,CAAO,EAAEf,QAAA,CAAS;MACxBM,IAAA,EAAM;IACR;IACAqI,IAAA,EAAM5H,CAAA,CAAO;IACb6H,OAAA,EAAS;MACPlK,IAAA,EAAMqC,CAAA,CAAO,EAAEf,QAAA,CAAS;MACxBM,IAAA,EAAM;IACR;IACAuI,QAAA,EAAUhB,EAAA;IACViB,UAAA,EAAY;MACVpK,IAAA,EAAMqC,CAAA,CAAO,EAAEf,QAAA,CAAS;MACxBM,IAAA,EAAM;IACR;IACAyI,IAAA,EAAAlB;EAAA,GACC,UAAU;AACf;AClCa,MAAAmB,EAAA,GAAiC/I,CAAA,CAA4B7F,CAAA,IAAU6L,EAAA,CAAMlF,CAAA,CAAO,EAAEhB,KAAA,CAAM3F,CAAK,CAAC,GAAG,KAAK;ACNhH,SAAS6O,GAAW7O,CAAA,EAAqB;EACvC,OAAAA,CAAA,CAAI8L,OAAA,CAAQ,WAAY7L,CAAA,IAAUA,CAAA,CAAM,CAAC,EAAE6O,WAAA,EAAa;AACjE;AAOO,SAASC,GAAc/O,CAAA,EAAqB;EAC1C,OAAAA,CAAA,CAAI8L,OAAA,CAAQ,UAAW7L,CAAA,IAAU,IAAIA,CAAA,CAAM8L,WAAA,EAAa,EAAE;AACnE;ACRO,MAAMiD,EAAA,GAAuDnJ,CAAA,CACjE7F,CAAA,IAAU;EACH,MAAAC,CAAA,GAAc2O,EAAA,GAAMhJ,QAAA;EAE1B,OAAOrB,MAAA,CACJ6G,OAAA,CAAQjF,EAAA,CAASnG,CAAK,CAAC,EACvByL,MAAA,CAA0B,CAACvL,CAAA,EAAK,CAACC,CAAA,EAAGe,CAAC,OACpChB,CAAA,CAAI2O,EAAA,CAAW1O,CAAC,CAAC,IAAIF,CAAA,CAAY0F,KAAA,CAAMzE,CAAC,GACjChB,CAAA,GACN,CAAE;AACT,GACA,aACF;ACPO,SAAS+O,EAAkBjP,CAAA,EAA8B;EAC9D,OAAOkN,CAAA,CAAa;IAClBgC,SAAA,EAAW;MACT5K,IAAA,EAAMwB,CAAA,CAAQ,EAAEF,QAAA,CAAS;MACzBM,IAAA,EAAM;IACR;IACAiJ,QAAA,EAAU;MACR7K,IAAA,EAAM2J,EAAA,CAAS,EAAErI,QAAA,CAAS;MAC1BM,IAAA,EAAM;IACR;IACAkJ,WAAA,EAAa;MACX9K,IAAA,EAAMqC,CAAA,CAAO,EAAEf,QAAA,CAAS;MACxBM,IAAA,EAAM;IACR;IACAmJ,QAAA,EAAU;MACR/K,IAAA,EAAMqC,CAAA,CAAO;MACbT,IAAA,EAAM;IACR;IACAoJ,YAAA,EAAc;MACZhL,IAAA,EAAMwB,CAAA,CAAQ,EAAEF,QAAA,CAAS;MACzBM,IAAA,EAAM;IACR;IACAwI,UAAA,EAAY;MACVpK,IAAA,EAAMqC,CAAA,CAAO,EAAEf,QAAA,CAAS;MACxBM,IAAA,EAAM;IACR;IACAqJ,WAAA,EAAa;MACXjL,IAAA,EAAM0K,EAAA,CAAY;MAClB9I,IAAA,EAAM;IACR;IACAsJ,OAAA,EAAS;MACPlL,IAAA,EAAMqC,CAAA,CAAO;MACbT,IAAA,EAAM;IACR;EAAA,CACD,EAAEP,KAAA,CAAM3F,CAAK;AAChB;ACvCO,SAASyP,GAAgBzP,CAAA,EAAiC;EACxD,OAAAiP,CAAA,CACLjP,CAAA,CAEG8L,OAAA,CAAQ,eAAe,EAAE,EAEzBA,OAAA,CAAQ,SAAS,GAAG;AAE3B;ACTO,SAAS4D,GAAA,EAAqC;EAC5C,OAAAD,EAAA,CAAgB3L,MAAA,CAAO6L,QAAA,CAASC,IAAI;AAC7C;ACJO,SAASC,GAAA,EAAmE;EACjF,OAAOC,WAAA,CAAYC,gBAAA,CAAiB,YAAY,EAAE,CAAC;AACrD;ACEO,SAASC,GAAA,EAAwC;EACtD,MAAMhQ,CAAA,GAAkB6P,EAAA;EACxB,IAAI,CAAC7P,CAAA,EACG,UAAIoE,KAAA,CAAM,uCAAuC;EAGlD,OAAAqL,EAAA,CAAgBzP,CAAA,CAAgBuC,IAAI;AAC7C;ACsBA,SAAS0N,GAAUjQ,CAAA,EAAyB;EACnC,iBAAUA,CAAA,CAAI8L,OAAA,CAAQ,UAAW7L,CAAA,IAAM,IAAIA,CAAA,CAAE8L,WAAA,CAAa,GAAE,CAAC;AACtE;AAOgB,SAAAmE,GAAsClQ,CAAA,EAAQC,CAAA,EAA8B;EAC1FkQ,cAAA,CAAeC,OAAA,CAAQH,EAAA,CAAUjQ,CAAG,GAAGoG,IAAA,CAAKiB,SAAA,CAAUpH,CAAK,CAAC;AAC9D;AAMO,SAASoQ,GAAsCrQ,CAAA,EAAqC;EACzF,MAAMC,CAAA,GAAQkQ,cAAA,CAAeG,OAAA,CAAQL,EAAA,CAAUjQ,CAAG,CAAC;EAC/C;IACF,OAAOC,CAAA,GAAQmG,IAAA,CAAKT,KAAA,CAAM1F,CAAK,IAAuB;EAAA,QAChD,CAAc;AACxB;ACpDO,SAASsQ,GAAA,EAAoC;EAClD,OAAOtB,CAAA,CAAkBoB,EAAA,CAAgB,cAAc,KAAK,EAAE;AAChE;ACJO,SAASG,GAAqBxQ,CAAA,EAAwC;EAC3E,OAAOoG,IAAA,CAAKiB,SAAA,CACV9C,MAAA,CAAOkM,WAAA,CACLlM,MAAA,CACG6G,OAAA,CAAQpL,CAAW,EACnB+K,GAAA,CAAI,CAAC,CAAC9K,CAAA,EAAKC,CAAK,MAAM,CAAC6O,EAAA,CAAc9O,CAAG,GAAGC,CAAK,CAAC,CACtD;AAEJ;ACNO,SAASwQ,GAAsB1Q,CAAA,EAA6B;EAC3D;MACJoP,WAAA,EAAAnP,CAAA;MACAsP,WAAA,EAAArP,CAAA;MACAmP,QAAA,EAAAlP,CAAA;MACAqP,OAAA,EAAAtO,CAAA;MACAoO,YAAA,EAAA1N,CAAA;MACA8M,UAAA,EAAA5M,CAAA;MACAoN,SAAA,EAAAnN;IACE,IAAA/B,CAAA;IAEEwI,CAAA,GAAS,IAAI2E,eAAA;EAEZ,OAAA3E,CAAA,CAAA9E,GAAA,CAAI,oBAAoBvD,CAAQ,GACvCqI,CAAA,CAAO9E,GAAA,CAAI,uBAAuB8M,EAAA,CAAqBtQ,CAAW,CAAC,GAC5DsI,CAAA,CAAA9E,GAAA,CAAI,mBAAmBxC,CAAO,GAEjCjB,CAAA,IACKuI,CAAA,CAAA9E,GAAA,CAAI,gBAAgBzD,CAAW,GAGpC6B,CAAA,IACK0G,CAAA,CAAA9E,GAAA,CAAI,sBAAsB5B,CAAU,GAGzC,OAAOF,CAAA,IAAiB,aAC1B4G,CAAA,CAAO9E,GAAA,CAAI,wBAAwB9B,CAAA,GAAe,MAAM,GAAG,GAGzD,OAAOG,CAAA,IAAc,aACvByG,CAAA,CAAO9E,GAAA,CAAI,qBAAqB3B,CAAA,GAAY,MAAM,GAAG,GAGhDyG,CAAA,CAAO5B,QAAA;AAChB;ACjCO,SAAS+J,GAAc3Q,CAAA,EAA2B;EACvCkQ,EAAA,iBAAgBQ,EAAA,CAAsB1Q,CAAK,CAAC;AAC9D;ACDO,SAAS4Q,GAAA,EAAqC;EAGnD,WAAW5Q,CAAA,IAAY;EAAA;EAAA;EAGrB0P,EAAA;EAAA;EAEAM,EAAA;EAAA;EAEAO,EAAA,GAEI;IACF,MAAMtQ,CAAA,GAAKD,CAAA;IACX,OAAA2Q,EAAA,CAAc1Q,CAAE,GACTA,CAAA;EAAA,QACG,CAEZ;EAGI,UAAImE,KAAA,CAAM,6DAA6D;AAC/E;AC1BO,SAASyM,GAAA,EAAwB;EACtC,MAAM7Q,CAAA,GAAQ6P,EAAA;EACd,OAAO,CAAC,EAAE7P,CAAA,IAASA,CAAA,CAAMsE,IAAA,KAAS;AACpC;ACJO,SAASwM,GAAA,EAA8C;EAC5D,IAAI9Q,CAAA,GAAY;EACT,cAAOA,CAAA,IAAa,GAAG4G,QAAA,CAAS;AACzC;ACSA,MAAM,CAACmK,EAAW,IAAIhR,EAAA,CAAgB+Q,EAAwB;AAuB9C,SAAAE,EAIdhR,CAAA,EACAC,CAAA,EACsD;EACtD,OAAO,MAAM;IACX,MAAMC,CAAA,GAAK0Q,EAAA;MACLzQ,CAAA,GAAiB;QACrB,GAAGD,CAAA;QACHwJ,SAAA,EAAWW,EAAA,CAAgBnK,CAAA,CAAGsP,OAAO;QACrCyB,eAAA,EAAiBF,EAAA,CAAY;MAAA;IAK3B,WAAO/Q,CAAA,IAAsB,YAC/B,OAAOA,CAAA,CAAkBG,CAAc;IAKzC,MAAM,CAACe,CAAA,EAAYU,CAAA,EAASE,CAAS,IAAImC,CAAA,CAAc;MAEjDlC,CAAA,GAAS9B,CAAA,CAAgB;QAC7B,GAAGE,CAAA;QAAA;QAAA;QAAA;QAIHmM,KAAA,EAAOuE,EAAA,CAAiB,IAAAR,EAAA,CAAgBrQ,CAAiB,IAAI;QAC7DkR,UAAA,EAAAhQ;MAAA,CACD;MAEKsH,CAAA,GAAc2I,CAAA,KACbrP,CAAA,IACHZ,CAAA,CACEiQ,CAAA,CAAM1N,EAAA,CAAG,UAAW2N,EAAA,IAAU;QAC5BlB,EAAA,CAAgBlQ,CAAA,EAAmBoR,EAAK;MAAA,CACzC,IAGED,CAAA;IAGF,QACLpP,CAAA,YAAkB0I,OAAA,GAAU1I,CAAA,CAAOsP,IAAA,CAAK7I,CAAU,IAAIA,CAAA,CAAWzG,CAAM,GACvEH,CAAA;EACF;AAEJ;AClFa,MAAA0P,EAAA,GAAiBN,CAAA,CAAsB,cAAc,CAAC;EACjEtH,SAAA,EAAA1J,CAAA;EACAwP,OAAA,EAAAvP,CAAA;EACAqM,KAAA,EAAApM,CAAA,GAAQ;IAAE2M,SAAA,EAAW;EAAM;AAC7B,MAAM,IAAID,EAAA,CAAW1M,CAAA,CAAM2M,SAAA,EAAW5M,CAAA,EAASD,CAAS,CAAC;ACNlD,MAAMuR,CAAA,SACH7E,CAAA,CAAsD;EADzD7L,YAAA;IAAA,SAAA2Q,SAAA;IAKL;AAAA;AAAA;IAAA5O,CAAA,aAAgC,KAAK0J,KAAA,CAAM7I,EAAA,CAAGwC,IAAA,CAAK,KAAKqG,KAAK;IAK7D;AAAA;AAAA;IAAA1J,CAAA,cAAkC,KAAK0J,KAAA,CAAM9I,GAAA,CAAIyC,IAAA,CAAK,KAAKqG,KAAK;EAAA;AAClE;ACiBO,SAASmF,GACdzR,CAAA,EAC0B;EACpB,MAAAC,CAAA,GAAOD,CAAA,CAAM0R,SAAA,GAAY1R,CAAA,GAAQ;IACrC0R,SAAA,EAAW;IACXC,SAAA,EAAW;IACXC,WAAA,EAAa;IACbC,gBAAA,EAAkB;IAClBC,cAAA,EAAgB;IAChBxN,IAAA,EAAM;EAAA;EAGD;IACLoN,SAAA,EAAW;IACXpN,IAAA,EAAMrE,CAAA,CAAKqE,IAAA;IACXyN,QAAA,EAAU9R,CAAA,CAAK0R,SAAA;IACfK,UAAA,EAAY/R,CAAA,CAAK2R,WAAA;IACjBK,eAAA,EAAiBhS,CAAA,CAAK4R,gBAAA;IACtBK,aAAA,EAAejS,CAAA,CAAK6R;EAAA;AAExB;ACzCO,MAAMK,EAAA,SAAwBZ,CAAA,CAKnC;EAOA1Q,YAAY;IAAE6I,SAAA,EAAAxJ,CAAA;IAAWsP,OAAA,EAAArP,CAAA;IAAS,GAAGe;EAAA,GAA8B;IACjE,MAAMA,CAAA,EAAMf,CAAA,EAAS;MACnBiS,IAAA,EAAM;MACNC,YAAA,EAAc;MACdC,aAAA,EAAe;MACfC,WAAA,EAAa;IAAA,CACd;IAZc3P,CAAA;IAETA,CAAA;IAEAA,CAAA;IASN,KAAK8G,SAAA,GAAYxJ,CAAA;EACnB;EAAA;AAAA;AAAA;EAKA,IAAIwR,UAAA,EAAqB;IAChB,YAAKnO,GAAA,CAAI,WAAW;EAC7B;EAAA;AAAA;AAAA;EAKA,IAAI2O,cAAA,EAAyB;IACpB,YAAK3O,GAAA,CAAI,eAAe;EACjC;EAAA;AAAA;AAAA;EAKA,IAAI0O,gBAAA,EAA2B;IACtB,YAAK1O,GAAA,CAAI,iBAAiB;EACnC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMiP,aAAa;IACjBC,MAAA,EAAAvS,CAAA;IACA,GAAGC;EAAA,GAC+D;IAC9D,OAAC,KAAKuS,WAAA,KACR,KAAKA,WAAA,GAAc9H,CAAA,CAAQ;MACzB,GAAGzK,CAAA;MACH6K,MAAA,EAAQ;MACR3H,KAAA,EAAO;MACPqG,SAAA,EAAW,KAAKA,SAAA;MAChBuB,MAAA,EAAQ;QAAA;QAENwH,MAAA,GAASvS,CAAA,IAAU,IAAIyS,IAAA,CAAK;MAC9B;IACD,GACEtB,IAAA,CAAK,CAAC;MAAEuB,KAAA,EAAA1R;IAAY,MAAAA,CAAK,EACzB2R,OAAA,CAAQ,MAAM,KAAKH,WAAA,GAAc,MAAS,IAExC,KAAKA,WAAA;EACd;EAAA;AAAA;AAAA;EAKA,IAAIX,SAAA,EAAmB;IACd,YAAKxO,GAAA,CAAI,UAAU;EAC5B;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA8O,aAAA,EAAqB;IACnB,KAAK3I,SAAA,CAAU,gCAAgC;EACjD;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA4I,cAAc;IAAEG,MAAA,EAAAvS,CAAA;IAAQ,GAAGC;EAAK,IAAyC,IAAsB;IACzF,OAAC,KAAK2S,aAAA,KACR,KAAKA,aAAA,GAAgBlI,CAAA,CAAQ;MAC3B,GAAGzK,CAAA;MACHuJ,SAAA,EAAW,KAAKA,SAAA;MAChBsB,MAAA,EAAQ;MACR3H,KAAA,EAAO;MACP4H,MAAA,EAAQ;QAAEwH,MAAA,EAAQvS,CAAA,IAAU;MAAG;IAAA,CAChC,EACEmR,IAAA,CAAMnQ,CAAA,IAAa;MAEZ,MAAAU,CAAA,GAAY6P,EAAA,CAAYvQ,CAAQ;MACtC,YAAKwC,GAAA,CAAI9B,CAAS,GAEXA,CAAA,CAAUsQ,aAAA;IAAA,CAClB,EACAW,OAAA,CAAQ,MAAM,KAAKC,aAAA,GAAgB,MAAS,IAE1C,KAAKA,aAAA;EACd;EAAA;AAAA;AAAA;EAKA,IAAIC,aAAA,EAAyC;IACpC,YAAKxP,GAAA,CAAI,cAAc;EAChC;EAAA;AAAA;AAAA;EAKA,IAAIyO,WAAA,EAAsB;IACjB,YAAKzO,GAAA,CAAI,YAAY;EAC9B;EAAA;AAAA;AAAA;AAAA;EAMA,MAAMgP,YAAY;IAAEK,KAAA,EAAA1S,CAAA;IAAO,GAAGC;EAAK,IAAuC,IAAsB;IACvF,QAAC,WAAW,SAAS,EAAEiJ,QAAA,EAE1B,MAAMwB,CAAA,CAAQ;MACZ,GAAGzK,CAAA;MACHuJ,SAAA,EAAW,KAAKA,SAAA;MAChBsB,MAAA,EAAQ;MACR3H,KAAA,EAAO;MACP4H,MAAA,EAAQ;QAAE2H,KAAA,EAAO1S,CAAA,IAAS;MAAG;IAC9B,IACD8S,MAAA;EAEN;AACF;ACrJA,eAAsBC,GACpBjT,CAAA,EACmC;EAC5B,OAAAyR,EAAA,CACL,MAAM7G,CAAA,CAAQ;IACZ,IAAI5K,CAAA,IAAW,CAAC;IAChBgL,MAAA,EAAQ;IACR3H,KAAA,EAAO;EAAA,CACR;AAEL;ACVO,MAAM6P,EAAA,GAAsBlC,CAAA,CACjC,mBACA,OAAO;EAAEtH,SAAA,EAAA1J,CAAA;EAAWwP,OAAA,EAAAvP,CAAA;EAASqM,KAAA,EAAApM;AAAA,MACpB,IAAIiS,EAAA,CAAgB;EACzB,IAAIjS,CAAA,IAASiJ,CAAA,CAAS,6BAA6BlJ,CAAO,IACtDC,CAAA,KAAS,MAAM+S,EAAA,CAAoB;IAAEnI,OAAA,EAAS;EAAM,MACpD;IACA4G,SAAA,EAAW;IACXQ,aAAA,EAAe;IACfD,eAAA,EAAiB;IACjBD,UAAA,EAAY;IACZD,QAAA,EAAU;EACZ;EACFvC,OAAA,EAAAvP,CAAA;EACAyJ,SAAA,EAAA1J;AAAA,CACD,CAEL;ACrBO,MAAMmT,EAAA,SACH3G,CAAA,CAA2B;EAD9B3L,YAAA;IAAA,SAAA2Q,SAAA;IAKL;AAAA;AAAA;IAAA5O,CAAA,aAAgC,KAAK0J,KAAA,CAAM7I,EAAA,CAAGwC,IAAA,CAAK,KAAKqG,KAAK;IAK7D;AAAA;AAAA;IAAA1J,CAAA,cAAkC,KAAK0J,KAAA,CAAM9I,GAAA,CAAIyC,IAAA,CAAK,KAAKqG,KAAK;EAAA;AAClE;ACTO,MAAM8G,EAAA,SAAwBD,EAAA,CAAyC;EAC5EtS,YAAYZ,CAAA,EAAgDC,CAAA,EAAsB;IAC1E;MAAEmT,oBAAA,EAAApT;IAAA,CAAsB,GAD4B,KAAAyJ,SAAA,GAAAxJ,CAAA;EAE5D;EAEA,IAAYmT,qBAAqBpT,CAAA,EAAgB;IAC1C,KAAAyD,GAAA,CAAI,wBAAwBzD,CAAK,GACtC,KAAKyJ,SAAA,CAAU,kCAAkC;MAAE4J,iBAAA,EAAmBrT;IAAO;EAC/E;EAAA;AAAA;AAAA;AAAA;EAMA,IAAIoT,qBAAA,EAAgC;IAC3B,YAAK9P,GAAA,CAAI,sBAAsB;EACxC;EAAA;AAAA;AAAA;EAKAgQ,oBAAA,EAA4B;IAC1B,KAAKF,oBAAA,GAAuB;EAC9B;EAAA;AAAA;AAAA;EAKAG,mBAAA,EAA2B;IACzB,KAAKH,oBAAA,GAAuB;EAC9B;AACF;AC/BO,MAAMI,EAAA,GAAsBzC,CAAA,CACjC,mBACA,CAAC;EACCtH,SAAA,EAAA1J,CAAA;EACAsM,KAAA,EAAArM,CAAA,GAAQ;IAAEoT,oBAAA,EAAsB;EAAM;AAClC,UAAID,EAAA,CAAgBnT,CAAA,CAAMoT,oBAAA,EAAsBrT,CAAS,CACjE;ACTO,MAAM0T,EAAA,CAA4C;EACvD7S,YAIEZ,CAAA,EAIAC,CAAA,EACA;IAOF;AAAA;AAAA;IAAA0C,CAAA;IANO,KAAA+J,QAAA,GAAWF,EAAA,CAAiBxM,CAAA,EAASC,CAAc;EAC1D;AAMF;ACbA,SAASyT,GAAW3T,CAAA,EAA2B;EACzC,IAAAqG,KAAA,CAAMC,OAAA,CAAQtG,CAAK,GACd,OAAAA,CAAA;EAGL,WAAOA,CAAA,IAAU,UACf;IACI,MAAAC,CAAA,GAAOmG,IAAA,CAAKT,KAAA,CAAM3F,CAAK;IAEzB,IAAAqG,KAAA,CAAMC,OAAA,CAAQrG,CAAI,GACb,OAAAA,CAAA;EACT,QACM,CAAC;EAEX,MAAMsF,CAAA,CAAgB;AACxB;AAEO,MAAMqO,EAAA,SACHpO,CAAA,CAAmC;EAG3C3E,YACEX,CAAA,EACAC,CAAA,EACAe,CAAA,EACA;IACM,MAAAyS,EAAA,EAAYxT,CAAA,EAAYe,CAAI;IAP5B0B,CAAA;IASD,KAAAiR,UAAA,GAAa,OAAO3T,CAAA,IAAe,aACpCA,CAAA,GACAA,CAAA,CAAWyF,KAAA,CAAMM,IAAA,CAAK/F,CAAU;EACtC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQSyF,MAAMzF,CAAA,EAAgE;IACvE,MAAAC,CAAA,GAAM,MAAMwF,KAAA,CAAMzF,CAAK;IAC7B,OAAOC,CAAA,KAAQ,SAAYA,CAAA,GAAMA,CAAA,CAAI4K,GAAA,CAAI,KAAK8I,UAAU;EAC1D;EAEAC,GAAS5T,CAAA,EAA0E;IAC5E,YAAA2T,UAAA,GAAa,OAAO3T,CAAA,IAAe,aACpCA,CAAA,GACAA,CAAA,CAAWyF,KAAA,CAAMM,IAAA,CAAK/F,CAAU,GAE7B;EACT;AACF;ACvDO,SAAS6T,GAAM/T,CAAA,EAAsD;EAC1E,OAAO,IAAI4T,EAAA,CAAa3T,CAAA,IAAUA,CAAA,EAAO,IAAOD,CAAc;AAChE;ACEA,SAASgU,GAAoChU,CAAA,EAAWC,CAAA,EAAwB;EACvE,OAAAsE,MAAA,CAAOkM,WAAA,CAAYzQ,CAAA,CAAK+K,GAAA,CAAK7K,CAAA,IAAM,CAACA,CAAA,EAAGD,CAAK,CAAC,CAAC;AACvD;AAOO,MAAMgU,EAAA,SAAqBP,EAAA,CAAmD;EACnF7S,YACEZ,CAAA,EACiBC,CAAA,EACAC,CAAA,EACjB;IACA,MAAMF,CAAA,EAAS;MACbiU,MAAA,EAAQ;MACR3Q,GAAA,EAAK;MACL4Q,OAAA,EAAS;MACTzQ,GAAA,EAAK;IAAA,CACN,GARgB,KAAAuN,eAAA,GAAA/Q,CAAA,EACA,KAAAwJ,SAAA,GAAAvJ,CAAA;EAQnB;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA,MAAM+T,OAAOjU,CAAA,EAA8BC,CAAA,GAA8B,IAAmB;IAC1F,MAAMC,CAAA,GAAOkG,KAAA,CAAMC,OAAA,CAAQrG,CAAS,IAAIA,CAAA,GAAY,CAACA,CAAS;IAC1DE,CAAA,CAAK+C,MAAA,KACD,MAAAgI,CAAA,CACJ,uBACA;MAAEkJ,IAAA,EAAAjU;IAAK,GACP,KAAK8Q,eAAA,CAAgB,GACrB;MAAE,GAAG/Q,CAAA;MAASwJ,SAAA,EAAW,KAAKA;IAAU;EAG9C;EAAA;AAAA;AAAA;AAAA;EAMA,MAAMyK,QAAQlU,CAAA,GAA8B,IAAuB;IACjE,OAAO8T,EAAA,CAAM,EAAED,EAAA,CAAGnN,CAAA,EAAQ,EAAEhB,KAAA,CAC1B,MAAMuF,CAAA,CACJ,kBACA,CAAC,GACD,KAAK+F,eAAA,CAAgB,GACrB;MAAE,GAAGhR,CAAA;MAASyJ,SAAA,EAAW,KAAKA;IAAU,CAC1C;EAEJ;EAmBA,MAAMnG,IACJtD,CAAA,EACAC,CAAA,GAA8B,IACY;IAC1C,MAAMC,CAAA,GAAOkG,KAAA,CAAMC,OAAA,CAAQrG,CAAS,IAAIA,CAAA,GAAY,CAACA,CAAS;IAC1D,KAACE,CAAA,CAAK+C,MAAA,EACD,OAAA8Q,EAAA,CAAe7T,CAAA,EAAM,EAAE;IAGhC,MAAMe,CAAA,GAAO,MAAMgK,CAAA,CACjB,oBACA;QAAEkJ,IAAA,EAAAjU;MAAK,GACP,KAAK8Q,eAAA,CAAgB,GACrB;QAAE,GAAG/Q,CAAA;QAASwJ,SAAA,EAAW,KAAKA;MAAU;MAEpC9H,CAAA,GAAS2E,CAAA,CAAKyN,EAAA,CAAe7T,CAAA,EAAMwG,CAAA,EAAQ,GAAG,kBAAkB,EAAEhB,KAAA,CAAMzE,CAAI;IAElF,OAAOmF,KAAA,CAAMC,OAAA,CAAQrG,CAAS,IAAI2B,CAAA,GAASA,CAAA,CAAO3B,CAAS;EAC7D;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMyD,IAAIzD,CAAA,EAAaC,CAAA,EAAeC,CAAA,GAA8B,IAAmB;IAC/E,MAAA+K,CAAA,CACJ,oBACA;MAAEmJ,GAAA,EAAApU,CAAA;MAAKqU,KAAA,EAAApU;IAAM,GACb,KAAK+Q,eAAA,CAAgB,GACrB;MAAE,GAAG9Q,CAAA;MAASuJ,SAAA,EAAW,KAAKA;IAAU;EAE5C;AACF;AC5GO,MAAM6K,EAAA,GAAmBvD,CAAA,CAC9B,CAAC;EAAEC,eAAA,EAAAjR,CAAA;EAAiB0J,SAAA,EAAAzJ,CAAA;EAAWuP,OAAA,EAAAtP;AAAA,MACtB,IAAI+T,EAAA,CAAa/T,CAAA,EAASF,CAAA,EAAiBC,CAAS,CAE/D;ACAO,MAAMuU,EAAA,SACHd,EAAA,CAA6E;EACrF7S,YAAYZ,CAAA,EAAmCC,CAAA,EAAsB;IACnE,MAAMD,CAAA,EAAS;MACbwU,cAAA,EAAgB;MAChBC,oBAAA,EAAsB;MACtBC,gBAAA,EAAkB;IAAA,CACnB,GAL4C,KAAAjL,SAAA,GAAAxJ,CAAA;EAM/C;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAuU,eAAexU,CAAA,EAAwC;IACrD,KAAKyJ,SAAA,CAAU,mCAAmC;MAChDpF,IAAA,EAAM;MACNsQ,YAAA,EAAc3U;IAAA,CACf;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAyU,qBAAqBzU,CAAA,EAA4C;IAC/D,KAAKyJ,SAAA,CAAU,mCAAmC;MAChDpF,IAAA,EAAM;MACNuQ,iBAAA,EAAmB5U;IAAA,CACpB;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA0U,iBAAA,EAAyB;IACvB,KAAKjL,SAAA,CAAU,mCAAmC;MAAEpF,IAAA,EAAM;IAAoB;EAChF;AACF;ACjDO,MAAMwQ,EAAA,GAAqB9D,CAAA,CAChC,CAAC;EAAExB,OAAA,EAAAxP,CAAA;EAAS0J,SAAA,EAAAzJ;AAAA,MAAgB,IAAIuU,EAAA,CAAexU,CAAA,EAASC,CAAS,CACnE;ACCO,MAAM8U,EAAA,CAAS;EACpBlU,YAA6BZ,CAAA,EAA0B;IAA1B,KAAAkP,QAAA,GAAAlP,CAAA;EAC7B;EAAA;AAAA;AAAA;EAKA,IAAIiO,SAAA,EAAiB;IACnB,OAAO,KAAKiB,QAAA,CAASjB,QAAA;EACvB;EAAA;AAAA;AAAA;EAKA,IAAIC,aAAA,EAAmC;IACrC,OAAO,KAAKgB,QAAA,CAAShB,YAAA;EACvB;EAAA;AAAA;AAAA;AAAA;EAMA,IAAI6G,iBAAA,EAAqC;IACjC;MAAE7G,YAAA,EAAAlO;IAAiB;IAElB,OAAAA,CAAA,GACH,IAAIgB,IAAA,CAAK,KAAKiN,QAAA,CAAS+G,OAAA,CAAQ,IAAIhV,CAAA,GAAe,GAAI,IACtD;EACN;EAAA;AAAA;AAAA;EAKA,IAAImO,KAAA,EAAyB;IAC3B,OAAO,KAAKe,QAAA,CAASf,IAAA;EACvB;EAAA;AAAA;AAAA;EAKA,IAAIE,SAAA,EAAiC;IACnC,OAAO,KAAKa,QAAA,CAASb,QAAA;EACvB;EAAA;AAAA;AAAA;EAKA,IAAID,aAAA,EAAmC;IACrC,OAAO,KAAKc,QAAA,CAASd,YAAA;EACvB;EAAA;AAAA;AAAA;EAKA,IAAIE,KAAA,EAAe;IACjB,OAAO,KAAKY,QAAA,CAASZ,IAAA;EACvB;EAAA;AAAA;AAAA;EAKA,IAAIC,QAAA,EAA8B;IAChC,OAAO,KAAKW,QAAA,CAASX,OAAA;EACvB;EAAA;AAAA;AAAA;EAKA,IAAIC,SAAA,EAA6B;IAC/B,OAAO,KAAKU,QAAA,CAASV,QAAA;EACvB;EAAA;AAAA;AAAA;EAKA,IAAIC,WAAA,EAAiC;IACnC,OAAO,KAAKS,QAAA,CAAST,UAAA;EACvB;EAAA;AAAA;AAAA;EAKA,IAAIC,KAAA,EAAyB;IAC3B,OAAO,KAAKQ,QAAA,CAASR,IAAA;EACvB;AACF;ACxFO,MAAMuG,EAAA,GAAelE,CAAA,CAC1B,CAAC;EAAE7B,QAAA,EAAAnP;AAAS,MAAOA,CAAA,GAAW,IAAI+U,EAAA,CAAS/U,CAAQ,IAAI,MACzD;ACHO,SAASmV,GAAcnV,CAAA,EAAgC;EACrD,OAAAiO,EAAA,CAAW,EAAAtI,KAAA,CAAM3F,CAAK;AAC/B;ACIO,MAAMoV,EAAA,SAAgB7D,CAAA,CAAoD;EAC/E1Q,YACEZ,CAAA,EACAC,CAAA,EACiBC,CAAA,EACjB;IACA,MAAM;MAAEkV,QAAA,EAAApV;IAAA,GAAYC,CAAA,EAAS;MAAEoV,IAAA,EAAM;IAAA,CAAwB,GAF5C,KAAA5L,SAAA,GAAAvJ,CAAA;EAGnB;EAEA,IAAYkV,SAASpV,CAAA,EAAO;IACrB,KAAAyD,GAAA,CAAI,YAAYzD,CAAK;EAC5B;EAAA;AAAA;AAAA;EAKA,IAAIoV,SAAA,EAAoB;IACf,YAAK9R,GAAA,CAAI,UAAU;EAC5B;EAiBA,MAAM+R,KAAKrV,CAAA,EAAmBC,CAAA,EAAsC;IAClE,IAAI,KAAKmV,QAAA,EACD,UAAIjR,KAAA,CAAM,2BAA2B;IAGzC,IAAAjE,CAAA;IACJ,IAAI,CAACD,CAAA,EACIC,CAAA,GAAAF,CAAA,MACF;MACC;QAAEsV,QAAA,EAAArU,CAAA;QAAUsU,QAAA,EAAA5T;MAAS,IAAI,IAAI6T,GAAA,CAAIxV,CAAA,EAAW6D,MAAA,CAAO6L,QAAA,CAASC,IAAI;MACtE,IAAI1O,CAAA,KAAa,QACf,MAAM,IAAIkD,KAAA,CAAM,uBAAuBlD,CAAQ,EAAE;MAM7C,MAAAY,CAAA,GAAQF,CAAA,CAASqK,KAAA,CAAM,sCAAsC;MACnE,IAAI,CAACnK,CAAA,EACG,UAAIsC,KAAA,CAAM,yFAAyF;MAE1G,IAAIjE,CAAI,IAAI2B,CAAA;IACf;IAEA,KAAKuT,QAAA,GAAW;IAEZ;MAWF,QAVe,MAAMzK,CAAA,CAAQ;QAC3BI,MAAA,EAAQ;QACR3H,KAAA,EAAO;QACP4H,MAAA,EAAQ;UAAEyK,IAAA,EAAAvV;QAAK;QACfuJ,SAAA,EAAW,KAAKA,SAAA;QAChBmB,QAAQjJ,CAAA,EAAM;UACZ,OAAOzB,CAAA,KAASyB,CAAA,CAAK8T,IAAA;QACvB;MAAA,CACD,GAEa1C,MAAA;IAAA,UACd;MACA,KAAKqC,QAAA,GAAW;IAClB;EACF;AACF;AClFO,MAAMM,EAAA,GAAc3E,CAAA,CACzB,CAAC;EAAExB,OAAA,EAAAxP,CAAA;EAAS0J,SAAA,EAAAzJ;AAAA,MAAgB,IAAImV,EAAA,CAAQ,IAAOpV,CAAA,EAASC,CAAS,CACnE;ACSO,MAAM2V,EAAA,SAAmBpJ,CAAA,CAAgC;EAG9D3L,YAAY;IAAE6I,SAAA,EAAAxJ,CAAA;IAAW,GAAGC;EAAA,GAAyB;IACnD,MAAMA,CAAI;IAHKyC,CAAA;IA0GjB;AAAA;AAAA;AAAA;AAAA;IAAAA,CAAA,aAAoB,CAAC1C,CAAA,EAAOC,CAAA,KAC1BD,CAAA,KAAU,UACNyI,CAAA,CAAG,uBAAuBxI,CAAQ,IAElC,KAAKmM,KAAA,CAAM7I,EAAA,CAAGvD,CAAA,EAAOC,CAAe;IAQ1C;AAAA;AAAA;AAAA;AAAA;IAAAyC,CAAA,cAAsB,CAAC1C,CAAA,EAAOC,CAAA,KAC5BD,CAAA,KAAU,UACNwI,CAAA,CAAI,uBAAuBvI,CAAQ,IAEnC,KAAKmM,KAAA,CAAM9I,GAAA,CAAItD,CAAA,EAAOC,CAAe;IAtHzC,KAAKuJ,SAAA,GAAYxJ,CAAA;EACnB;EAAA;AAAA;AAAA;EAKA,IAAI2B,QAAA,EAAe;IACV,YAAK0B,GAAA,CAAI,SAAS;EAC3B;EAAA;AAAA;AAAA;EAKQsS,OAAA,EAAe;IAIjB,KAAKC,IAAA,KAAS,MAIlB,KAAKpM,SAAA,CAAU,6BAA6B;MAC1CsD,UAAA,EAAY,KAAKH,SAAA;MACjBkJ,SAAA,EAAW,KAAKC,SAAA;MAChBC,mBAAA,EAAqB,KAAKC,eAAA;MAC1BJ,IAAA,EAAM,KAAKA,IAAA;MACXK,KAAA,EAAO,KAAKtU,OAAA;MACZuU,UAAA,EAAY,KAAKzU;IAAA,CAClB;EACH;EAAA;AAAA;AAAA;AAAA;EAMA0U,QAAA,EAAgB;IACd,YAAKL,SAAA,GAAY,IACV;EACT;EAAA;AAAA;AAAA;EAKAM,OAAA,EAAe;IACb,YAAKN,SAAA,GAAY,IACV;EACT;EAAA;AAAA;AAAA;EAKAjJ,KAAA,EAAa;IACX,YAAKF,SAAA,GAAY,IACV;EACT;EAAA;AAAA;AAAA;EAKA0J,WAAA,EAAmB;IACjB,YAAKL,eAAA,GAAkB,IAChB;EACT;EAEA,IAAYF,UAAU9V,CAAA,EAAoB;IACnC,KAAAsW,SAAA,CAAU;MAAER,SAAA,EAAA9V;IAAA,CAAW;EAC9B;EAAA;AAAA;AAAA;EAKA,IAAI8V,UAAA,EAAqB;IAChB,YAAKzS,GAAA,CAAI,WAAW;EAC7B;EAEA,IAAY2S,gBAAgBhW,CAAA,EAA0B;IAC/C,KAAAsW,SAAA,CAAU;MAAEN,eAAA,EAAAhW;IAAA,CAAiB;EACpC;EAAA;AAAA;AAAA;EAKA,IAAIgW,gBAAA,EAA2B;IACtB,YAAK3S,GAAA,CAAI,iBAAiB;EACnC;EAEA,IAAYsJ,UAAU3M,CAAA,EAAoB;IACnC,KAAAsW,SAAA,CAAU;MAAE3J,SAAA,EAAA3M;IAAA,CAAW;EAC9B;EAAA;AAAA;AAAA;EAKA,IAAI2M,UAAA,EAAqB;IAChB,YAAKtJ,GAAA,CAAI,WAAW;EAC7B;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAgCAuJ,KAAA,EAAa;IACX,YAAKD,SAAA,GAAY,IACV;EACT;EAAA;AAAA;AAAA;EAKA4J,WAAA,EAAmB;IACjB,YAAKP,eAAA,GAAkB,IAChB;EACT;EAAA;AAAA;AAAA;AAAA;EAMAQ,QAAQxW,CAAA,EAAoB;IAC1B,OAAO,KAAKsW,SAAA,CAAU;MAAEV,IAAA,EAAA5V;IAAM;EAChC;EAAA;AAAA;AAAA;AAAA;EAMAyW,aAAazW,CAAA,EAAsB;IACjC,OAAO,KAAKsW,SAAA,CAAU;MAAE7U,SAAA,EAAAzB;IAAW;EACrC;EAAA;AAAA;AAAA;AAAA;EAMA0W,WAAW1W,CAAA,EAAoB;IAC7B,OAAO,KAAKsW,SAAA,CAAU;MAAE3U,OAAA,EAAA3B;IAAS;EACnC;EAAA;AAAA;AAAA;AAAA;EAMAsW,UAAUtW,CAAA,EAAyC;IACjD,YAAKwD,GAAA,CAAIxD,CAAM,GACf,KAAK2V,MAAA,CAAO,GACL;EACT;EAAA;AAAA;AAAA;EAKA,IAAIC,KAAA,EAAe;IACV,YAAKvS,GAAA,CAAI,MAAM;EACxB;EAAA;AAAA;AAAA;EAKA,IAAI5B,UAAA,EAAiB;IACZ,YAAK4B,GAAA,CAAI,WAAW;EAC7B;AACF;AC3MO,MAAMsT,EAAA,GAAiB7F,CAAA,CAC5B,cACA,CAAC;EACCtH,SAAA,EAAA1J,CAAA;EACAuP,WAAA,EAAAtP,CAAA;EACAqM,KAAA,EAAApM,CAAA,GAAQ;IACN2M,SAAA,EAAW;IACXmJ,SAAA,EAAW;IACXF,IAAA,EAAM;IACNI,eAAA,EAAiB;IACjBvU,SAAA,EAAW1B,CAAA,CAAY6W,eAAA,IAAmB;IAC1CjV,OAAA,EAAS5B,CAAA,CAAY8W,WAAA,IAAe;EACtC;AAAA,MACI,IAAInB,EAAA,CAAW;EAAE,GAAG1V,CAAA;EAAOwJ,SAAA,EAAA1J;AAAA,CAAW,CAC9C;ACVO,SAASgX,GAAA,EAAgD;EAC9D,OAAO9J,CAAA,CAAa;IAClB+J,OAAA,EAAS1Q,CAAA,CAAK;MACZ2Q,MAAA,EAAQ;QACN5S,IAAA,EAAMkC,CAAA,CAAO;QACbN,IAAA,EAAM;MACR;MACAiR,WAAA,EAAa;QACX7S,IAAA,EAAMqC,CAAA,CAAO;QACbT,IAAA,EAAM;MACR;MACA0H,SAAA,EAAW;QACTtJ,IAAA,EAAMqC,CAAA,CAAO;QACbT,IAAA,EAAM;MACR;MACA8H,QAAA,EAAU;QACR1J,IAAA,EAAMqC,CAAA,CAAO,EAAEf,QAAA,CAAS;QACxBM,IAAA,EAAM;MACR;IAAA,CACD;IACDgI,QAAA,EAAU;MACR5J,IAAA,EAAM2I,EAAA,CAAK;MACX/G,IAAA,EAAM;IACR;IACAqI,IAAA,EAAM5H,CAAA,CAAO;EAAA,GACZ,kBAAkB;AACvB;ACnBgB,SAAAyQ,GACdpX,CAAA,EACAC,CAAA,EACoB;EACpB,OAAQC,CAAA,IAAW;IACjB,MAAM,CAACC,CAAA,EAAWe,CAAK,IAAIjB,CAAA,CAAOC,CAAM;IAEjC,OAAAiJ,CAAA,CAAShJ,CAAA,EAAWe,CAAA,EAAOlB,CAAO;EAAA;AAE7C;ACxBO,SAASqX,GAAMrX,CAAA,EAAiC;EAC9C,WAAIyK,OAAA,CAASxK,CAAA,IAAQ;IAC1B0K,UAAA,CAAW1K,CAAA,EAAKD,CAAQ;EAAA,CACzB;AACH;ACmBO,MAAMsX,EAAA,SAAgB/F,CAAA,CAO3B;EAWA1Q,YAAY;IAAE6I,SAAA,EAAAxJ,CAAA;IAAW+Q,eAAA,EAAA9Q,CAAA;IAAiBqP,OAAA,EAAAtO,CAAA;IAASgO,SAAA,EAAAtN,CAAA;IAAW,GAAGE;EAAA,GAAsB;IACrF,MAAMA,CAAA,EAAMZ,CAAA,EAAS;MACnBqW,kBAAA,EAAoB;MACpBC,kBAAA,EAAoB;MACpBC,iBAAA,EAAmB;MACnBC,cAAA,EAAgB;MAChBC,kBAAA,EAAoB;IAAA,CACrB;IAjBc/U,CAAA;IAEAA,CAAA;IAEAA,CAAA;IAETA,CAAA;IAEAA,CAAA;IAqOR;AAAA;AAAA;IAAAA,CAAA;IA1NE,KAAKqO,eAAA,GAAkB9Q,CAAA,EACvB,KAAKuJ,SAAA,GAAYxJ,CAAA,EACjB,KAAKgP,SAAA,GAAYtN,CAAA;IAEjB,MAAMG,CAAA,GAAmB,KAAK4K,QAAA,CAAS1G,IAAA,CAAK,IAAI;IAC3C,KAAA0G,QAAA,GAAYnE,CAAA,IACVzG,CAAA,CAAiByG,CAAM,IAMrBA,CAAA,KAAW,uBAAuB5G,CAAA,GALhC,IAQN,KAAAgW,aAAA,GAAgBR,EAAA,CAAsBlW,CAAA,EAAS;MAClD,wBAAwB,CAAC,4BAA4B,OAAO;IAAA,CAC7D;EACH;EAAA;AAAA;AAAA;AAAA;EAMA,MAAc2W,oBAAoB;IAChC/M,OAAA,EAAA5K,CAAA,GAAU;EACZ,IAAwB,IAA+B;IACrD,OAAO8W,EAAA,CAAU,EAAArR,KAAA,CACf,MAAMuF,CAAA,CACJ,uBACA,CAAC,GACD,KAAK+F,eAAA,CAAgB,GACrB;MAAEvH,SAAA,EAAW,KAAKA,SAAA;MAAWoB,OAAA,EAAA5K;IAAQ,CACvC;EAEJ;EAAA;AAAA;AAAA;AAAA;EAMA,IAAI2B,QAAA,EAAe;IACV,YAAK0B,GAAA,CAAI,SAAS;EAC3B;EAAA;AAAA;AAAA;AAAA;EAMAuU,MAAM5X,CAAA,EAA4B;IAChC,KAAKwJ,SAAA,CAAU,iBAAiB;MAAEqO,WAAA,EAAa7X;IAAY;EAC7D;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA,IAAI8X,YAAA,EAAkC;IAC7B,YAAKzU,GAAA,CAAI,aAAa;EAC/B;EAAA;AAAA;AAAA;EAKA,IAAI0U,YAAA,EAAuB;IACzB,OAAO,KAAK/I,SAAA;EACd;EAAA;AAAA;AAAA;EAKA,IAAIgJ,OAAA,EAAkB;IACb,OAAA/L,EAAA,CAAY,KAAKtK,OAAO;EACjC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWAsW,MAAA,EAAc;IACZ,KAAKzO,SAAA,CAAU,eAAe;EAChC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM0O,eAAe;IAAEtN,OAAA,EAAA5K,CAAA,GAAU;EAAK,IAAwB,IAA+B;IAGvF;MACK,aAAM,KAAK2X,mBAAA;IAAoB,QAChC,CACR;IAIA,IADe,OAAM,KAAKN,kBAAA,QACX,QACP,UAAInT,KAAA,CAAM,gBAAgB;IAI5B,MAAAlD,CAAA,GAAaD,IAAA,CAAKoX,GAAA,KAAQnY,CAAA;IAGhC,IAAI0B,CAAA,GAAY;IAGhB,OAAO4I,EAAA,CAAY,YAAY;MACtB,OAAAvJ,IAAA,CAAKoX,GAAA,CAAI,IAAInX,CAAA,GAAY;QAC1B;UACK,aAAM,KAAK2W,mBAAA;QAAoB,QAChC,CAAC;QAGT,MAAMR,EAAA,CAAMzV,CAAS,GAGRA,CAAA;MACf;MAEA,MAAM2I,EAAA,CAAmBrK,CAAO;IAAA,GAC/BA,CAAO;EACZ;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAMqX,mBAAmBrX,CAAA,GAA8B,IAAmC;IACpF,OAAC,KAAKoY,yBAAA,KACR,KAAKA,yBAAA,GAA4B1N,CAAA,CAAQ;MACvC,GAAG1K,CAAA;MACH8K,MAAA,EAAQ;MACR3H,KAAA,EAAO;MACPqG,SAAA,EAAW,KAAKA;IACjB,GACE2H,IAAA,CAAK,CAAC;MAAE2B,MAAA,EAAA7S;IAAa,MAAAA,CAAM,EAC3B0S,OAAA,CAAQ,MAAM,KAAKyF,yBAAA,GAA4B,MAAS,IAEtD,KAAKA,yBAAA;EACd;EAAA;AAAA;AAAA;AAAA;EAMA,MAAMd,mBAAmBtX,CAAA,GAA8B,IAAyC;IAC1F,OAAC,KAAKqY,yBAAA,KACR,KAAKA,yBAAA,GAA4B3N,CAAA,CAAQ;MACvC,GAAG1K,CAAA;MACH8K,MAAA,EAAQ;MACR3H,KAAA,EAAO;MACPqG,SAAA,EAAW,KAAKA;IACjB,GACE2H,IAAA,CAAK,CAAC;MAAE2B,MAAA,EAAA7S;IAAa,MAAAA,CAAM,EAC3B0S,OAAA,CAAQ,MAAM,KAAK0F,yBAAA,GAA4B,MAAS,IAEtD,KAAKA,yBAAA;EACd;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWAC,SAAStY,CAAA,EAAoB;IAC3B,MAAM;MAAEuY,IAAA,EAAAtY;IAAK,IAAI,IAAIuY,IAAA,CAAK,CAACxY,CAAI,CAAC;IAC5B,KAACC,CAAA,IAAQA,CAAA,GAAO,MAClB,MAAM,IAAIiE,KAAA,CAAM,mCAAmCjE,CAAI,EAAE;IAE3D,KAAKuJ,SAAA,CAAU,qBAAqB;MAAEtC,IAAA,EAAAlH;IAAM;EAC9C;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASAwX,eAAexX,CAAA,EAAiC;IACzC,KAAAwJ,SAAA,CAAU,4BAA4BgC,CAAA,CAAMxL,CAAK,IAAI;MAAEiW,KAAA,EAAAjW;IAAA,IAAU;MAAEyY,SAAA,EAAWzY;IAAO,IACrF,KAAAwD,GAAA,CAAI,eAAexD,CAAK;EAC/B;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA0W,WAAW1W,CAAA,EAAkB;IAC3B,KAAKwJ,SAAA,CAAU,gCAAgC;MAAEyM,KAAA,EAAAjW;IAAO,IACnD,KAAAwD,GAAA,CAAI,WAAWxD,CAAK;EAC3B;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAiBAuX,kBAAkBvX,CAAA,EAAcC,CAAA,GAAyC,IAAU;IACjF,IAAI,CAAC,KAAKwM,QAAA,CAAS,mBAAmB,KAAK,CAAC,KAAKsL,WAAA,EACzC,UAAI7T,KAAA,CAAM,2EAA2E;IAE7F,KAAKsF,SAAA,CAAU,+BAA+B;MAAEkP,KAAA,EAAO1Y,CAAA;MAAM2Y,UAAA,EAAY1Y;IAAA,CAAW;EACtF;AACF;AC1RO,MAAM2Y,EAAA,GAAc9H,CAAA,CACzB,WACA,CAAC;EACCzB,WAAA,EAAAvP,CAAA;EACAkP,SAAA,EAAAjP,CAAA,GAAY;EACZqM,KAAA,EAAApM,CAAA,GAAQ;IACN2B,OAAA,EAAS7B,CAAA,CAAY6B,OAAA,IAAW;IAChCmW,WAAA,EAAahY,CAAA,CAAY+Y,aAAA,IAAiB;EAC5C;EACA,GAAG5Y;AAAA,MACC,IAAImX,EAAA,CAAQ;EAAE,GAAGnX,CAAA;EAAM,GAAGD,CAAA;EAAOgP,SAAA,EAAAjP;AAAA,CAAW,CACpD;ACXO,SAAS+Y,GAAmBhZ,CAAA,EAA6C;EACxE,MAAAC,CAAA,GAAUD,CAAA,CAAOiZ,OAAA,CAAQtG,IAAA,CAAK;IAC9BzS,CAAA,IAASF,CAAA,CAAOsN,KAAA,IAAS,IAAIqF,IAAA,CAAK;IAClCxS,CAAA,GAAUH,CAAA,CAAOkZ,OAAA,IAAW;EAC9B,IAAAhY,CAAA;EAGA,IAAAhB,CAAA,CAAMgD,MAAA,GAAS,IACjB,MAAM,IAAIkB,KAAA,CAAM,6BAA6BlE,CAAA,CAAMgD,MAAM,EAAE;EAI7D,IAAI,CAACjD,CAAA,CAAQiD,MAAA,IAAUjD,CAAA,CAAQiD,MAAA,GAAS,KACtC,MAAM,IAAIkB,KAAA,CAAM,+BAA+BnE,CAAA,CAAQiD,MAAM,EAAE;EAI7D,IAAA/C,CAAA,CAAQ+C,MAAA,GAAS,GACnB,MAAM,IAAIkB,KAAA,CAAM,gCAAgCjE,CAAA,CAAQ+C,MAAM,EAAE;EAI9D,OAAC/C,CAAA,CAAQ+C,MAAA,GAIOhC,CAAA,GAAAf,CAAA,CAAQ4K,GAAA,CAAKnJ,CAAA,IAAM;IAC7B;MAAEyL,EAAA,EAAAvL,CAAA,GAAK;IAAO,IAAAF,CAAA;IAGhB,IAAAE,CAAA,CAAGoB,MAAA,GAAS,IACd,MAAM,IAAIkB,KAAA,CAAM,iCAAiCtC,CAAE,EAAE;IAGnD,KAACF,CAAA,CAAE0C,IAAA,IAAQ1C,CAAA,CAAE0C,IAAA,KAAS,aAAa1C,CAAA,CAAE0C,IAAA,KAAS,eAAe;MACzD,MAAAvC,CAAA,GAAOH,CAAA,CAAEkU,IAAA,CAAKnD,IAAA,CAAK;MAEzB,IAAI,CAAC5Q,CAAA,CAAKmB,MAAA,IAAUnB,CAAA,CAAKmB,MAAA,GAAS,IAAI;QAC9B,MAAAsF,CAAA,GAAO5G,CAAA,CAAE0C,IAAA,IAAQ;QAEjB,UAAIF,KAAA,CAAM,0BAA0BoE,CAAI,yBAAyB5G,CAAA,CAAEkU,IAAA,CAAK5S,MAAM,EAAE;MACxF;MAEA,OAAO;QAAE,GAAGtB,CAAA;QAAGkU,IAAA,EAAA/T,CAAA;QAAMsL,EAAA,EAAAvL;MAAG;IAC1B;IAEO;MAAE,GAAGF,CAAA;MAAGyL,EAAA,EAAAvL;IAAA;EAAG,CACnB,IAxBDZ,CAAA,GAAkB,CAAC;IAAEoD,IAAA,EAAM;IAAS+I,EAAA,EAAI;EAAA,CAAI,GA0BvC;IAAEC,KAAA,EAAApN,CAAA;IAAO+Y,OAAA,EAAAhZ,CAAA;IAASiZ,OAAA,EAAShY;EAAgB;AACpD;AC/CO,MAAMiY,EAAA,SAAc5H,CAAA,CAAkD;EAC3E1Q,YAAYZ,CAAA,EAAmBC,CAAA,EAAmCC,CAAA,EAAsB;IACtF,MAAM;MAAEkV,QAAA,EAAApV;IAAA,GAAYC,CAAA,EAAS;MAAEoV,IAAA,EAAM;IAAA,CAAsB,GADK,KAAA5L,SAAA,GAAAvJ,CAAA;EAElE;EAEA,IAAYkV,SAASpV,CAAA,EAAO;IACrB,KAAAyD,GAAA,CAAI,YAAYzD,CAAK;EAC5B;EAAA;AAAA;AAAA;EAKA,IAAIoV,SAAA,EAAoB;IACf,YAAK9R,GAAA,CAAI,UAAU;EAC5B;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAaA,MAAM+R,KAAKrV,CAAA,EAAmD;IAC5D,IAAI,KAAKoV,QAAA,EACD,UAAIjR,KAAA,CAAM,0BAA0B;IAG5C,KAAKiR,QAAA,GAAW;IAEZ;MACF,MAAM;QAAEtN,SAAA,EAAW7H,CAAA,GAAW;MAAK,IAAI,MAAM0K,CAAA,CAAQ;QACnDvH,KAAA,EAAO;QACP2H,MAAA,EAAQ;QACRtB,SAAA,EAAW,KAAKA,SAAA;QAChBuB,MAAA,EAAQ+N,EAAA,CAAmB/Y,CAAO;MAAA,CACnC;MACM,OAAAC,CAAA;IAAA,UACP;MACA,KAAKmV,QAAA,GAAW;IAClB;EACF;AACF;ACjDO,MAAM+D,EAAA,GAAYpI,CAAA,CACvB,CAAC;EAAEtH,SAAA,EAAA1J,CAAA;EAAWwP,OAAA,EAAAvP;AAAA,MAAc,IAAIkZ,EAAA,CAAM,IAAOlZ,CAAA,EAASD,CAAS,CACjE;ACEO,MAAMqZ,EAAA,SAAkB9H,CAAA,CAAgE;EAC7F1Q,YAAYZ,CAAA,EAAmBC,CAAA,EAAmCC,CAAA,EAAsB;IAChF;MAAEkV,QAAA,EAAApV;IAAS,GAAGC,CAAA,EAAS;MAC3B4X,KAAA,EAAO;MACPxC,IAAA,EAAM;IAAA,CACP,GAJ+D,KAAA5L,SAAA,GAAAvJ,CAAA;EAKlE;EAAA;AAAA;AAAA;EAKA2X,MAAA,EAAc;IACZ,KAAKpO,SAAA,CAAU,6BAA6B,GAC5C,KAAK2L,QAAA,GAAW;EAClB;EAEA,IAAYA,SAASpV,CAAA,EAAO;IACrB,KAAAyD,GAAA,CAAI,YAAYzD,CAAK;EAC5B;EAAA;AAAA;AAAA;EAKA,IAAIoV,SAAA,EAAoB;IACf,YAAK9R,GAAA,CAAI,UAAU;EAC5B;EAcA,MAAM+R,KAAKrV,CAAA,EAAuE;IAChF,IAAI,KAAKoV,QAAA,EACD,UAAIjR,KAAA,CAAM,+BAA+B;IAGjD,MAAM;MAAE0R,IAAA,EAAA5V,CAAA;MAAM2K,OAAA,EAAA1K;IAAQ,KACpB,OAAOF,CAAA,IAAkB,WACrB;MAAE6V,IAAA,EAAM7V;IAAA,IACRA,CAAA,KACD;IACL,KAAKoV,QAAA,GAAW;IAEZ;MAWI,MAAAzT,CAAA,IAVS,OAAMgJ,CAAA,CAAQ;QAC3BI,MAAA,EAAQ;QACR3H,KAAA,EAAO,CAAC,oBAAoB,sBAAsB;QAClDqG,SAAA,EAAW,KAAKA,SAAA;QAChBuB,MAAA,EAAQ;UAAE6K,IAAA,EAAA5V;QAAK;QACf2K,QAAQ/I,CAAA,EAAI;UACV,OAAOA,CAAA,CAAGuB,KAAA,KAAU,0BAA0B,CAAClD,CAAA,IAAWA,CAAA,CAAQ2B,CAAA,CAAGU,OAAO;QAC9E;MACD,OAAK,IAEY4E,IAAA,IAAQ;MAC1B,OAAIxF,CAAA,IACF,KAAKkW,KAAA,CAAM,GAENlW,CAAA;IAAA,UACP;MACA,KAAKyT,QAAA,GAAW;IAClB;EACF;EAAA;AAGF;AC7EO,MAAMiE,EAAA,GAAgBtI,CAAA,CAC3B,CAAC;EAAExB,OAAA,EAAAxP,CAAA;EAAS0J,SAAA,EAAAzJ;AAAA,MAAgB,IAAIoZ,EAAA,CAAU,IAAOrZ,CAAA,EAASC,CAAS,CACrE;ACGO,MAAMsZ,EAAA,SAAuB7M,CAAA,CAAgE;EAClG7L,YAAYX,CAAA,EAAoBC,CAAA,EAAmCe,CAAA,EAAsB;IACjF;MAAE2L,SAAA,EAAA3M;IAAU,GAAGC,CAAA,EAAS;MAC5B2M,IAAA,EAAM;MACNC,IAAA,EAAM;IAAA,CACP;IA2BH;AAAA;AAAA;AAAA;AAAA;IAAAnK,CAAA,aAAoB,CAAC1C,CAAA,EAAOC,CAAA,KAC1BD,CAAA,KAAU,UACNyI,CAAA,CAAG,2BAA2BxI,CAAQ,IAEtC,KAAKmM,KAAA,CAAM7I,EAAA,CAAGvD,CAAA,EAAOC,CAAe;IAQ1C;AAAA;AAAA;AAAA;AAAA;IAAAyC,CAAA,cAAsB,CAAC1C,CAAA,EAAOC,CAAA,KAC5BD,CAAA,KAAU,UACNwI,CAAA,CAAI,2BAA2BvI,CAAQ,IAEvC,KAAKmM,KAAA,CAAM9I,GAAA,CAAItD,CAAA,EAAOC,CAAe;IA/CwB,KAAAuJ,SAAA,GAAAxI,CAAA;EAKnE;EAEA,IAAY2L,UAAU3M,CAAA,EAAkB;IACjC,KAAAwD,GAAA,CAAI,aAAaxD,CAAO,GAC7B,KAAKwJ,SAAA,CAAU,iCAAiC;MAAEsD,UAAA,EAAY9M;IAAS;EACzE;EAAA;AAAA;AAAA;EAKA,IAAI2M,UAAA,EAAqB;IAChB,YAAKtJ,GAAA,CAAI,WAAW;EAC7B;EAAA;AAAA;AAAA;EAKAwJ,KAAA,EAAa;IACX,KAAKF,SAAA,GAAY;EACnB;EAAA;AAAA;AAAA;EA6BAC,KAAA,EAAa;IACX,KAAKD,SAAA,GAAY;EACnB;AACF;AC9DO,MAAM2M,EAAA,GAAqBxI,CAAA,CAChC,kBACA,CAAC;EACCxB,OAAA,EAAAxP,CAAA;EACA0J,SAAA,EAAAzJ,CAAA;EACAqM,KAAA,EAAApM,CAAA,GAAQ;IAAE2M,SAAA,EAAW;EAAM;AAAA,MACvB,IAAI0M,EAAA,CAAerZ,CAAA,CAAM2M,SAAA,EAAW7M,CAAA,EAASC,CAAS,CAC9D;ACPO,SAASwZ,GAAiBzZ,CAAA,EAAmC;EAC3D,OAAAgP,EAAA,CAAc,EAAArJ,KAAA,CAAM3F,CAAK;AAClC;ACGO,MAAM0Z,EAAA,SAAoBvG,EAAA,CAAqC;EAAA;AAAA;AAAA;EAIpE,IAAIwG,gBAAA,EAAmC;IAC9B,YAAKpW,GAAA,CAAI,iBAAiB;EACnC;EAEA,IAAI1B,QAAA,EAA2B;IACtB,YAAK0B,GAAA,CAAI,SAAS;EAC3B;EAEA,IAAIwT,YAAA,EAA+B;IAC1B,YAAKxT,GAAA,CAAI,aAAa;EAC/B;EAEA,IAAIuT,gBAAA,EAAmC;IAC9B,YAAKvT,GAAA,CAAI,iBAAiB;EACnC;EAEA,IAAIqW,qBAAA,EAAwC;IACnC,YAAKrW,GAAA,CAAI,sBAAsB;EACxC;EAAA;AAAA;AAAA;EAKAsW,SAAA,EAA8B;IAC5B,OAAO,KAAKtN,KAAA;EACd;EAAA;AAAA;AAAA;EAKA,IAAIwM,cAAA,EAAiC;IAC5B,YAAKxV,GAAA,CAAI,eAAe;EACjC;EAEA,IAAIuW,UAAA,EAA6B;IACxB,YAAKvW,GAAA,CAAI,WAAW;EAC7B;EAAA;AAAA;AAAA;AAAA;EAMA,IAAI2U,OAAA,EAAkB;IACpB,OAAO,CAAC,KAAKrW,OAAA,IAAWsK,EAAA,CAAY,KAAKtK,OAAO;EAClD;EAEA,IAAIkY,UAAA,EAA6B;IACxB,YAAKxW,GAAA,CAAI,WAAW;EAC7B;EAEA,IAAIyW,iBAAA,EAAoC;IAC/B,YAAKzW,GAAA,CAAI,kBAAkB;EACpC;EAAA;AAAA;AAAA;EAKA,IAAI0W,eAAA,EAAkC;IAC7B,YAAK1W,GAAA,CAAI,gBAAgB;EAClC;EAAA;AAAA;AAAA;EAKA,IAAI2W,uBAAA,EAA0C;IACrC,YAAK3W,GAAA,CAAI,wBAAwB;EAC1C;EAAA;AAAA;AAAA;EAKA,IAAI4W,sBAAA,EAAyC;IACpC,YAAK5W,GAAA,CAAI,wBAAwB;EAC1C;EAAA;AAAA;AAAA;AAAA;EAMA6W,OAAA,EAAgC;IACvB,OAAAzR,CAAA,CAAG,iBAAkB1I,CAAA,IAAU;MACpC,KAAKyD,GAAA,CAAI+V,EAAA,CAAiBxZ,CAAA,CAAMoa,YAAY,CAAC;IAAA,CAC9C;EACH;EAAA;AAAA;AAAA;EAKA,IAAIC,kBAAA,EAAqC;IAChC,YAAK/W,GAAA,CAAI,mBAAmB;EACrC;EAEA,IAAI5B,UAAA,EAA6B;IACxB,YAAK4B,GAAA,CAAI,WAAW;EAC7B;AACF;ACzGO,MAAMgX,EAAA,GAAkBvJ,CAAA,CAC7B,eACA,CAAC;EAAEzB,WAAA,EAAAvP,CAAA;EAAasM,KAAA,EAAArM,CAAA,GAAQD,CAAA;EAAakR,UAAA,EAAAhR;AAAA,MAAiB;EAC9C,MAAAC,CAAA,GAAK,IAAIuZ,EAAA,CAAYzZ,CAAK;EACrB,OAAAC,CAAA,CAAAC,CAAA,CAAGia,MAAA,EAAQ,GACfja,CAAA;AACT,CACF;ACJgB,SAAAqa,GAAmBxa,CAAA,GAA8B,IAAgC;EAC/F,OAAO4K,CAAA,CAAQ;IACb,GAAG5K,CAAA;IACHgL,MAAA,EAAQ;IACR3H,KAAA,EAAO;EAAA,CACR,EAAEgO,IAAA,CAAKoI,EAAgB;AAC1B;ACVgB,SAAAgB,EAAaza,CAAA,EAAeC,CAAA,EAAwB;EAC3D,OAAAD,CAAA,CAAM0a,UAAA,CAAWza,CAAM,IAAID,CAAA,GAAQ,GAAGC,CAAM,GAAGD,CAAK;AAC7D;ACDO,SAAS2a,EAAc3a,CAAA,EAA2C;EACvE,OAAO,IAAIyV,GAAA,CACT,OAAOzV,CAAA,IAAc,WACjBA,CAAA,GACA,GAAGA,CAAA,CAAUwV,QAAA,IAAY,EAAE,GAAGiF,CAAA,CAAaza,CAAA,CAAU4a,MAAA,IAAU,IAAI,GAAG,CAAC,GAAGH,CAAA,CAAaza,CAAA,CAAUuO,IAAA,IAAQ,IAAI,GAAG,CAAC,IACrH;AAEJ;ACWO,MAAMsM,EAAA,SAAcnH,EAAA,CAAsC;EAC/D7S,YACmBX,CAAA,EACAC,CAAA,EACAe,CAAA,EACjB;IACA,MAAMhB,CAAA,EAAS;MAAE4a,qBAAA,EAAuB;IAAoC;IAsH9E;AAAA;AAAA;IAAAlY,CAAA;IA1HmB,KAAA4M,OAAA,GAAAtP,CAAA,EACA,KAAA+Q,eAAA,GAAA9Q,CAAA,EACA,KAAAuJ,SAAA,GAAAxI,CAAA,EAIZ,KAAA0W,aAAA,GAAgBR,EAAA,CAAsBlX,CAAA,EAAS;MAClD,2BAA2B,CAAC,qBAAqB,kBAAkB;IAAA,CACpE;EACH;EA2BA6a,SAAS7a,CAAA,EAAaC,CAAA,EAAyD;IAC7E,MAAMe,CAAA,GAAeyZ,CAAA,CAAcza,CAAG,EAAE0G,QAAA,CAAS;IAGjD,IAAI,CAACuC,CAAA,CAAS,qBAAqB,KAAKqG,OAAO,GAAG;MACzC1L,MAAA,CAAAwR,IAAA,CAAKpU,CAAA,EAAc,QAAQ;MAClC;IACF;IAEM,MAAAU,CAAA,GAAgC,OAAOzB,CAAA,IAAqB,YAC9D;MAAE6a,cAAA,EAAgB7a;IAAA,IAClBA,CAAA,IAAoB;IAGxB,KAAKuJ,SAAA,CAAU,qBAAqB;MAClCuR,GAAA,EAAK/Z,CAAA;MACLga,WAAA,EAAatZ,CAAA,CAAQuZ,UAAA;MACrBC,gBAAA,EAAkBxZ,CAAA,CAAQoZ;IAAA,CAC3B;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAK,iBAAiBnb,CAAA,EAAmB;IAC5B;MAAEqV,QAAA,EAAApV,CAAA;MAAUqV,QAAA,EAAAtU,CAAA;MAAU0Z,MAAA,EAAAhZ;IAAA,IAAW,IAAI6T,GAAA,CAAIvV,CAAA,EAAK,cAAc;IAClE,IAAIC,CAAA,KAAa,QACf,MAAM,IAAIiE,KAAA,CAAM,iCAAiCjE,CAAQ,0BAA0B;IAGrF,IAAI,CAACgJ,CAAA,CAAS,wBAAwB,KAAKqG,OAAO,GAAG;MACnD1L,MAAA,CAAO6L,QAAA,CAASC,IAAA,GAAO1P,CAAA;MACvB;IACF;IAEA,KAAKwJ,SAAA,CAAU,wBAAwB;MAAE4R,SAAA,EAAWpa,CAAA,GAAWU;IAAA,CAAQ;EACzE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMkZ,sBAAA,EAAgD;IAC9C,MAAA5a,CAAA,GAAQ,KAAK+Q,eAAA;MACb;QACJ7J,IAAA,EAAAjH,CAAA,GAAO;MACT,IAAI,MAAMyK,CAAA,CAAQ;QAChBI,MAAA,EAAQ;QACR3H,KAAA,EAAO;QACPqG,SAAA,EAAW,KAAKA,SAAA;QAChBuB,MAAA,EAAQ;UAAEtD,MAAA,EAAQzH;QAAM;QACxB2K,OAAA,EAASP,EAAA,CAAepK,CAAK;MAAA,CAC9B;IAEM,OAAAC,CAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYAob,SAASrb,CAAA,EAAaC,CAAA,EAAqB;IACpC,KAAAkb,gBAAA,CACH,4BAA4B,IAAIlO,eAAA,CAAgB;MAAE8N,GAAA,EAAA/a,CAAA;MAAK4V,IAAA,EAAM3V,CAAA,IAAQ;IAAG,CAAC,EACtEyG,QAAA,GAIAkF,OAAA,CAAQ,OAAO,KAAK;EAE3B;AAMF;AC/IO,MAAM0P,EAAA,GAAYxK,CAAA,CACvB,CAAC;EAAExB,OAAA,EAAAxP,CAAA;EAAS0J,SAAA,EAAAzJ,CAAA;EAAWgR,eAAA,EAAA/Q;AAAA,MACd,IAAI2a,EAAA,CAAM7a,CAAA,EAASE,CAAA,EAAiBD,CAAS,CAExD;ACGsB,eAAAwb,GACpBzb,CAAA,GAA8B,IACE;EAC1B;IACJqI,WAAA,EAAapI,CAAA;IACbmI,eAAA,EAAiBlI,CAAA;IACjB,GAAGC;EACL,IAAI,MAAMyK,CAAA,CAAQ;IAChB,GAAG5K,CAAA;IACHgL,MAAA,EAAQ;IACR3H,KAAA,EAAO;EAAA,CACR;EAED,OAAO;IAAE,GAAGlD,CAAA;IAAMub,UAAA,EAAAzb,CAAA;IAAY0b,aAAA,EAAAzb;EAAc;AAC9C;ACfA,SAAS0b,EAAS5b,CAAA,EAAuB;EAChC,OAAAA,CAAA,GAAQ,IAAI,IAAIA,CAAA;AACzB;AAMO,MAAM6b,EAAA,SAAiB1I,EAAA,CAAkC;EAG9DtS,YAAY;IAAE6I,SAAA,EAAAxJ,CAAA;IAAW4b,YAAA,EAAA3b,CAAA;IAAc8H,MAAA,EAAA/G,CAAA;IAAQgH,KAAA,EAAAtG,CAAA;IAAO8Z,UAAA,EAAA5Z;EAAA,GAA6B;IAC3E;MACJmG,MAAA,EAAQ2T,CAAA,CAAS1a,CAAM;MACvBwa,UAAA,EAAA5Z,CAAA;MACAga,YAAA,EAAcF,CAAA,CAASzb,CAAY;MACnC+H,KAAA,EAAO0T,CAAA,CAASha,CAAK;IAAA,CACtB;IARcgB,CAAA;IASf,KAAK8G,SAAA,GAAYxJ,CAAA;EACnB;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA,MAAM6b,KAAK7b,CAAA,EAA6C;IACtD,MAAM;MAAEyb,aAAA,EAAAxb,CAAA;MAAe,GAAGe;IAAS,UAAMua,EAAA,CAAgBvb,CAAO;IAChE,KAAKwD,GAAA,CAAI;MACP,GAAGxC,CAAA;MACH4a,YAAA,EAAc3b,CAAA,GAAgBe,CAAA,CAAK+G,MAAA,GAAS,KAAK1E,GAAA,CAAI,cAAc;IAAA,CACpE;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAkBA,IAAI0E,OAAA,EAAiB;IACZ,YAAK1E,GAAA,CAAI,QAAQ;EAC1B;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAgBA,IAAIuY,aAAA,EAAuB;IAClB,YAAKvY,GAAA,CAAI,cAAc;EAChC;EAAA;AAAA;AAAA;AAAA;EAMA6W,OAAA,EAAgC;IACvB,OAAAzR,CAAA,CAAG,oBAAqBzI,CAAA,IAAU;MACjC;UACJ+H,MAAA,EAAA9H,CAAA;UACA+H,KAAA,EAAAhH,CAAA;UACAmH,WAAA,EAAazG,CAAA;UACbwG,eAAA,EAAiBtG;QACf,IAAA5B,CAAA;QACE6B,CAAA,GAAkB6Z,CAAA,CAASzb,CAAM;MAEvC,KAAKuD,GAAA,CAAI;QACPuE,MAAA,EAAQlG,CAAA;QACR2Z,UAAA,EAAA9Z,CAAA;QACAsG,KAAA,EAAO0T,CAAA,CAAS1a,CAAK;QACrB,IAAIY,CAAA,GAAgB;UAAEga,YAAA,EAAc/Z;QAAA,IAAoB,CAAC;MAAA,CAC1D;IAAA,CACF;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,IAAI2Z,WAAA,EAAsB;IACjB,YAAKnY,GAAA,CAAI,YAAY;EAC9B;EAAA;AAAA;AAAA;EAKA,IAAI2E,MAAA,EAAgB;IACX,YAAK3E,GAAA,CAAI,OAAO;EACzB;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAyY,OAAA,EAAe;IACb,KAAKtS,SAAA,CAAU,gBAAgB,GAC1B,KAAAhG,GAAA,CAAI,cAAc,EAAI;EAC7B;EAAA;AAAA;AAAA;EAKA,IAAIuY,SAAA,EAAoB;IACf,YAAKH,YAAA,KAAiB,KAAK7T,MAAA;EACpC;AACF;ACpIO,MAAMiU,EAAA,GAAelL,CAAA,CAC1B,YACA,OAAO;EAAE1E,KAAA,EAAAtM,CAAA;EAAOqP,QAAA,EAAApP,CAAA;EAAUyJ,SAAA,EAAAxJ,CAAA;EAAWgR,UAAA,EAAA/Q;AAAA,MAAiB;EACpD,IAAIe,CAAA,GAAa;IACbU,CAAA,GAAS;IACTE,CAAA,GAAQ;IACRC,CAAA,GAAe;EAGnB,IAAI/B,CAAA,EACFkB,CAAA,GAAalB,CAAA,CAAM0b,UAAA,EACnB9Z,CAAA,GAAS5B,CAAA,CAAMiI,MAAA,EACfnG,CAAA,GAAQ9B,CAAA,CAAMkI,KAAA,EACdnG,CAAA,GAAe/B,CAAA,CAAM8b,YAAA,UACZ,CAAC,SAAS,YAAY,WAAW,QAAQ,QAAQ,KAAK,EAAE1S,QAAA,CAASnJ,CAAQ,GAGrEiB,CAAA,OACbU,CAAA,GAASkC,MAAA,CAAOyE,WAAA,EAChBzG,CAAA,GAAQgC,MAAA,CAAOqE,UAAA,EACfpG,CAAA,GAAe+B,MAAA,CAAOyE,WAAA,MACjB;IAGL,MAAM4I,CAAA,GAAW,MAAMsK,EAAA,CAAgB;MAAE3Q,OAAA,EAAS;MAAMpB,SAAA,EAAAxJ;IAAA,CAAW;IACnEgB,CAAA,GAAaiQ,CAAA,CAASuK,UAAA,EACtB9Z,CAAA,GAASuP,CAAA,CAASlJ,MAAA,EAClBnG,CAAA,GAAQqP,CAAA,CAASjJ,KAAA,EACFnG,CAAA,GAAAoP,CAAA,CAASwK,aAAA,GAAgB/Z,CAAA,GAAS;EACnD;EAGM,MAAA4G,CAAA,GAAW,IAAIqT,EAAA,CAAS;IAC5BnS,SAAA,EAAAxJ,CAAA;IACA+H,MAAA,EAAArG,CAAA;IACAsG,KAAA,EAAApG,CAAA;IACAga,YAAA,EAAA/Z,CAAA;IACA2Z,UAAA,EAAAxa;EAAA,CACD;EAGU,OAAAf,CAAA,CAAAqI,CAAA,CAAS4R,MAAA,EAAQ,GAErB5R,CAAA;AACT,CACF;ACjDgB,SAAA2T,EAAUnc,CAAA,EAAcC,CAAA,EAAqB;EAC3Dmc,QAAA,CAASC,eAAA,CAAgBC,KAAA,CAAMC,WAAA,CAAYvc,CAAA,EAAMC,CAAK;AACxD;ACwBgB,SAAAuc,GACdxc,CAAA,EACAC,CAAA,EACAC,CAAA,EACW;EACIA,CAAA,KAAAA,CAAA,GAAC6B,CAAA,IAAa,QAAQA,CAAQ;EAEvC,MAAA5B,CAAA,GAAYD,CAAA,CAAW,QAAQ;IAC/BgB,CAAA,GAAQhB,CAAA,CAAW,IAAI;IAEvB0B,CAAA,GAAY6a,CAAA,KAAM;MAChB;QAAEzE,WAAA,EAAAjW;MAAgB,IAAA/B,CAAA;MAEpB,IAAA0L,CAAA,CAAM3J,CAAW,GACnBoa,CAAA,CAAUhc,CAAA,EAAW4B,CAAW,OAC3B;QACC;UAAEF,OAAA,EAAA2G,CAAA;UAASwR,gBAAA,EAAA7I;QAAqB,IAAAlR,CAAA;QAElC8B,CAAA,KAAgB,cAAcyG,CAAA,GAChC2T,CAAA,CAAUhc,CAAA,EAAWqI,CAAO,IACnBzG,CAAA,KAAgB,wBAAwBoP,CAAA,IACjDgL,CAAA,CAAUhc,CAAA,EAAWgR,CAAgB;MAEzC;MAEUgL,CAAA,CAAAjb,CAAA,EAAOlB,CAAA,CAAQ6B,OAAO;IAAA;IAG5BC,CAAA,GAAY,CAChB7B,CAAA,CAAYwD,EAAA,CAAG,UAAU7B,CAAS,GAClC5B,CAAA,CAAQyD,EAAA,CAAG,UAAU7B,CAAS;EAGtB,OAAAA,CAAA,IAEH,MAAME,CAAA,CAAUsB,OAAA,CAAQrB,CAAA,IAAOA,CAAA,CAAK;AAC7C;ACrCgB,SAAA2a,GACd1c,CAAA,EACAC,CAAA,EACW;EACXA,CAAA,KAAAA,CAAA,GAAmBE,CAAA,IACV,cAAcA,CAAA,CAAS2L,OAAA,CAAQ,UAAW5K,CAAA,IAAM,IAAIA,CAAA,CAAE6K,WAAA,CAAa,GAAE,CAAC;EAG/E,MAAM7L,CAAA,GAAYuc,CAAA,KAAM;IACflY,MAAA,CAAA6G,OAAA,CAAQpL,CAAA,CAAY6Z,QAAA,CAAU,GAAEzW,OAAA,CAAQ,CAAC,CAACjD,CAAA,EAAGe,CAAC,MAAM;MACrDA,CAAA,IACQib,CAAA,CAAAlc,CAAA,CAAcE,CAAC,GAAGe,CAAC;IAC/B,CACD;EAAA;EAGO,OAAAhB,CAAA,IAEHF,CAAA,CAAYyD,EAAA,CAAG,UAAUvD,CAAS;AAC3C;AChBgB,SAAAyc,GACd3c,CAAA,EACAC,CAAA,EACW;EACOA,CAAA,KAAAA,CAAA,GAACkR,CAAA,IAAa,iBAAiBA,CAAQ;EACnD,OACJjR,CAAA,EACAC,CAAA,EACAe,CAAA,IACG,CAAC,UAAU,SAAS,eAAe,EAAY6J,GAAA,CAAKoG,CAAA,IAASlR,CAAA,CAAckR,CAAI,CAAC;IAC/EvP,CAAA,GAAYgb,CAAA,KAAMT,CAAA,CAAUjc,CAAA,EAAW,GAAGF,CAAA,CAASiI,MAAM,IAAI;IAC7DnG,CAAA,GAAW+a,CAAA,KAAMV,CAAA,CAAUhc,CAAA,EAAU,GAAGH,CAAA,CAASkI,KAAK,IAAI;IAC1DnG,CAAA,GAAkB+a,CAAA,KAAMX,CAAA,CAAUjb,CAAA,EAAiB,GAAGlB,CAAA,CAAS8b,YAAY,IAAI;IAG/EtT,CAAA,GAAY,CAChBxI,CAAA,CAASyD,EAAA,CAAG,iBAAiB7B,CAAS,GACtC5B,CAAA,CAASyD,EAAA,CAAG,gBAAgB3B,CAAQ,GACpC9B,CAAA,CAASyD,EAAA,CAAG,uBAAuB1B,CAAe;EAG1C,OAAAH,CAAA,IACDE,CAAA,IACOC,CAAA,IAET,MAAMyG,CAAA,CAAUpF,OAAA,CAAQ+N,CAAA,IAAOA,CAAA,CAAK;AAC7C;AC9CgB,SAAA4L,GAAQ/c,CAAA,GAAqB,IAAiB;EAC5D,MAAMC,CAAA,GAAyB,CAC7B0I,CAAA,CAAG,iBAAiB,MAAM;MACxBuB,CAAA,CAAU,oBAAoB,GAC9BpG,MAAA,CAAO6L,QAAA,CAASqN,MAAA;IAAO,CACxB;IAEG9c,CAAA,GAAqB+c,CAAA,KAAMhd,CAAA,CAAUmD,OAAA,CAASjD,CAAA,IAAMA,CAAA,EAAG;EAE7D,IAAIH,CAAA,EAAoB;IAChB,MAAAG,CAAA,GAAQic,QAAA,CAASc,aAAA,CAAc,OAAO;IAC5C/c,CAAA,CAAMkN,EAAA,GAAK,0BACF+O,QAAA,CAAAe,IAAA,CAAKC,WAAA,CAAYjd,CAAK,GAErBF,CAAA,CAAA0D,IAAA,CACRgF,CAAA,CAAG,oBAAqBzH,CAAA,IAAS;MAI/Bf,CAAA,CAAMkd,SAAA,GAAYnc,CAAA;IAAA,CACnB,GACD,MAAMkb,QAAA,CAASe,IAAA,CAAKG,WAAA,CAAYnd,CAAK;EAEzC;EAKA,OAAA+J,CAAA,CAAU,gBAAgB;IAAEqT,gBAAA,EAAkB;EAAM,IAE7Crd,CAAA;AACT;ACzCO,SAASsd,GAAA,EAAiB;EAC/B,OAAO,OAAO1Z,MAAA,GAAW;AAC3B;ACCA,eAAsB2Z,GAAA,EAA0B;EAC1C,IAAAjU,EAAA,CAAgB1F,MAAM,GACjB;EAEL;IACI,aAAA8G,CAAA,CAAQ;MAAEI,MAAA,EAAQ;MAAyB3H,KAAA,EAAO;MAAiByH,OAAA,EAAS;IAAA,CAAK,GAChF;EAAA,QACD;IACC;EACT;AACF;ACFO,SAAS4S,GAAgB1d,CAAA,EAA8C;EAC5E,MAAMC,CAAA,GAAK,OAAOD,CAAA,IAAoB,WAClCiP,CAAA,CAAkBjP,CAAe,IACjCA,CAAA;EAGJ2Q,EAAA,CAAc1Q,CAAE;EAEhB,SAASC,EAAiBgB,CAAA,EAAqB;IACzC,WAAOA,CAAA,IAAS,UAGhB;MACF,MAAM;QAAE4F,SAAA,EAAAlF;MAAA,IAAciF,EAAA,CAAa3F,CAAI;MAEnCU,CAAA,KAAc,2BAChBqF,CAAA,CAAkB,iBAAiB;QACjCoT,YAAA,EAAcjU,IAAA,CAAKT,KAAA,CAAM6K,EAAA,CAAqBvQ,CAAA,CAAGsP,WAAW,CAAC;MAAA,CACd,GAG/C3N,CAAA,KAAc,8BAChBqF,CAAA,CAAkB,oBAAoB;QACpCiB,KAAA,EAAOpE,MAAA,CAAOqE,UAAA;QACdF,MAAA,EAAQnE,MAAA,CAAOyE,WAAA;QACfH,eAAA,EAAiB;QACjBC,WAAA,EAAa;MAAA,CACqC;IACtD,QACM,CACR;EACF;EAGA,IAAIsB,EAAA,IAAY;IACd,MAAMzI,CAAA,GAAc4C,MAAA,CAAOyD,MAAA,CAAO4C,WAAA,CAAYlE,IAAA,CAAKnC,MAAA,CAAOyD,MAAM;IACzDzD,MAAA,CAAAyD,MAAA,CAAO4C,WAAA,GAAsBvI,CAAA;MAC7B1B,CAAA,CAAiB0B,CAAI,GAC1BV,CAAA,CAAYU,CAAI;IAAA;IAElB;EACF;EAEI,IAAAyH,EAAA,CAAkBvF,MAAM,GAAG;IAC7B,MAAM5C,CAAA,GAAS4C,MAAA,CAAOwF,QAAA,CAASC,MAAA,CAAOtD,IAAA,CAAKnC,MAAA,CAAOwF,QAAQ;IACnDxF,MAAA,CAAAwF,QAAA,CAASC,MAAA,GAAiB3H,CAAA;MAC1B1B,CAAA,CAAiB0B,CAAI,GAC1BV,CAAA,CAAOU,CAAI;IAAA;IAEb;EACF;EAEA,MAAMzB,CAAA,GAAS2D,MAAA,CAAe2F,oBAAA;EAC7B3F,MAAA,CAAe2F,oBAAA,GAAuB;IACrC,IAAItJ,CAAA,IAAS,CAAC;IACduJ,UAAA,GAAaxI,CAAA,EAAW;MACjBhB,CAAA,CAAiBkG,IAAA,CAAKiB,SAAA,CAAU;QAAEP,SAAA,EAAW5F,CAAA,CAAK,CAAC;QAAG6F,SAAA,EAAW7F,CAAA,CAAK,CAAC;MAAA,CAAG,CAAC,GAEvEf,CAAA,IAAAA,CAAA,CAAMuJ,SAAA,CAAU,GAAGxI,CAAI;IAClC;EAAA;AAEJ;ACrEO,SAASyc,GAAW3d,CAAA,EAAmC;EAC5D,OAAOA,CAAA,YAAiBmE,CAAA;AAC1B;ACAgB,SAAAyZ,GAAiB5d,CAAA,EAAgBC,CAAA,EAA0B;EACzE,OAAO0d,EAAA,CAAW3d,CAAK,KAAKA,CAAA,CAAMsE,IAAA,KAASrE,CAAA;AAC7C;ACAgB,SAAA4d,EACd7d,CAAA,EACAC,CAAA,EAC6C;EACzC,IAAAC,CAAA,EACAC,CAAA,EACAe,CAAA;EAEA,cAAOlB,CAAA,IAAS,WACPE,CAAA,GAAAF,CAAA,IAEXE,CAAA,GAAWF,CAAA,CAAKwV,QAAA,KAAa,SACzBvV,CAAA,GACAD,CAAA,CAAKwV,QAAA,EACTrV,CAAA,GAASH,CAAA,CAAKiL,MAAA,EACd/J,CAAA,GAAKlB,CAAA,CAAKqN,EAAA,GAGL9I,MAAA,CAAOuZ,MAAA,CAAO;IACnBzQ,EAAA,EAAInM,CAAA,KAAQ6H,IAAA,CAAKgV,MAAA,KAAW,KAAK,KAAM,GAAGnX,QAAA,CAAS,EAAE;IACrD4O,QAAA,EAAAtV,CAAA;IACA+K,MAAA,EAAA9K;EAAA,CACD;AACH;ACfO,MAAM6d,EAAA,CAA4B;EAQvCnd,YAIEZ,CAAA,EAIQC,CAAA,EAKSC,CAAA,GAAuB+J,CAAA,EACxC;IAlBO;AAAA;AAAA;IAAAtH,CAAA;IAEQA,CAAA,aAAsB,IAAID,CAAA;IAiCnC;AAAA;AAAA;IAAAC,CAAA,mBAAW;IAiBnB;AAAA;AAAA;IAAAA,CAAA,eAAO,MAAY,KAAKqb,EAAA,CAAG,EAAE;IAqF7B;AAAA;AAAA;IAAArb,CAAA,aAA4B,KAAK4E,EAAA,CAAG/D,EAAA,CAAGwC,IAAA,CAAK,KAAKuB,EAAE;IAKnD;AAAA;AAAA;IAAA5E,CAAA,cAA8B,KAAK4E,EAAA,CAAGhE,GAAA,CAAIyC,IAAA,CAAK,KAAKuB,EAAE;IA3HhD,IAPI,KAAA0W,MAAA,GAAAhe,CAAA,EAKS,KAAAwJ,SAAA,GAAAvJ,CAAA,EAEbF,CAAA,CAAQiD,MAAA,KAAW,GACf,MAAAwB,CAAA,CAAYQ,EAAA,EAA8B,8BAA8B;IAGhF,IAAIhF,CAAA,GAAS,KAAKA,CAAA,IAAUD,CAAA,CAAQiD,MAAA,EAC5B,MAAAwB,CAAA,CACJS,EAAA,EACA;IAGC,KAAAgZ,OAAA,GAAUle,CAAA,CAAQ8K,GAAA,CAAK7J,CAAA,IAAS2c,CAAA,CAAY3c,CAAA,EAAM,EAAE,CAAC;EAC5D;EAAA;AAAA;AAAA;AAAA;EAWAkd,OAAA,EAAe;IACR,KAAKC,QAAA,KACR,KAAKA,QAAA,GAAW,IAChB,KAAKtC,IAAA,CAAK,GACPpT,CAAA,wBAAuB,KAAK2V,IAAI;EAEvC;EAAA;AAAA;AAAA;EAUA,IAAIC,QAAA,EAAuD;IAClD,YAAKJ,OAAA,CAAQ,KAAKK,KAAK;EAChC;EAAA;AAAA;AAAA;EAKAC,OAAA,EAAe;IACb,KAAKJ,QAAA,GAAW,IACZ3V,CAAA,wBAAuB,KAAK4V,IAAI;EACtC;EAAA;AAAA;AAAA;EAKAI,QAAA,EAAgB;IACd,KAAKT,EAAA,CAAG,CAAC;EACX;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASAA,GAAGhe,CAAA,EAAeC,CAAA,EAAqB;IAE/B,MAAAC,CAAA,GAAQ,KAAKqe,KAAA,GAAQve,CAAA;MAGrBiB,CAAA,GAAW6H,IAAA,CAAK4V,GAAA,CACpB5V,IAAA,CAAKC,GAAA,CAAI,GAAG7I,CAAK,GACjB,KAAKge,OAAA,CAAQjb,MAAA,GAAS;IAKpB,CAAA/C,CAAA,KAAUe,CAAA,IAAYhB,CAAA,KAExB,KAAK0e,cAAA,CAAe1d,CAAA,EAAU,KAAKid,OAAA,CAAQjd,CAAQ,CAAC;EAExD;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA2d,KAAK5e,CAAA,EAAeC,CAAA,EAAqB;IACvC,KAAK+d,EAAA,CAAGhe,CAAA,GAAQ,KAAKue,KAAA,EAAOte,CAAG;EACjC;EAAA;AAAA;AAAA;EAKA,IAAI4e,QAAA,EAAmB;IACrB,OAAO,KAAKN,KAAA,GAAQ;EACtB;EAAA;AAAA;AAAA;EAKA,IAAIO,QAAA,EAAmB;IACrB,OAAO,KAAKP,KAAA,KAAU,KAAKL,OAAA,CAAQjb,MAAA,GAAS;EAC9C;EAAA;AAAA;AAAA;EAKA,IAAIsb,MAAA,EAAgB;IAClB,OAAO,KAAKN,MAAA;EACd;EAAA;AAAA;AAAA;AAAA;EAgBAva,KAAK1D,CAAA,EAAkD;IACjD,KAAK8e,OAAA,IACP,KAAKZ,OAAA,CAAQva,MAAA,CAAO,KAAK4a,KAAA,GAAQ,CAAC,GAE/B,KAAAI,cAAA,CAAe,KAAKJ,KAAA,GAAQ,GAAGX,CAAA,CAAY5d,CAAA,EAAM,KAAKse,OAAA,CAAQ/I,QAAQ,CAAC;EAC9E;EAAA;AAAA;AAAA;AAAA;EAMA1J,QAAQ7L,CAAA,EAAkD;IACnD,KAAA2e,cAAA,CAAe,KAAKJ,KAAA,EAAOX,CAAA,CAAY5d,CAAA,EAAM,KAAKse,OAAA,CAAQ/I,QAAQ,CAAC;EAC1E;EAAA;AAAA;AAAA;AAAA;AAAA;EAOQoJ,eAAe3e,CAAA,EAAeC,CAAA,EAAsD;IACpF,MAAAC,CAAA,GAAQF,CAAA,GAAQ,KAAKue,KAAA;IAC3B,IAAI,CAACre,CAAA,IAAS,KAAKoe,OAAA,KAAYre,CAAA,EAE7B;IAGF,MAAMgB,CAAA,GAAO,KAAKqd,OAAA;IAEd,SAAKC,KAAA,KAAUve,CAAA,EAAO;MACxB,MAAM2B,CAAA,GAAY,KAAKsc,MAAA;MACvB,KAAKA,MAAA,GAASje,CAAA,EAIV,KAAKoe,QAAA,IAAYzc,CAAA,GAAY,KAAM3B,CAAA,GAAQ,KAC7C,KAAK8b,IAAA,CAAK;IAEd;IAEK,KAAAoC,OAAA,CAAQle,CAAK,IAAIC,CAAA,EACjB,KAAAsH,EAAA,CAAGrE,IAAA,CAAK,UAAU;MACrB6b,SAAA,EAAW;MACX9Y,IAAA,EAAAhF,CAAA;MACA+d,EAAA,EAAI,KAAKV,OAAA;MACTW,KAAA,EAAA/e;IAAA,CACD;EACH;EAAA;AAAA;AAAA;EAKQ4b,KAAA,EAAa;IACd,KAAArS,SAAA,CAAU,6BAA6B;MAAEsD,UAAA,EAAY,CAAC,CAAC,KAAKwR;IAAA,CAAO;EAC1E;AACF;ACxNO,SAASW,EACd;EACElU,MAAA,EAAAjL,CAAA;EACA,GAAGC;AACL,GACoC;EAC7B;IAAE,IAAID,CAAA,IAAU;MAAEuO,IAAA,EAAM;MAAIqM,MAAA,EAAQ;IAAA;IAAO,GAAG3a;EAAA;AACvD;ACTO,SAASmf,EAAUpf,CAAA,EAA8C;EACtE,MAAMC,CAAA,GAAa,OAAOD,CAAA,IAAc,WACpCA,CAAA,CAAU0a,UAAA,CAAW,GAAG,IACxB,CAAC,EAAE1a,CAAA,CAAUwV,QAAA,IAAYxV,CAAA,CAAUwV,QAAA,CAASkF,UAAA,CAAW,GAAG;IACxDxa,CAAA,GAAMya,CAAA,CAAc3a,CAAS;EAEnC,OAAO,GAAGC,CAAA,GAAaC,CAAA,CAAIsV,QAAA,GAAWtV,CAAA,CAAIsV,QAAA,CAAStJ,KAAA,CAAM,CAAC,CAAC,GAAGhM,CAAA,CAAI0a,MAAM,GAAG1a,CAAA,CAAIqO,IAAI;AACrF;ACsBgB,SAAA8Q,EACdrf,CAAA,EACAC,CAAA,EACAC,CAAA,EAC0B;EACtB,IAAAC,CAAA,EACAe,CAAA;EAEA,OAAOlB,CAAA,IAAe,WACjBG,CAAA,GAAAH,CAAA,IAEPG,CAAA,GAAOif,CAAA,CAAUpf,CAAU,GAC3BE,CAAA,GAAQF,CAAA,CAAWsM,KAAA,EACnBpL,CAAA,GAAKlB,CAAA,CAAWqN,EAAA;EAGlB,MAAM;IAAEmI,QAAA,EAAA5T,CAAA;IAAUgZ,MAAA,EAAA9Y,CAAA;IAAQyM,IAAA,EAAAxM;EAAS,QAAI0T,GAAA,CAAItV,CAAA,EAAM,WAAWsa,CAAA,CAAaxa,CAAA,EAAc,GAAG,CAAC,EAAE;EACtF;IAAEoN,EAAA,EAAAnM,CAAA;IAAIsU,QAAA,EAAA5T,CAAA;IAAUqJ,MAAA,EAAQ;MAAEsD,IAAA,EAAAxM,CAAA;MAAM6Y,MAAA,EAAA9Y,CAAA;MAAQwK,KAAA,EAAApM;IAAA;EAAA;AACjD;AChDA,eAAsBof,EAAGtf,CAAA,EAAiC;EACxD,OAAIA,CAAA,KAAU,IACL,KAMFyK,OAAA,CAAQC,IAAA,CAAc,CAC3B,IAAID,OAAA,CAASxK,CAAA,IAAQ;IACb,MAAAC,CAAA,GAAS2D,CAAA,CAAS,YAAY,MAAM;MACjC3D,CAAA,IACPD,CAAA,CAAI,EAAI;IAAA,CACT;IAEM6D,MAAA,CAAAqa,OAAA,CAAQF,EAAA,CAAGje,CAAK;EAAA,CACxB;EAAA;EAGD,IAAIyK,OAAA,CAASxK,CAAA,IAAQ;IACR0K,UAAA,CAAA1K,CAAA,EAAK,IAAI,EAAK;EAAA,CAC1B,EACF;AACH;ACxBA,eAAsBsf,GAAA,EAAsB;EAY1C,IAXIzb,MAAA,CAAOqa,OAAA,CAAQjb,MAAA,IAAU,MAKtBY,MAAA,CAAAqa,OAAA,CAAQqB,SAAA,CAAU,MAAM,EAAE,GAKb,MAAMF,CAAA,CAAG,IAAIxb,MAAA,CAAOqa,OAAA,CAAQjb,MAAM,IAEpD;EAYE,IAAAjD,CAAA,GAAe,MAAMqf,CAAA,CAAG,EAAE;EAC9B,OAAOrf,CAAA,GACUA,CAAA,SAAMqf,CAAA,CAAG,EAAE;AAE9B;AC3BO,SAASG,GAAYzf,CAAA,EAA0C;EAC7D,OAAA2a,CAAA,CAAc3a,CAAK,EAAEwV,QAAA;AAC9B;ACYA,MAAMkK,EAAA,GAAc;EACdC,CAAA,GAAc;EACdC,CAAA,GAAiB;AAKhB,MAAMC,EAAA,CAA6B;EASxChf,YAIEZ,CAAA,EAIAC,CAAA,EACA;IAAEwJ,SAAA,EAAAvJ,CAAA;IAAW2f,QAAA,EAAA5e,CAAA,GAAW;IAAW6e,IAAA,EAAAne;EAAqC,QACxE;IAlBegB,CAAA;IAEAA,CAAA,aAAqB,IAAID,CAAA;IAEjCC,CAAA;IAEAA,CAAA;IA4BD;AAAA;AAAA;IAAAA,CAAA,mBAAW;IA6GX;AAAA;AAAA;AAAA;IAAAA,CAAA,qBAAa,CAAC;MAAE0J,KAAA,EAAArM;IAAA,MAA2B;MAIjD,IAAIA,CAAA,KAAU,MACZ,OAAO,KAAK0D,IAAA,CAAK,KAAKqc,SAAA,CAAUlc,MAAA,CAAO6L,QAAA,CAASC,IAAI,CAAC;MAKnD3P,CAAA,KAAUyf,EAAA,GACZ5b,MAAA,CAAOqa,OAAA,CAAQO,OAAA,KACNze,CAAA,KAAU0f,CAAA,IACnB,KAAKrB,IAAA,CAAK,GAERre,CAAA,KAAU2f,CAAA,IACZ,KAAKlB,OAAA,CAAQ;IACf;IAMM;AAAA;AAAA;IAAA9b,CAAA,4BAAoB,OAAO;MACjCqc,EAAA,EAAAhf,CAAA;MACAiG,IAAA,EAAAhG,CAAA;MACAgf,KAAA,EAAA/e;IAAA,MAC8E;MAE1E,KAAKke,QAAA,KACP,MAAM,KAAK4B,WAAA,KAER,KAAAzY,EAAA,CAAGrE,IAAA,CAAK,UAAU;QACrB+b,KAAA,EAAA/e,CAAA;QACA+F,IAAA,EAAMiZ,CAAA,CAAmBjf,CAAI;QAC7B+e,EAAA,EAAIE,CAAA,CAAmBlf,CAAE;QACzB+e,SAAA,EAAW;MAAA,CACZ;IAAA;IAMH;AAAA;AAAA;IAAApc,CAAA,aAA2B,KAAK4E,EAAA,CAAG/D,EAAA,CAAGwC,IAAA,CAAK,KAAKuB,EAAE;IAKlD;AAAA;AAAA;IAAA5E,CAAA,cAA6B,KAAK4E,EAAA,CAAGhE,GAAA,CAAIyC,IAAA,CAAK,KAAKuB,EAAE;IA5KnD,KAAKwX,SAAA,GAAY,IAAIhB,EAAA,CACnB/d,CAAA,CAAQ8K,GAAA,CAAKjJ,CAAA,IAASud,CAAA,CAAYvd,CAAA,EAAM,GAAG,CAAC,GAC5C5B,CAAA,EACAC,CAAA,GAEF,KAAK6e,SAAA,CAAUvb,EAAA,CAAG,UAAW3B,CAAA,IAAM;MAC5B,KAAKoe,iBAAA,CAAkBpe,CAAC;IAAA,CAC9B,GACD,KAAKge,QAAA,GAAW5e,CAAA,EACX,KAAA6e,IAAA,GAAON,EAAA,CAAY7d,CAAA,IAAQ,EAAE;EACpC;EAAA;AAAA;AAAA;EAUA,MAAMwc,OAAA,EAAwB;IACvB,KAAKC,QAAA,KACR,KAAKA,QAAA,GAAW,IAChB,KAAKW,SAAA,CAAUZ,MAAA,IACRta,MAAA,CAAAC,gBAAA,CAAiB,YAAY,KAAKoc,UAAU,GACnD,MAAM,KAAKF,WAAA;EAEf;EAAA;AAAA;AAAA;EAKA3B,KAAA,EAAa;IACX,KAAKU,SAAA,CAAUV,IAAA;EACjB;EAAA;AAAA;AAAA;EAKAG,OAAA,EAAS;IACP,KAAKJ,QAAA,GAAW,IAChB,KAAKW,SAAA,CAAUP,MAAA,IACR3a,MAAA,CAAAE,mBAAA,CAAoB,YAAY,KAAKmc,UAAU;EACxD;EAAA;AAAA;AAAA;EAKAzB,QAAA,EAAgB;IACP,YAAKM,SAAA,CAAUN,OAAA;EACxB;EAAA;AAAA;AAAA;EAKA,IAAIF,MAAA,EAAgB;IAClB,OAAO,KAAKQ,SAAA,CAAUR,KAAA;EACxB;EAAA;AAAA;AAAA;EAKA,IAAInR,GAAA,EAAa;IACR,YAAK2R,SAAA,CAAUT,OAAA,CAAQlR,EAAA;EAChC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA4Q,GAAGhe,CAAA,EAAeC,CAAA,EAAqB;IACrC,OAAO,KAAK8e,SAAA,CAAUf,EAAA,CAAGhe,CAAA,EAAOC,CAAG;EACrC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA2e,KAAK5e,CAAA,EAAeC,CAAA,EAAqB;IAClC,KAAA8e,SAAA,CAAUH,IAAA,CAAK5e,CAAA,EAAOC,CAAG;EAChC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,IAAIqO,KAAA,EAAe;IACjB,QAAQ,KAAKyQ,SAAA,CAAUT,OAAA,CAAQtT,MAAA,IAAU,IAAIsD,IAAA,IAAQ;EACvD;EAAA;AAAA;AAAA;EAKA,IAAIuQ,QAAA,EAAmB;IACrB,OAAO,KAAKE,SAAA,CAAUF,OAAA;EACxB;EAAA;AAAA;AAAA;EAKA,IAAIC,QAAA,EAAmB;IACrB,OAAO,KAAKC,SAAA,CAAUD,OAAA;EACxB;EAAA;AAAA;AAAA;EAKA,IAAIZ,QAAA,EAAgD;IAClD,OAAO,KAAKa,SAAA,CAAUb,OAAA,CAAQpT,GAAA,CAAIoU,CAAkB;EACtD;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAmEA,IAAIiB,KAAA,EAAe;IACjB,OAAOhB,CAAA,CAAU,IAAI;EACvB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,IAAI5J,SAAA,EAAmB;IACd,YAAKwJ,SAAA,CAAUT,OAAA,CAAQ/I,QAAA;EAChC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAmBAwK,UAAU/f,CAAA,EAA6B;IACjC,IAAAC,CAAA,GAAMya,CAAA,CAAc1a,CAAI;IAC5B,OAAI,KAAK6f,QAAA,KACP5f,CAAA,GAAMya,CAAA,CAAcza,CAAA,CAAIqO,IAAA,CAAKrC,KAAA,CAAM,CAAC,CAAC,IAGhC;MACLsJ,QAAA,EAAUtV,CAAA,CAAIsV,QAAA;MACdoF,MAAA,EAAQ1a,CAAA,CAAI0a,MAAA;MACZrM,IAAA,EAAMrO,CAAA,CAAIqO;IAAA;EAEd;EAiCA5K,KAAK1D,CAAA,EAA4DC,CAAA,EAAuB;IACtF,MAAMC,CAAA,GAAOkf,CAAA,CAAYpf,CAAA,EAAY,KAAKmgB,IAAI;MACxC;QAAE9T,KAAA,EAAApL,CAAA,GAAQhB;MAAA,IAAYC,CAAA,CAAK8K,MAAA;IACjC,KAAK+T,SAAA,CAAUrb,IAAA,CAAK;MAAE,GAAGxD,CAAA;MAAM8K,MAAA,EAAQ;QAAE,GAAG9K,CAAA,CAAK8K,MAAA;QAAQqB,KAAA,EAAApL;MAAM;IAAG;EACpE;EAUA4K,QAAQ7L,CAAA,EAA4DC,CAAA,EAAuB;IACzF,MAAMC,CAAA,GAAOkf,CAAA,CAAYpf,CAAA,EAAY,KAAKmgB,IAAI;MACxC;QAAE9T,KAAA,EAAApL,CAAA,GAAQhB;MAAA,IAAYC,CAAA,CAAK8K,MAAA;IACjC,KAAK+T,SAAA,CAAUlT,OAAA,CAAQ;MAAE,GAAG3L,CAAA;MAAM8K,MAAA,EAAQ;QAAE,GAAG9K,CAAA,CAAK8K,MAAA;QAAQqB,KAAA,EAAApL;MAAM;IAAG;EACvE;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAmf,WAAWpgB,CAAA,EAAiC;IAC1C,MAAMC,CAAA,IAAQ,KAAK6f,IAAA,CAAK7c,MAAA,KAAW,IAAI,KAAK,KAAK6c,IAAA,IAC7CtF,CAAA,CAAa2E,CAAA,CAAUnf,CAAK,GAAG,GAAG;IAEtC,OAAO,KAAK6f,QAAA,GACRrF,CAAA,CAAava,CAAA,CAAKgM,KAAA,CAAM,CAAC,GAAG,KAAK4T,QAAA,KAAa,YAAY,MAAM,IAAI,IACpE5f,CAAA;EACN;EAAA;AAAA;AAAA;EAKA,MAAc+f,YAAA,EAA6B;IAGlCnc,MAAA,CAAAE,mBAAA,CAAoB,YAAY,KAAKmc,UAAU;IAEhD;QAAE7T,KAAA,EAAArM;MAAU;MACZC,CAAA,GAAO,KAAKmgB,UAAA,CAAW,IAAI;IAGjC,MAAMd,EAAA,CAAK,GAEP,KAAKT,OAAA,IAAW,KAAKC,OAAA,IAGhBjb,MAAA,CAAAqa,OAAA,CAAQmC,YAAA,CAAaX,CAAA,EAAa,EAAE,GAC3C7b,MAAA,CAAOqa,OAAA,CAAQqB,SAAA,CAAUvf,CAAA,EAAO,IAAIC,CAAI,GACjC4D,MAAA,CAAAqa,OAAA,CAAQqB,SAAA,CAAUI,CAAA,EAAgB,EAAE,GAE3C,MAAMN,CAAA,CAAG,EAAE,KACF,KAAKR,OAAA,IAGPhb,MAAA,CAAAqa,OAAA,CAAQmC,YAAA,CAAaX,CAAA,EAAa,EAAE,GAC3C7b,MAAA,CAAOqa,OAAA,CAAQqB,SAAA,CAAUvf,CAAA,EAAO,IAAIC,CAAI,KAC/B,KAAK6e,OAAA,IAGPjb,MAAA,CAAAqa,OAAA,CAAQmC,YAAA,CAAargB,CAAA,EAAOC,CAAI,GAChC4D,MAAA,CAAAqa,OAAA,CAAQqB,SAAA,CAAUI,CAAA,EAAgB,EAAE,GAE3C,MAAMN,CAAA,CAAG,EAAE,MAIJxb,MAAA,CAAAqa,OAAA,CAAQmC,YAAA,CAAaZ,EAAA,EAAa,EAAE,GAC3C5b,MAAA,CAAOqa,OAAA,CAAQqB,SAAA,CAAUvf,CAAA,EAAO,IAAIC,CAAI,IAGnC4D,MAAA,CAAAC,gBAAA,CAAiB,YAAY,KAAKoc,UAAU;EACrD;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,IAAIvF,OAAA,EAAiB;IACnB,QAAQ,KAAKoE,SAAA,CAAUT,OAAA,CAAQtT,MAAA,IAAU,IAAI2P,MAAA,IAAU;EACzD;EAAA;AAAA;AAAA;EAKA,IAAItO,MAAA,EAA2B;IAC7B,QAAQ,KAAK0S,SAAA,CAAUT,OAAA,CAAQtT,MAAA,IAAU,CAAI,GAAAqB,KAAA;EAC/C;AACF;AC3YO,SAASiU,GACdvgB,CAAA,EACyB;EACzBA,CAAA,KAAAA,CAAA,GAAY;EACZ,MAAM;IAAE4P,IAAA,EAAA3P,CAAA;IAAMsO,IAAA,EAAArO;EAAA,IAAS4D,MAAA,CAAO6L,QAAA;EAE9B,IAAIxP,CAAA,GAAOif,CAAA,CACTpf,CAAA,CAAQ8f,QAAA,KAAa,OAEjB7f,CAAA,GAaAC,CAAA,CAAKkJ,QAAA,CAAS,GAAG,IAAIlJ,CAAA,CAAKgM,KAAA,CAAM,CAAC,IAAI,IAAIhM,CAAA,CAAKgM,KAAA,CAAM,CAAC,CAAC;EAK5D,MAAMhL,CAAA,GAAOlB,CAAA,CAAQ+f,IAAA,GAAON,EAAA,CAAYzf,CAAA,CAAQ+f,IAAI,IAAI;EACxD,IAAI7e,CAAA,EAAM;IACR,IAAI,CAACf,CAAA,CAAKua,UAAA,CAAWxZ,CAAI,GACjB,MAAAwD,CAAA,CACJY,EAAA,EACA,SAASnF,CAAI,mCAAmCe,CAAI;IAGjDf,CAAA,GAAAA,CAAA,CAAK+L,KAAA,CAAMhL,CAAA,CAAKgC,MAAM;EAC/B;EAEA,OAAO,IAAI2c,EAAA,CAAwB,CAAC1f,CAAI,GAAG,GAAGH,CAAO;AACvD;AChCO,SAASwgB,GAAQxgB,CAAA,EAA8B;EAC9C,MAAAC,CAAA,GAAQD,CAAA,CAAMiM,KAAA,CAAM,OAAO;EAC1B,OAAAhM,CAAA,GAAQA,CAAA,CAAM,CAAC,IAAI;AAC5B;ACNA,SAASwgB,GACPzgB,CAAA,EACAC,CAAA,EACyB;EAGzB,IAAI4Q,EAAA,IAAgB;IACZ,MAAA3Q,CAAA,GAAWiQ,cAAA,CAAeG,OAAA,CAAQtQ,CAAiB;IACzD,IAAIE,CAAA,EACE;MACF,MAAM;QAAEse,KAAA,EAAAre,CAAA;QAAOge,OAAA,EAAAjd;MAAA,IAAYkF,IAAA,CAAKT,KAAA,CAAMzF,CAAQ;MAC9C,OAAO,IAAI2f,EAAA,CACT3e,CAAA,EACAf,CAAA,EACAF,CAAA;IAAA,SAEKE,CAAA,EAAG;MACF6B,OAAA,CAAAC,KAAA,CAAM,2CAA2C9B,CAAC;IAC5D;EAEJ;EAIA,OAAOogB,EAAA,CAAmCtgB,CAAO;AACnD;AAOgB,SAAAygB,GACd1gB,CAAA,EACAC,CAAA,EACyB;EACnB,MAAAC,CAAA,GAAYugB,EAAA,CAAmBzgB,CAAA,EAAmBC,CAAO;IAEzDE,CAAA,GAAYwgB,CAAA,KAAMxQ,cAAA,CAAeC,OAAA,CAAQpQ,CAAA,EAAmBoG,IAAA,CAAKiB,SAAA,CAAU;MAC/EmX,KAAA,EAAOte,CAAA,CAAUse,KAAA;MACjBL,OAAA,EAASje,CAAA,CAAUie;IACpB,EAAC;EAGQ,OAAAje,CAAA,CAAAuD,EAAA,CAAG,UAAUtD,CAAS,GAGtBA,CAAA,IAEHD,CAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}