{"ast":null,"code":"var f = Object.defineProperty;\nvar u = (r, t, e) => t in r ? f(r, t, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: e\n}) : r[t] = e;\nvar c = (r, t, e) => u(r, typeof t != \"symbol\" ? t + \"\" : t, e);\nfunction a(r, t) {\n  return e => e instanceof r && e.type === t;\n}\nfunction p(r, t) {\n  t || (t = []);\n  const e = Symbol(r);\n  class n extends Error {\n    constructor(...i) {\n      const o = typeof t == \"function\" ? t(...i) : typeof t == \"string\" ? [t] : t || [];\n      super(...o);\n      c(this, \"type\", e);\n      this.name = r;\n    }\n  }\n  return Object.defineProperty(n, \"name\", {\n    value: r\n  }), [n, a(n, e)];\n}\nfunction l(r, t, e) {\n  const n = Symbol(r);\n  class s extends p(r, e)[0] {\n    constructor(...o) {\n      super(...o);\n      c(this, \"data\");\n      c(this, \"type\", n);\n      this.data = t(...o);\n    }\n  }\n  return Object.defineProperty(s, \"name\", {\n    value: r\n  }), [s, a(s, n)];\n}\nexport { p as errorClass, l as errorClassWithData, a as isErrorOfKind };","map":{"version":3,"names":["a","r","t","e","type","p","Symbol","n","Error","constructor","i","o","c","name","Object","defineProperty","value","l","s","data"],"sources":["/home/leabrun/python_/KWORK/dj/front/node_modules/error-kid/src/isErrorOfKind.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/error-kid/src/errorClass.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/error-kid/src/errorClassWithData.ts"],"sourcesContent":["export type IsErrorOfKindFn<Err> = (value: unknown) => value is Err;\r\n\r\n/**\r\n * Creates a predicate function returning true if the passed value is an instance of the\r\n * specified class.\r\n * @param ErrorClass\r\n * @param type\r\n */\r\nexport function isErrorOfKind<Err extends { type: symbol }>(\r\n  ErrorClass: { new(...args: any[]): Err },\r\n  type: symbol,\r\n): IsErrorOfKindFn<Err> {\r\n  return (value): value is Err => {\r\n    return value instanceof ErrorClass && value.type === type;\r\n  };\r\n}","import { isErrorOfKind, type IsErrorOfKindFn } from './isErrorOfKind.js';\r\n\r\nexport type ToSuperFn<ConstructorArgs extends any[]> =\r\n  (...args: ConstructorArgs) => Parameters<ErrorConstructor>;\r\n\r\nexport type ToSuperType<ConstructorArgs extends any[]> =\r\n  | ToSuperFn<ConstructorArgs>\r\n  | string\r\n  | Parameters<ErrorConstructor>;\r\n\r\nexport interface CustomErrorWithoutData extends Error {\r\n  type: symbol;\r\n}\r\n\r\nexport interface ErrorClass<ConstructorArgs extends any[]> {\r\n  name: string;\r\n  new(...args: ConstructorArgs): CustomErrorWithoutData;\r\n}\r\n\r\n/**\r\n * @return A new error class with a predefined name.\r\n * @param name - error class name\r\n * @param toSuper - a function converting passed arguments to a list of arguments passed to\r\n * the `Error` constructor. It can also be a message or a list of arguments passed to the\r\n * super constructor.\r\n */\r\nexport function errorClass<ConstructorArgs extends any[] = []>(\r\n  name: string,\r\n  toSuper?: ToSuperType<ConstructorArgs>,\r\n): [\r\n  ErrorClass: ErrorClass<ConstructorArgs>,\r\n  isInstanceOfErrorClass: IsErrorOfKindFn<CustomErrorWithoutData>,\r\n] {\r\n  toSuper ||= [];\r\n  const type = Symbol(name);\r\n\r\n  class CustomError extends Error implements CustomErrorWithoutData {\r\n    type = type;\r\n\r\n    constructor(...args: ConstructorArgs) {\r\n      const params = typeof toSuper === 'function'\r\n        ? toSuper(...args)\r\n        : typeof toSuper === 'string'\r\n          ? [toSuper] as [string]\r\n          : toSuper || [];\r\n      super(...params);\r\n      this.name = name;\r\n    }\r\n  }\r\n\r\n  Object.defineProperty(CustomError, 'name', { value: name });\r\n\r\n  return [CustomError, isErrorOfKind(CustomError, type)];\r\n}\r\n","import { errorClass, type ToSuperType } from './errorClass.js';\r\nimport { isErrorOfKind, type IsErrorOfKindFn } from './isErrorOfKind.js';\r\n\r\nexport type ToDataFn<ConstructorArgs extends any[], Data> = (...args: ConstructorArgs) => Data;\r\n\r\nexport interface CustomErrorWithData<Data> extends Error {\r\n  type: symbol;\r\n  data: Data;\r\n}\r\n\r\nexport interface ErrorClassWithData<Data, ConstructorArgs extends any[]> {\r\n  name: string;\r\n  new(...args: ConstructorArgs): CustomErrorWithData<Data>;\r\n}\r\n\r\n/**\r\n * @returns A new error class with a predefined name and data type.\r\n * @param name - error name\r\n * @param toData - function converting constructor arguments to data\r\n * @param toSuper - a function converting passed arguments to a list of arguments passed to\r\n * the `Error` constructor. It can also be a message or a list of arguments passed to the\r\n * super constructor.\r\n */\r\nexport function errorClassWithData<Data, ConstructorArgs extends any[] = []>(\r\n  name: string,\r\n  toData: ToDataFn<ConstructorArgs, Data>,\r\n  toSuper?: ToSuperType<ConstructorArgs>,\r\n): [\r\n  ErrorClass: ErrorClassWithData<Data, ConstructorArgs>,\r\n  isInstanceOfErrorClass: IsErrorOfKindFn<CustomErrorWithData<Data>>,\r\n] {\r\n  const type = Symbol(name);\r\n\r\n  class CustomError extends errorClass(name, toSuper)[0] {\r\n    data: Data;\r\n    type = type;\r\n\r\n    constructor(...args: ConstructorArgs) {\r\n      super(...args);\r\n      this.data = toData(...args);\r\n    }\r\n  }\r\n\r\n  Object.defineProperty(CustomError, 'name', { value: name });\r\n\r\n  return [CustomError, isErrorOfKind(CustomError, type)];\r\n}\r\n"],"mappings":";;;;;;;;AAQgB,SAAAA,EACdC,CAAA,EACAC,CAAA,EACsB;EACtB,OAAQC,CAAA,IACCA,CAAA,YAAiBF,CAAA,IAAcE,CAAA,CAAMC,IAAA,KAASF,CAAA;AAEzD;ACWgB,SAAAG,EACdJ,CAAA,EACAC,CAAA,EAIA;EACAA,CAAA,KAAAA,CAAA,GAAY;EACN,MAAAC,CAAA,GAAOG,MAAA,CAAOL,CAAI;EAExB,MAAMM,CAAA,SAAoBC,KAAA,CAAwC;IAGhEC,YAAA,GAAeC,CAAA,EAAuB;MACpC,MAAMC,CAAA,GAAS,OAAOT,CAAA,IAAY,aAC9BA,CAAA,CAAQ,GAAGQ,CAAI,IACf,OAAOR,CAAA,IAAY,WACjB,CAACA,CAAO,IACRA,CAAA,IAAW;MACjB,MAAM,GAAGS,CAAM;MARjBC,CAAA,eAAOT,CAAA;MASL,KAAKU,IAAA,GAAOZ,CAAA;IACd;EACF;EAEA,OAAAa,MAAA,CAAOC,cAAA,CAAeR,CAAA,EAAa,QAAQ;IAAES,KAAA,EAAOf;EAAA,CAAM,GAEnD,CAACM,CAAA,EAAaP,CAAA,CAAcO,CAAA,EAAaJ,CAAI,CAAC;AACvD;AC9BgB,SAAAc,EACdhB,CAAA,EACAC,CAAA,EACAC,CAAA,EAIA;EACM,MAAAI,CAAA,GAAOD,MAAA,CAAOL,CAAI;EAExB,MAAMiB,CAAA,SAAoBb,CAAA,CAAWJ,CAAA,EAAME,CAAO,EAAE,CAAC,EAAE;IAIrDM,YAAA,GAAeE,CAAA,EAAuB;MACpC,MAAM,GAAGA,CAAI;MAJfC,CAAA;MACAA,CAAA,eAAOL,CAAA;MAIA,KAAAY,IAAA,GAAOjB,CAAA,CAAO,GAAGS,CAAI;IAC5B;EACF;EAEA,OAAAG,MAAA,CAAOC,cAAA,CAAeG,CAAA,EAAa,QAAQ;IAAEF,KAAA,EAAOf;EAAA,CAAM,GAEnD,CAACiB,CAAA,EAAalB,CAAA,CAAckB,CAAA,EAAaX,CAAI,CAAC;AACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}