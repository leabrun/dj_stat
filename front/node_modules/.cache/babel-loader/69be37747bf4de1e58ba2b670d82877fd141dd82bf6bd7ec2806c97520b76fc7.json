{"ast":null,"code":"function C(o) {\n  return o.replace(/[A-Z]/g, e => `-${e.toLowerCase()}`);\n}\nfunction b(o) {\n  return o.replace(/[A-Z]/g, e => `_${e.toLowerCase()}`);\n}\nfunction $(o) {\n  return Object.entries(o).reduce((e, [t, n]) => (e[b(t)] = n, e), {});\n}\nfunction p(o) {\n  return o.replace(/_[a-z]/g, e => e[1].toUpperCase());\n}\nfunction m(o) {\n  return Object.entries(o).reduce((e, [t, n]) => (e[p(t)] = n, e), {});\n}\nfunction s(o) {\n  const e = m(o);\n  for (const t in e) {\n    const n = e[t];\n    n && typeof n == \"object\" && !(n instanceof Date) && (e[t] = Array.isArray(n) ? n.map(s) : s(n));\n  }\n  return e;\n}\nfunction k(o) {\n  return o.replace(/_([a-z])/g, (e, t) => `-${t.toLowerCase()}`);\n}\nfunction u(o) {\n  return `tapps/${o}`;\n}\nfunction y(o, e) {\n  sessionStorage.setItem(u(o), JSON.stringify(e));\n}\nfunction S(o) {\n  const e = sessionStorage.getItem(u(o));\n  try {\n    return e ? JSON.parse(e) : void 0;\n  } catch {}\n}\nfunction h(...o) {\n  const e = o.flat(1);\n  return [e.push.bind(e), () => {\n    e.forEach(t => {\n      t();\n    });\n  }];\n}\n// @__NO_SIDE_EFFECTS__\nfunction T(o, e) {\n  e || (e = {});\n  const {\n      textColor: t,\n      bgColor: n,\n      shouldLog: a\n    } = e,\n    r = a === void 0 ? !0 : a,\n    l = typeof r == \"boolean\" ? () => r : r;\n  function c(g, d, ...f) {\n    if (d || l()) {\n      const i = \"font-weight:bold;padding:0 5px;border-radius:5px\";\n      console[g](`%c${Intl.DateTimeFormat(\"en-GB\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        fractionalSecondDigits: 3,\n        timeZone: \"UTC\"\n      }).format(/* @__PURE__ */new Date())}%c / %c${o}`, `${i};background-color: lightblue;color:black`, \"\", `${i};${t ? `color:${t};` : \"\"}${n ? `background-color:${n}` : \"\"}`, ...f);\n    }\n  }\n  return [c.bind(void 0, \"log\"), c.bind(void 0, \"error\")];\n}\nexport { C as camelToKebab, b as camelToSnake, $ as camelToSnakeObjKeys, h as createCbCollector, T as createLogger, s as deepSnakeToCamelObjKeys, S as getStorageValue, y as setStorageValue, p as snakeToCamel, m as snakeToCamelObjKeys, k as snakeToKebab };","map":{"version":3,"names":["C","o","replace","e","toLowerCase","b","$","Object","entries","reduce","t","n","p","toUpperCase","m","s","Date","Array","isArray","map","k","u","y","sessionStorage","setItem","JSON","stringify","S","getItem","parse","h","flat","push","bind","forEach","T","textColor","bgColor","shouldLog","a","r","l","c","g","d","f","i","console","Intl","DateTimeFormat","hour","minute","second","fractionalSecondDigits","timeZone","format"],"sources":["/home/leabrun/python_/KWORK/dj/front/node_modules/@telegram-apps/toolkit/src/casing/camelToKebab.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@telegram-apps/toolkit/src/casing/camelToSnake.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@telegram-apps/toolkit/src/casing/camelToSnakeObjKeys.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@telegram-apps/toolkit/src/casing/snakeToCamel.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@telegram-apps/toolkit/src/casing/snakeToCamelObjKeys.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@telegram-apps/toolkit/src/casing/deepSnakeToCamelObjKeys.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@telegram-apps/toolkit/src/casing/snakeToKebab.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@telegram-apps/toolkit/src/storage/storage.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@telegram-apps/toolkit/src/createCbCollector.ts","/home/leabrun/python_/KWORK/dj/front/node_modules/@telegram-apps/toolkit/src/createLogger.ts"],"sourcesContent":["/**\n * Converts string value from camel case to kebab case.\n * @param value - value to convert.\n */\nexport function camelToKebab(value: string): string {\n  return value.replace(/[A-Z]/g, (match) => `-${match.toLowerCase()}`);\n}\n","export type CamelToSnakeCase<T extends string> = T extends `${infer First}${infer Rest}`\n  ? `${First extends Capitalize<First> ? '_' : ''}${Lowercase<First>}${CamelToSnakeCase<Rest>}`\n  : T;\n\n/**\n * Converts string value from camel case to snake case.\n * @param value - value to convert.\n */\nexport function camelToSnake<T extends string>(value: T): CamelToSnakeCase<T> {\n  return value.replace(/[A-Z]/g, (match) => `_${match.toLowerCase()}`) as CamelToSnakeCase<T>;\n}","import { camelToSnake, type CamelToSnakeCase } from '@/casing/camelToSnake.js';\n\nexport type ConvertCamelKeysToSnakeCase<T> = {\n  [K in keyof T as CamelToSnakeCase<string & K>]: T[K];\n};\n\n/**\n * Converts object keys from snake to camel case.\n * @param value - value to convert.\n */\nexport function camelToSnakeObjKeys<T extends object>(value: T): ConvertCamelKeysToSnakeCase<T> {\n  return Object.entries(value).reduce<ConvertCamelKeysToSnakeCase<T>>((acc, [k, v]) => {\n    acc[camelToSnake(k) as keyof ConvertCamelKeysToSnakeCase<T>] = v;\n    return acc;\n  }, {} as ConvertCamelKeysToSnakeCase<T>);\n}","export type SnakeToCamelCase<S extends string> =\n  S extends `${infer Head}_${infer Tail}`\n    ? `${Head}${Capitalize<SnakeToCamelCase<Tail>>}`\n    : S;\n\n/**\n * Converts string value from snake case to camel case.\n * @param value - value to convert.\n */\nexport function snakeToCamel<T extends string>(value: T): SnakeToCamelCase<T> {\n  return value.replace(/_[a-z]/g, (m) => m[1].toUpperCase()) as SnakeToCamelCase<T>;\n}","import { snakeToCamel, type SnakeToCamelCase } from '@/casing/snakeToCamel.js';\n\nexport type ConvertSnakeKeysToCamelCase<T> = {\n  [K in keyof T as SnakeToCamelCase<string & K>]: T[K];\n};\n\n/**\n * Converts object keys from snake to camel case.\n * @param value - value to convert.\n */\nexport function snakeToCamelObjKeys<T extends object>(value: T): ConvertSnakeKeysToCamelCase<T> {\n  return Object.entries(value).reduce<ConvertSnakeKeysToCamelCase<T>>((acc, [k, v]) => {\n    acc[snakeToCamel(k) as keyof ConvertSnakeKeysToCamelCase<T>] = v;\n    return acc;\n  }, {} as ConvertSnakeKeysToCamelCase<T>);\n}","import { snakeToCamelObjKeys } from '@/casing/snakeToCamelObjKeys.js';\nimport type { SnakeToCamelCase } from '@/casing/snakeToCamel.js';\n\nexport type DeepConvertSnakeKeysToCamelCase<T> = T extends infer U\n    ? U extends object\n      ? U extends Date\n        ? U\n        : U extends (infer Item)[]\n          ? DeepConvertSnakeKeysToCamelCase<Item>[]\n          : {\n            [K in keyof U as SnakeToCamelCase<string & K>]: DeepConvertSnakeKeysToCamelCase<U[K]>\n          } & {}\n      : U\n    : T;\n\n/**\n * Deeply converts object keys from snake to camel case.\n * @param value - value to convert.\n */\nexport function deepSnakeToCamelObjKeys<T extends object>(\n  value: T,\n): DeepConvertSnakeKeysToCamelCase<T> {\n  const camelCased = snakeToCamelObjKeys(value);\n  for (const key in camelCased) {\n    const value = camelCased[key];\n    if (value && typeof value === 'object' && !(value instanceof Date)) {\n      (camelCased as any)[key] = Array.isArray(value)\n        ? value.map(deepSnakeToCamelObjKeys)\n        : deepSnakeToCamelObjKeys(value);\n    }\n  }\n  return camelCased as DeepConvertSnakeKeysToCamelCase<T>;\n}","/**\n * Converts string value from snake case to kebab case.\n * @param value - value to convert.\n */\nexport function snakeToKebab(value: string): string {\n  return value.replace(/_([a-z])/g, (_, letter) => `-${letter.toLowerCase()}`);\n}\n","/**\n * Converts a passed storage key to the formatted state.\n * @param key - storage key.\n */\nfunction formatKey(key: string): string {\n  return `tapps/${key}`;\n}\n\n/**\n * Saves value in the storage.\n * @param key - storage key.\n * @param value - storage value.\n */\nexport function setStorageValue<T>(key: string, value: T): void {\n  sessionStorage.setItem(formatKey(key), JSON.stringify(value));\n}\n\n/**\n * Extracts value from the storage.\n * @param key - storage key.\n */\nexport function getStorageValue<R>(key: string): R | undefined {\n  const value = sessionStorage.getItem(formatKey(key));\n  try {\n    return value ? JSON.parse(value) as R : undefined;\n  } catch {\n  }\n}\n","export type CallbackFn = () => void;\n\n/**\n * Returns a tuple, containing function to add cleanup, call cleanup, and flag showing whether\n * cleanup was called. Cleanup will not be performed in case, it was done before.\n */\nexport function createCbCollector(...cbs: (CallbackFn | CallbackFn[])[]): [\n  add: (...fns: CallbackFn[]) => void,\n  call: () => void,\n] {\n  const callbacks = cbs.flat(1);\n\n  return [\n    callbacks.push.bind(callbacks),\n    () => {\n      callbacks.forEach(cb => {\n        cb();\n      });\n    },\n  ];\n}","/**\n * Message log level.\n */\nexport type LogLevel = 'log' | 'error';\n\nexport interface LoggerOptions {\n  bgColor?: string;\n  textColor?: string;\n  /**\n   * True if logs are enabled.\n   * @default true\n   */\n  shouldLog?: boolean | (() => boolean);\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nexport function createLogger(scope: string, options?: LoggerOptions): [\n  /**\n   * Prints a log message into the console.\n   * @param force - should `shouldLog` value be ignored.\n   * @param args - items to log.\n   */\n  log: (force: boolean, ...args: any[]) => void,\n  /**\n   * Prints an error message into the console.\n   * @param force - should `shouldLog` value be ignored.\n   * @param args - items to log.\n   */\n  error: (force: boolean, ...args: any[]) => void,\n] {\n  options ||= {};\n  const {\n    textColor,\n    bgColor,\n    shouldLog: optionsShouldLog\n  } = options;\n  const shouldLogValue = optionsShouldLog === undefined ? true : optionsShouldLog;\n  const shouldLog = typeof shouldLogValue === 'boolean'\n    ? () => shouldLogValue\n    : shouldLogValue;\n\n  /**\n   * Prints a message into the console.\n   * @param level - log level.\n   * @param force - should `shouldLog` value be ignored.\n   * @param args - arguments.\n   */\n  function print(level: LogLevel, force: boolean, ...args: any[]): void {\n    if (force || shouldLog()) {\n      const commonCss = 'font-weight:bold;padding:0 5px;border-radius:5px';\n      console[level](\n        `%c${\n          Intl\n            .DateTimeFormat('en-GB', {\n              hour: '2-digit',\n              minute: '2-digit',\n              second: '2-digit',\n              fractionalSecondDigits: 3,\n              timeZone: 'UTC',\n            })\n            .format(new Date())\n        }%c / %c${scope}`,\n        `${commonCss};background-color: lightblue;color:black`,\n        '',\n        `${commonCss};${textColor ? `color:${textColor};` : ''}${bgColor ? `background-color:${bgColor}` : ''}`,\n        ...args,\n      );\n    }\n  }\n\n  return [print.bind(undefined, 'log'), print.bind(undefined, 'error')];\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}